
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800768c  0800768c  0001768c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d64  08007d64  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d6c  08007d6c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  2000007c  08007df0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08007df0  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f38a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004897  00000000  00000000  0005f436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000037b8  00000000  00000000  00063cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003560  00000000  00000000  00067488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab68  00000000  00000000  0006a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027906  00000000  00000000  00095550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105a34  00000000  00000000  000bce56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c288a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f7c4  00000000  00000000  001c28dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007674 	.word	0x08007674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007674 	.word	0x08007674

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_GPIO_Init+0xc4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <MX_GPIO_Init+0xc4>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <MX_GPIO_Init+0xc4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a24      	ldr	r2, [pc, #144]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_GPIO_Init+0xc4>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f002 ff19 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = btnBleu_Pin;
 80005f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btnBleu_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	480b      	ldr	r0, [pc, #44]	; (800063c <MX_GPIO_Init+0xc8>)
 800060e:	f002 fd61 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000612:	2320      	movs	r3, #32
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f002 fd52 	bl	80030d4 <HAL_GPIO_Init>

}
 8000630:	bf00      	nop
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	48000800 	.word	0x48000800

08000640 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000646:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <MX_I2C1_Init+0x78>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <MX_I2C1_Init+0x74>)
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <MX_I2C1_Init+0x7c>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000662:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067a:	480e      	ldr	r0, [pc, #56]	; (80006b4 <MX_I2C1_Init+0x74>)
 800067c:	f002 feec 	bl	8003458 <HAL_I2C_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000686:	f000 f96a 	bl	800095e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <MX_I2C1_Init+0x74>)
 800068e:	f003 fa65 	bl	8003b5c <HAL_I2CEx_ConfigAnalogFilter>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000698:	f000 f961 	bl	800095e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800069c:	2100      	movs	r1, #0
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_I2C1_Init+0x74>)
 80006a0:	f003 faa7 	bl	8003bf2 <HAL_I2CEx_ConfigDigitalFilter>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006aa:	f000 f958 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000098 	.word	0x20000098
 80006b8:	40005400 	.word	0x40005400
 80006bc:	10909cec 	.word	0x10909cec

080006c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0ac      	sub	sp, #176	; 0xb0
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	2288      	movs	r2, #136	; 0x88
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f005 ffbb 	bl	800665c <memset>
  if(i2cHandle->Instance==I2C1)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a21      	ldr	r2, [pc, #132]	; (8000770 <HAL_I2C_MspInit+0xb0>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d13b      	bne.n	8000768 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80006f0:	2340      	movs	r3, #64	; 0x40
 80006f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4618      	mov	r0, r3
 80006fe:	f004 f929 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000708:	f000 f929 	bl	800095e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000710:	4a18      	ldr	r2, [pc, #96]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 800071a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071c:	f003 0302 	and.w	r3, r3, #2
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000724:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	2312      	movs	r3, #18
 800072e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073e:	2304      	movs	r3, #4
 8000740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000748:	4619      	mov	r1, r3
 800074a:	480b      	ldr	r0, [pc, #44]	; (8000778 <HAL_I2C_MspInit+0xb8>)
 800074c:	f002 fcc2 	bl	80030d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 8000752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075a:	6593      	str	r3, [r2, #88]	; 0x58
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_I2C_MspInit+0xb4>)
 800075e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	37b0      	adds	r7, #176	; 0xb0
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40005400 	.word	0x40005400
 8000774:	40021000 	.word	0x40021000
 8000778:	48000400 	.word	0x48000400

0800077c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b0aa      	sub	sp, #168	; 0xa8
 8000780:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000782:	f002 fb19 	bl	8002db8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000786:	f000 f899 	bl	80008bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800078a:	f7ff fef3 	bl	8000574 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800078e:	f002 fa5d 	bl	8002c4c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000792:	f7ff ff55 	bl	8000640 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000796:	f000 fa07 	bl	8000ba8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	printf("Boot\r\n");
 800079a:	4840      	ldr	r0, [pc, #256]	; (800089c <main+0x120>)
 800079c:	f006 f8cc 	bl	8006938 <puts>
	// Configuration de l'afficheur OLED
	// cf : https://github.com/olikraus/u8g2/wiki/u8g2setupc#ssd1306-128x64_noname
	// si appel u8g2_Setup_ssd1306_i2c_128x64_noname_1 => 128 octets de framebuffer (il faut passer par les pages (fonctions u8g2_FirstPage et u8g2_NextPage))
	// si appel u8g2_Setup_ssd1306_i2c_128x64_noname_2 => 256 octets de framebuffer (il faut passer par les pages (fonctions u8g2_FirstPage et u8g2_NextPage))
	// si appel u8g2_Setup_ssd1306_i2c_128x64_noname_f => 1024 octets de framebuffer (Full Buffer Mode)
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R2, u8x8_byte_hw_i2c,
 80007a0:	f107 0008 	add.w	r0, r7, #8
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <main+0x124>)
 80007a6:	4a3f      	ldr	r2, [pc, #252]	; (80008a4 <main+0x128>)
 80007a8:	493f      	ldr	r1, [pc, #252]	; (80008a8 <main+0x12c>)
 80007aa:	f000 fbe5 	bl	8000f78 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
			u8x8_stm32_gpio_and_delay_cb); // init u8g2 structure

	printf("taille buffer : %d\r\n", u8g2_GetBufferSize(&u8g2));
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	7c1b      	ldrb	r3, [r3, #16]
 80007b2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80007b6:	fb02 f303 	mul.w	r3, r2, r3
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	4619      	mov	r1, r3
 80007be:	483b      	ldr	r0, [pc, #236]	; (80008ac <main+0x130>)
 80007c0:	f006 f834 	bl	800682c <iprintf>
	buf = (uint8_t*) malloc(u8g2_GetBufferSize(&u8g2)); // dynamically allocate a buffer of the required size
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	7c1b      	ldrb	r3, [r3, #16]
 80007c8:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f005 ff3a 	bl	800664c <malloc>
 80007d8:	4603      	mov	r3, r0
 80007da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	u8g2_SetBufferPtr(&u8g2, buf); // set the internal page buffer pointer to the newly allocated page buffer
 80007de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c

	u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 f8c5 	bl	8002978 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 f8ce 	bl	8002996 <u8x8_SetPowerSave>
	u8g2_ClearBuffer(&u8g2);
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fb28 	bl	8000e54 <u8g2_ClearBuffer>

	u8g2_SetDrawColor(&u8g2, BLANC);
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2101      	movs	r1, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f001 faeb 	bl	8001de6 <u8g2_SetDrawColor>

	u8g2_SetFont(&u8g2, u8g2_font_courB10_tr);
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	4926      	ldr	r1, [pc, #152]	; (80008b0 <main+0x134>)
 8000816:	4618      	mov	r0, r3
 8000818:	f001 f98e 	bl	8001b38 <u8g2_SetFont>
	u8g2_SetFontRefHeightExtendedText(&u8g2);
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4618      	mov	r0, r3
 8000822:	f001 f93d 	bl	8001aa0 <u8g2_SetFontRefHeightExtendedText>
	u8g2_SetFontPosTop(&u8g2);
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4618      	mov	r0, r3
 800082c:	f001 f974 	bl	8001b18 <u8g2_SetFontPosTop>
	u8g2_SetFontDirection(&u8g2, 0);
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f001 f998 	bl	8001b6c <u8g2_SetFontDirection>

	u8g2_DrawStr(&u8g2, 20, 50, "RAN IE3 ESE");
 800083c:	f107 0008 	add.w	r0, r7, #8
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <main+0x138>)
 8000842:	2232      	movs	r2, #50	; 0x32
 8000844:	2114      	movs	r1, #20
 8000846:	f001 f8a5 	bl	8001994 <u8g2_DrawStr>

	u8g2_DrawBox(&u8g2, 60, 30, 10, 20);
 800084a:	f107 0008 	add.w	r0, r7, #8
 800084e:	2314      	movs	r3, #20
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	230a      	movs	r3, #10
 8000854:	221e      	movs	r2, #30
 8000856:	213c      	movs	r1, #60	; 0x3c
 8000858:	f000 fac6 	bl	8000de8 <u8g2_DrawBox>

	u8g2_DrawPixel(&u8g2, 40, 40);
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2228      	movs	r2, #40	; 0x28
 8000862:	2128      	movs	r1, #40	; 0x28
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fa8b 	bl	8001d80 <u8g2_DrawPixel>

	icone.x = 30;
 800086a:	231e      	movs	r3, #30
 800086c:	703b      	strb	r3, [r7, #0]
	icone.y = 10;
 800086e:	230a      	movs	r3, #10
 8000870:	707b      	strb	r3, [r7, #1]
	icone.motif = image1;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <main+0x13c>)
 8000874:	607b      	str	r3, [r7, #4]
	u8g2_DrawBitmap(&u8g2, icone.x, icone.y, NB_OCTETS_PAR_LIGNE, NB_LIGNE,
 8000876:	783b      	ldrb	r3, [r7, #0]
 8000878:	b299      	uxth	r1, r3
 800087a:	787b      	ldrb	r3, [r7, #1]
 800087c:	b29a      	uxth	r2, r3
			icone.motif);
 800087e:	687b      	ldr	r3, [r7, #4]
	u8g2_DrawBitmap(&u8g2, icone.x, icone.y, NB_OCTETS_PAR_LIGNE, NB_LIGNE,
 8000880:	f107 0008 	add.w	r0, r7, #8
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	2305      	movs	r3, #5
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2302      	movs	r3, #2
 800088c:	f000 fa6c 	bl	8000d68 <u8g2_DrawBitmap>

	u8g2_SendBuffer(&u8g2);  // IMPORTANT
 8000890:	f107 0308 	add.w	r3, r7, #8
 8000894:	4618      	mov	r0, r3
 8000896:	f000 fb50 	bl	8000f3a <u8g2_SendBuffer>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800089a:	e7fe      	b.n	800089a <main+0x11e>
 800089c:	0800768c 	.word	0x0800768c
 80008a0:	08002ab5 	.word	0x08002ab5
 80008a4:	08002b85 	.word	0x08002b85
 80008a8:	08007c50 	.word	0x08007c50
 80008ac:	08007694 	.word	0x08007694
 80008b0:	08007700 	.word	0x08007700
 80008b4:	080076ac 	.word	0x080076ac
 80008b8:	20000000 	.word	0x20000000

080008bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b096      	sub	sp, #88	; 0x58
 80008c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2244      	movs	r2, #68	; 0x44
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f005 fec6 	bl	800665c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80008de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008e2:	f003 f9e1 	bl	8003ca8 <HAL_PWREx_ControlVoltageScaling>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80008ec:	f000 f837 	bl	800095e <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f0:	2302      	movs	r3, #2
 80008f2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fa:	2310      	movs	r3, #16
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000902:	2302      	movs	r3, #2
 8000904:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000906:	2301      	movs	r3, #1
 8000908:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800090a:	230a      	movs	r3, #10
 800090c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800090e:	2307      	movs	r3, #7
 8000910:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fa18 	bl	8003d54 <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x72>
		Error_Handler();
 800092a:	f000 f818 	bl	800095e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2303      	movs	r3, #3
 8000934:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000942:	463b      	mov	r3, r7
 8000944:	2104      	movs	r1, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f003 fde0 	bl	800450c <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x9a>
		Error_Handler();
 8000952:	f000 f804 	bl	800095e <Error_Handler>
	}
}
 8000956:	bf00      	nop
 8000958:	3758      	adds	r7, #88	; 0x58
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000962:	b672      	cpsid	i
}
 8000964:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000966:	e7fe      	b.n	8000966 <Error_Handler+0x8>

08000968 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000970:	1d39      	adds	r1, r7, #4
 8000972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000976:	2201      	movs	r2, #1
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <__io_putchar+0x20>)
 800097a:	f005 f941 	bl	8005c00 <HAL_UART_Transmit>

	return ch;
 800097e:	687b      	ldr	r3, [r7, #4]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200005c4 	.word	0x200005c4

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <HAL_MspInit+0x44>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_MspInit+0x44>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6613      	str	r3, [r2, #96]	; 0x60
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_MspInit+0x44>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x44>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6593      	str	r3, [r2, #88]	; 0x58
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x44>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f002 fa26 	bl	8002e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM2_IRQHandler+0x10>)
 8000a2e:	f004 fca4 	bl	800537a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000f0 	.word	0x200000f0

08000a3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
  }

  return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e009      	b.n	8000a9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff69 	bl	8000968 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf1      	blt.n	8000a88 <_write+0x12>
  }
  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_close>:

int _close(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_isatty>:

int _isatty(int file)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f005 fd56 	bl	80065f8 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20018000 	.word	0x20018000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	200000ec 	.word	0x200000ec
 8000b80:	20000660 	.word	0x20000660

08000b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_TIM2_Init+0x98>)
 8000bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_TIM2_Init+0x98>)
 8000bd0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_TIM2_Init+0x98>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <MX_TIM2_Init+0x98>)
 8000bde:	f242 720f 	movw	r2, #9999	; 0x270f
 8000be2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_TIM2_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_TIM2_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf0:	4813      	ldr	r0, [pc, #76]	; (8000c40 <MX_TIM2_Init+0x98>)
 8000bf2:	f004 fb6b 	bl	80052cc <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000bfc:	f7ff feaf 	bl	800095e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_TIM2_Init+0x98>)
 8000c0e:	f004 fcd3 	bl	80055b8 <HAL_TIM_ConfigClockSource>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c18:	f7ff fea1 	bl	800095e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_TIM2_Init+0x98>)
 8000c2a:	f004 fef5 	bl	8005a18 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c34:	f7ff fe93 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000f0 	.word	0x200000f0

08000c44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c54:	d113      	bne.n	8000c7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_TIM_Base_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <HAL_TIM_Base_MspInit+0x44>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6593      	str	r3, [r2, #88]	; 0x58
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_TIM_Base_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	201c      	movs	r0, #28
 8000c74:	f002 f9f7 	bl	8003066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c78:	201c      	movs	r0, #28
 8000c7a:	f002 fa10 	bl	800309e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <u8g2_DrawHorizontalBitmap>:
  b		Pointer to the bitmap line.
  Only draw pixels which are set.
*/

void u8g2_DrawHorizontalBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	817b      	strh	r3, [r7, #10]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	813b      	strh	r3, [r7, #8]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8000cac:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8000cae:	7dbb      	ldrb	r3, [r7, #22]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	bf0c      	ite	eq
 8000cb4:	2301      	moveq	r3, #1
 8000cb6:	2300      	movne	r3, #0
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	757b      	strb	r3, [r7, #21]

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8000cbc:	897a      	ldrh	r2, [r7, #10]
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	893b      	ldrh	r3, [r7, #8]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	893a      	ldrh	r2, [r7, #8]
 8000ccc:	8979      	ldrh	r1, [r7, #10]
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	68f8      	ldr	r0, [r7, #12]
 8000cd4:	f001 f8d1 	bl	8001e7a <u8g2_IsIntersection>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d040      	beq.n	8000d60 <u8g2_DrawHorizontalBitmap+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 128;
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	75fb      	strb	r3, [r7, #23]
  while(len > 0)
 8000ce2:	e035      	b.n	8000d50 <u8g2_DrawHorizontalBitmap+0xc4>
  {
    if ( *b & mask ) {
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	4013      	ands	r3, r2
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00c      	beq.n	8000d0c <u8g2_DrawHorizontalBitmap+0x80>
      u8g2->draw_color = color;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	7dba      	ldrb	r2, [r7, #22]
 8000cf6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000cfa:	893a      	ldrh	r2, [r7, #8]
 8000cfc:	8979      	ldrh	r1, [r7, #10]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2301      	movs	r3, #1
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f000 ffb0 	bl	8001c6a <u8g2_DrawHVLine>
 8000d0a:	e010      	b.n	8000d2e <u8g2_DrawHorizontalBitmap+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10b      	bne.n	8000d2e <u8g2_DrawHorizontalBitmap+0xa2>
      u8g2->draw_color = ncolor;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	7d7a      	ldrb	r2, [r7, #21]
 8000d1a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8000d1e:	893a      	ldrh	r2, [r7, #8]
 8000d20:	8979      	ldrh	r1, [r7, #10]
 8000d22:	2300      	movs	r3, #0
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2301      	movs	r3, #1
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f000 ff9e 	bl	8001c6a <u8g2_DrawHVLine>
    }

    x++;
 8000d2e:	897b      	ldrh	r3, [r7, #10]
 8000d30:	3301      	adds	r3, #1
 8000d32:	817b      	strh	r3, [r7, #10]
    mask >>= 1;
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	085b      	lsrs	r3, r3, #1
 8000d38:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d104      	bne.n	8000d4a <u8g2_DrawHorizontalBitmap+0xbe>
    {
      mask = 128;
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	75fb      	strb	r3, [r7, #23]
      b++;
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	3301      	adds	r3, #1
 8000d48:	623b      	str	r3, [r7, #32]
    }
    len--;
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	80fb      	strh	r3, [r7, #6]
  while(len > 0)
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1c6      	bne.n	8000ce4 <u8g2_DrawHorizontalBitmap+0x58>
  }
  u8g2->draw_color = color;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	7dba      	ldrb	r2, [r7, #22]
 8000d5a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8000d5e:	e000      	b.n	8000d62 <u8g2_DrawHorizontalBitmap+0xd6>
    return;
 8000d60:	bf00      	nop
}
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <u8g2_DrawBitmap>:


/* u8glib compatible bitmap draw function */
void u8g2_DrawBitmap(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t cnt, u8g2_uint_t h, const uint8_t *bitmap)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	4608      	mov	r0, r1
 8000d72:	4611      	mov	r1, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	4603      	mov	r3, r0
 8000d78:	817b      	strh	r3, [r7, #10]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	813b      	strh	r3, [r7, #8]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w;
  w = cnt;
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	82fb      	strh	r3, [r7, #22]
  w *= 8;
 8000d86:	8afb      	ldrh	r3, [r7, #22]
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000d8c:	897a      	ldrh	r2, [r7, #10]
 8000d8e:	8afb      	ldrh	r3, [r7, #22]
 8000d90:	4413      	add	r3, r2
 8000d92:	b298      	uxth	r0, r3
 8000d94:	893a      	ldrh	r2, [r7, #8]
 8000d96:	8c3b      	ldrh	r3, [r7, #32]
 8000d98:	4413      	add	r3, r2
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	893a      	ldrh	r2, [r7, #8]
 8000d9e:	8979      	ldrh	r1, [r7, #10]
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	4603      	mov	r3, r0
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f001 f868 	bl	8001e7a <u8g2_IsIntersection>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d017      	beq.n	8000de0 <u8g2_DrawBitmap+0x78>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8000db0:	e012      	b.n	8000dd8 <u8g2_DrawBitmap+0x70>
  {
    u8g2_DrawHorizontalBitmap(u8g2, x, y, w, bitmap);
 8000db2:	8af8      	ldrh	r0, [r7, #22]
 8000db4:	893a      	ldrh	r2, [r7, #8]
 8000db6:	8979      	ldrh	r1, [r7, #10]
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f7ff ff64 	bl	8000c8c <u8g2_DrawHorizontalBitmap>
    bitmap += cnt;
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc8:	4413      	add	r3, r2
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8000dcc:	893b      	ldrh	r3, [r7, #8]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	813b      	strh	r3, [r7, #8]
    h--;
 8000dd2:	8c3b      	ldrh	r3, [r7, #32]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8000dd8:	8c3b      	ldrh	r3, [r7, #32]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1e9      	bne.n	8000db2 <u8g2_DrawBitmap+0x4a>
 8000dde:	e000      	b.n	8000de2 <u8g2_DrawBitmap+0x7a>
    return;
 8000de0:	bf00      	nop
  }
}
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	4608      	mov	r0, r1
 8000df2:	4611      	mov	r1, r2
 8000df4:	461a      	mov	r2, r3
 8000df6:	4603      	mov	r3, r0
 8000df8:	817b      	strh	r3, [r7, #10]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	813b      	strh	r3, [r7, #8]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000e02:	897a      	ldrh	r2, [r7, #10]
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	4413      	add	r3, r2
 8000e08:	b298      	uxth	r0, r3
 8000e0a:	893a      	ldrh	r2, [r7, #8]
 8000e0c:	8b3b      	ldrh	r3, [r7, #24]
 8000e0e:	4413      	add	r3, r2
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	893a      	ldrh	r2, [r7, #8]
 8000e14:	8979      	ldrh	r1, [r7, #10]
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	4603      	mov	r3, r0
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f001 f82d 	bl	8001e7a <u8g2_IsIntersection>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d012      	beq.n	8000e4c <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000e26:	e00d      	b.n	8000e44 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	893a      	ldrh	r2, [r7, #8]
 8000e2c:	8979      	ldrh	r1, [r7, #10]
 8000e2e:	2000      	movs	r0, #0
 8000e30:	9000      	str	r0, [sp, #0]
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f000 ff19 	bl	8001c6a <u8g2_DrawHVLine>
    y++;    
 8000e38:	893b      	ldrh	r3, [r7, #8]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	813b      	strh	r3, [r7, #8]
    h--;
 8000e3e:	8b3b      	ldrh	r3, [r7, #24]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8000e44:	8b3b      	ldrh	r3, [r7, #24]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d1ee      	bne.n	8000e28 <u8g2_DrawBox+0x40>
 8000e4a:	e000      	b.n	8000e4e <u8g2_DrawBox+0x66>
    return;
 8000e4c:	bf00      	nop
  }
}
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	7c1b      	ldrb	r3, [r3, #16]
 8000e62:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	fb02 f303 	mul.w	r3, r2, r3
 8000e72:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 fbea 	bl	800665c <memset>
}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	7c1b      	ldrb	r3, [r3, #16]
 8000ea6:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb0:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	89ba      	ldrh	r2, [r7, #12]
 8000eb8:	fb12 f303 	smulbb	r3, r2, r3
 8000ebc:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000ebe:	89bb      	ldrh	r3, [r7, #12]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000ec4:	89bb      	ldrh	r3, [r7, #12]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	4413      	add	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000ecc:	7bf9      	ldrb	r1, [r7, #15]
 8000ece:	78ba      	ldrb	r2, [r7, #2]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f001 fd1c 	bl	8002916 <u8x8_DrawTile>
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ef8:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f00:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	7c5b      	ldrb	r3, [r3, #17]
 8000f08:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000f0a:	7bba      	ldrb	r2, [r7, #14]
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffbd 	bl	8000e90 <u8g2_send_tile_row>
    src_row++;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000f1c:	7bbb      	ldrb	r3, [r7, #14]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	7b7b      	ldrb	r3, [r7, #13]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d203      	bcs.n	8000f32 <u8g2_send_buffer+0x4c>
 8000f2a:	7bba      	ldrb	r2, [r7, #14]
 8000f2c:	7b3b      	ldrb	r3, [r7, #12]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3eb      	bcc.n	8000f0a <u8g2_send_buffer+0x24>
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffcf 	bl	8000ee6 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f001 fd35 	bl	80029b8 <u8x8_RefreshDisplay>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2208      	movs	r2, #8
 8000f64:	701a      	strb	r2, [r3, #0]
  return buf;
 8000f66:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <u8g2_m_16_8_f+0x1c>)
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	2000013c 	.word	0x2000013c

08000f78 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 8000f8e:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f001 fd71 	bl	8002a78 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8000f96:	f107 0313 	add.w	r3, r7, #19
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ffdc 	bl	8000f58 <u8g2_m_16_8_f>
 8000fa0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000fa2:	7cfa      	ldrb	r2, [r7, #19]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8000faa:	6979      	ldr	r1, [r7, #20]
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f001 f84e 	bl	800204e <u8g2_SetupBuffer>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	080025b5 	.word	0x080025b5
 8000fc0:	08002811 	.word	0x08002811
 8000fc4:	08001ed1 	.word	0x08001ed1

08000fc8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	81fb      	strh	r3, [r7, #14]
    font++;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3301      	adds	r3, #1
 800100a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b29a      	uxth	r2, r3
 8001018:	89fb      	ldrh	r3, [r7, #14]
 800101a:	4413      	add	r3, r2
 800101c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800101e:	89fb      	ldrh	r3, [r7, #14]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001036:	2100      	movs	r1, #0
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f7ff ffc5 	bl	8000fc8 <u8g2_font_get_byte>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001046:	2101      	movs	r1, #1
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f7ff ffbd 	bl	8000fc8 <u8g2_font_get_byte>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001056:	2102      	movs	r1, #2
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f7ff ffb5 	bl	8000fc8 <u8g2_font_get_byte>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001066:	2103      	movs	r1, #3
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f7ff ffad 	bl	8000fc8 <u8g2_font_get_byte>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001076:	2104      	movs	r1, #4
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f7ff ffa5 	bl	8000fc8 <u8g2_font_get_byte>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001086:	2105      	movs	r1, #5
 8001088:	6838      	ldr	r0, [r7, #0]
 800108a:	f7ff ff9d 	bl	8000fc8 <u8g2_font_get_byte>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001096:	2106      	movs	r1, #6
 8001098:	6838      	ldr	r0, [r7, #0]
 800109a:	f7ff ff95 	bl	8000fc8 <u8g2_font_get_byte>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80010a6:	2107      	movs	r1, #7
 80010a8:	6838      	ldr	r0, [r7, #0]
 80010aa:	f7ff ff8d 	bl	8000fc8 <u8g2_font_get_byte>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80010b6:	2108      	movs	r1, #8
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f7ff ff85 	bl	8000fc8 <u8g2_font_get_byte>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80010c6:	2109      	movs	r1, #9
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f7ff ff7d 	bl	8000fc8 <u8g2_font_get_byte>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b25a      	sxtb	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80010d6:	210a      	movs	r1, #10
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f7ff ff75 	bl	8000fc8 <u8g2_font_get_byte>
 80010de:	4603      	mov	r3, r0
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80010e6:	210b      	movs	r1, #11
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f7ff ff6d 	bl	8000fc8 <u8g2_font_get_byte>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b25a      	sxtb	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80010f6:	210c      	movs	r1, #12
 80010f8:	6838      	ldr	r0, [r7, #0]
 80010fa:	f7ff ff65 	bl	8000fc8 <u8g2_font_get_byte>
 80010fe:	4603      	mov	r3, r0
 8001100:	b25a      	sxtb	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001106:	210d      	movs	r1, #13
 8001108:	6838      	ldr	r0, [r7, #0]
 800110a:	f7ff ff5d 	bl	8000fc8 <u8g2_font_get_byte>
 800110e:	4603      	mov	r3, r0
 8001110:	b25a      	sxtb	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001116:	210e      	movs	r1, #14
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f7ff ff55 	bl	8000fc8 <u8g2_font_get_byte>
 800111e:	4603      	mov	r3, r0
 8001120:	b25a      	sxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001126:	210f      	movs	r1, #15
 8001128:	6838      	ldr	r0, [r7, #0]
 800112a:	f7ff ff4d 	bl	8000fc8 <u8g2_font_get_byte>
 800112e:	4603      	mov	r3, r0
 8001130:	b25a      	sxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001136:	2110      	movs	r1, #16
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f7ff ff45 	bl	8000fc8 <u8g2_font_get_byte>
 800113e:	4603      	mov	r3, r0
 8001140:	b25a      	sxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001146:	2111      	movs	r1, #17
 8001148:	6838      	ldr	r0, [r7, #0]
 800114a:	f7ff ff4f 	bl	8000fec <u8g2_font_get_word>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001156:	2113      	movs	r1, #19
 8001158:	6838      	ldr	r0, [r7, #0]
 800115a:	f7ff ff47 	bl	8000fec <u8g2_font_get_word>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001166:	2115      	movs	r1, #21
 8001168:	6838      	ldr	r0, [r7, #0]
 800116a:	f7ff ff3f 	bl	8000fec <u8g2_font_get_word>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	82da      	strh	r2, [r3, #22]
#endif
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	fa42 f303 	asr.w	r3, r2, r3
 80011a0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
 80011a4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80011a6:	7bba      	ldrb	r2, [r7, #14]
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	4413      	add	r3, r2
 80011ac:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	2b07      	cmp	r3, #7
 80011b2:	d91a      	bls.n	80011ea <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80011b4:	2308      	movs	r3, #8
 80011b6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80011b8:	7b3a      	ldrb	r2, [r7, #12]
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	7b3b      	ldrb	r3, [r7, #12]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4313      	orrs	r3, r2
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	3b08      	subs	r3, #8
 80011e8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	4013      	ands	r3, r2
 80011fe:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7bba      	ldrb	r2, [r7, #14]
 8001204:	731a      	strb	r2, [r3, #12]
  return val;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	4619      	mov	r1, r3
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffaa 	bl	800117e <u8g2_font_decode_get_unsigned_bits>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800122e:	2301      	movs	r3, #1
 8001230:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001232:	78fb      	ldrb	r3, [r7, #3]
 8001234:	3b01      	subs	r3, #1
 8001236:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001238:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	73fb      	strb	r3, [r7, #15]
  return v;
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800125a:	b490      	push	{r4, r7}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4604      	mov	r4, r0
 8001262:	4608      	mov	r0, r1
 8001264:	4611      	mov	r1, r2
 8001266:	461a      	mov	r2, r3
 8001268:	4623      	mov	r3, r4
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4603      	mov	r3, r0
 800126e:	717b      	strb	r3, [r7, #5]
 8001270:	460b      	mov	r3, r1
 8001272:	713b      	strb	r3, [r7, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d014      	beq.n	80012a8 <u8g2_add_vector_y+0x4e>
 800127e:	2b02      	cmp	r3, #2
 8001280:	dc19      	bgt.n	80012b6 <u8g2_add_vector_y+0x5c>
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <u8g2_add_vector_y+0x32>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d007      	beq.n	800129a <u8g2_add_vector_y+0x40>
 800128a:	e014      	b.n	80012b6 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800128c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001290:	b29a      	uxth	r2, r3
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	4413      	add	r3, r2
 8001296:	80fb      	strh	r3, [r7, #6]
      break;
 8001298:	e014      	b.n	80012c4 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800129a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	4413      	add	r3, r2
 80012a4:	80fb      	strh	r3, [r7, #6]
      break;
 80012a6:	e00d      	b.n	80012c4 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80012a8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	88fa      	ldrh	r2, [r7, #6]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	80fb      	strh	r3, [r7, #6]
      break;
 80012b4:	e006      	b.n	80012c4 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80012b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	88fa      	ldrh	r2, [r7, #6]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	80fb      	strh	r3, [r7, #6]
      break;      
 80012c2:	bf00      	nop
  }
  return dy;
 80012c4:	88fb      	ldrh	r3, [r7, #6]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc90      	pop	{r4, r7}
 80012ce:	4770      	bx	lr

080012d0 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80012d0:	b490      	push	{r4, r7}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4604      	mov	r4, r0
 80012d8:	4608      	mov	r0, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	4623      	mov	r3, r4
 80012e0:	80fb      	strh	r3, [r7, #6]
 80012e2:	4603      	mov	r3, r0
 80012e4:	717b      	strb	r3, [r7, #5]
 80012e6:	460b      	mov	r3, r1
 80012e8:	713b      	strb	r3, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d014      	beq.n	800131e <u8g2_add_vector_x+0x4e>
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	dc19      	bgt.n	800132c <u8g2_add_vector_x+0x5c>
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <u8g2_add_vector_x+0x32>
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d007      	beq.n	8001310 <u8g2_add_vector_x+0x40>
 8001300:	e014      	b.n	800132c <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001302:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001306:	b29a      	uxth	r2, r3
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4413      	add	r3, r2
 800130c:	80fb      	strh	r3, [r7, #6]
      break;
 800130e:	e014      	b.n	800133a <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001310:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001314:	b29b      	uxth	r3, r3
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	80fb      	strh	r3, [r7, #6]
      break;
 800131c:	e00d      	b.n	800133a <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800131e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001322:	b29b      	uxth	r3, r3
 8001324:	88fa      	ldrh	r2, [r7, #6]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	80fb      	strh	r3, [r7, #6]
      break;
 800132a:	e006      	b.n	800133a <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800132c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001330:	b29a      	uxth	r2, r3
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	4413      	add	r3, r2
 8001336:	80fb      	strh	r3, [r7, #6]
      break;      
 8001338:	bf00      	nop
  }
  return dx;
 800133a:	88fb      	ldrh	r3, [r7, #6]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bc90      	pop	{r4, r7}
 8001344:	4770      	bx	lr

08001346 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b088      	sub	sp, #32
 800134a:	af02      	add	r7, sp, #8
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	70fb      	strb	r3, [r7, #3]
 8001352:	4613      	mov	r3, r2
 8001354:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3360      	adds	r3, #96	; 0x60
 800135a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001366:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800136e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001376:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	7d7b      	ldrb	r3, [r7, #21]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001384:	7dfa      	ldrb	r2, [r7, #23]
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	429a      	cmp	r2, r3
 800138a:	d201      	bcs.n	8001390 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	889b      	ldrh	r3, [r3, #4]
 8001394:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	88db      	ldrh	r3, [r3, #6]
 800139a:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800139c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80013a0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	7c1b      	ldrb	r3, [r3, #16]
 80013a8:	89b8      	ldrh	r0, [r7, #12]
 80013aa:	f7ff ff91 	bl	80012d0 <u8g2_add_vector_x>
 80013ae:	4603      	mov	r3, r0
 80013b0:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80013b2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80013b6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	7c1b      	ldrb	r3, [r3, #16]
 80013be:	8978      	ldrh	r0, [r7, #10]
 80013c0:	f7ff ff4b 	bl	800125a <u8g2_add_vector_y>
 80013c4:	4603      	mov	r3, r0
 80013c6:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80013c8:	78bb      	ldrb	r3, [r7, #2]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d010      	beq.n	80013f0 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	7b9a      	ldrb	r2, [r3, #14]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80013d8:	7dbb      	ldrb	r3, [r7, #22]
 80013da:	b298      	uxth	r0, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	7c1b      	ldrb	r3, [r3, #16]
 80013e0:	897a      	ldrh	r2, [r7, #10]
 80013e2:	89b9      	ldrh	r1, [r7, #12]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	4603      	mov	r3, r0
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 fc3e 	bl	8001c6a <u8g2_DrawHVLine>
 80013ee:	e013      	b.n	8001418 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	7b5b      	ldrb	r3, [r3, #13]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10f      	bne.n	8001418 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	7bda      	ldrb	r2, [r3, #15]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001402:	7dbb      	ldrb	r3, [r7, #22]
 8001404:	b298      	uxth	r0, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	7c1b      	ldrb	r3, [r3, #16]
 800140a:	897a      	ldrh	r2, [r7, #10]
 800140c:	89b9      	ldrh	r1, [r7, #12]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4603      	mov	r3, r0
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fc29 	bl	8001c6a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001418:	7dfa      	ldrb	r2, [r7, #23]
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	429a      	cmp	r2, r3
 800141e:	d309      	bcc.n	8001434 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001420:	7dfa      	ldrb	r2, [r7, #23]
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	757b      	strb	r3, [r7, #21]
    ly++;
 800142c:	7d3b      	ldrb	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001432:	e79d      	b.n	8001370 <u8g2_font_decode_len+0x2a>
      break;
 8001434:	bf00      	nop
  }
  lx += cnt;
 8001436:	7d7a      	ldrb	r2, [r7, #21]
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	4413      	add	r3, r2
 800143c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800143e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8001446:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	725a      	strb	r2, [r3, #9]
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3360      	adds	r3, #96	; 0x60
 8001464:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001478:	4619      	mov	r1, r3
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7ff fe7f 	bl	800117e <u8g2_font_decode_get_unsigned_bits>
 8001480:	4603      	mov	r3, r0
 8001482:	b25a      	sxtb	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800148e:	4619      	mov	r1, r3
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff fe74 	bl	800117e <u8g2_font_decode_get_unsigned_bits>
 8001496:	4603      	mov	r3, r0
 8001498:	b25a      	sxtb	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	7b9b      	ldrb	r3, [r3, #14]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf0c      	ite	eq
 80014b0:	2301      	moveq	r3, #1
 80014b2:	2300      	movne	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	73da      	strb	r2, [r3, #15]
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3360      	adds	r3, #96	; 0x60
 80014d2:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80014d4:	6839      	ldr	r1, [r7, #0]
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffbd 	bl	8001456 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80014e2:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80014ea:	4619      	mov	r1, r3
 80014ec:	6978      	ldr	r0, [r7, #20]
 80014ee:	f7ff fe91 	bl	8001214 <u8g2_font_decode_get_signed_bits>
 80014f2:	4603      	mov	r3, r0
 80014f4:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80014fc:	4619      	mov	r1, r3
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff fe88 	bl	8001214 <u8g2_font_decode_get_signed_bits>
 8001504:	4603      	mov	r3, r0
 8001506:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800150e:	4619      	mov	r1, r3
 8001510:	6978      	ldr	r0, [r7, #20]
 8001512:	f7ff fe7f 	bl	8001214 <u8g2_font_decode_get_signed_bits>
 8001516:	4603      	mov	r3, r0
 8001518:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f340 80d7 	ble.w	80016d4 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	8898      	ldrh	r0, [r3, #4]
 800152a:	7cfa      	ldrb	r2, [r7, #19]
 800152c:	7c7b      	ldrb	r3, [r7, #17]
 800152e:	4413      	add	r3, r2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	425b      	negs	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	b25a      	sxtb	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	7c1b      	ldrb	r3, [r3, #16]
 800153c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001540:	f7ff fec6 	bl	80012d0 <u8g2_add_vector_x>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	88d8      	ldrh	r0, [r3, #6]
 8001550:	7cfa      	ldrb	r2, [r7, #19]
 8001552:	7c7b      	ldrb	r3, [r7, #17]
 8001554:	4413      	add	r3, r2
 8001556:	b2db      	uxtb	r3, r3
 8001558:	425b      	negs	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	b25a      	sxtb	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	7c1b      	ldrb	r3, [r3, #16]
 8001562:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001566:	f7ff fe78 	bl	800125a <u8g2_add_vector_y>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	889b      	ldrh	r3, [r3, #4]
 8001576:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	88db      	ldrh	r3, [r3, #6]
 800157c:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 800157e:	8bfb      	ldrh	r3, [r7, #30]
 8001580:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001582:	8b7b      	ldrh	r3, [r7, #26]
 8001584:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	7c1b      	ldrb	r3, [r3, #16]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d85a      	bhi.n	8001644 <u8g2_font_decode_glyph+0x180>
 800158e:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <u8g2_font_decode_glyph+0xd0>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	080015a5 	.word	0x080015a5
 8001598:	080015c1 	.word	0x080015c1
 800159c:	080015e9 	.word	0x080015e9
 80015a0:	0800161d 	.word	0x0800161d
      {
	case 0:
	    x1 += decode->glyph_width;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	8bbb      	ldrh	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80015b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	8b3b      	ldrh	r3, [r7, #24]
 80015ba:	4413      	add	r3, r2
 80015bc:	833b      	strh	r3, [r7, #24]
	    break;
 80015be:	e041      	b.n	8001644 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80015c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	8bfa      	ldrh	r2, [r7, #30]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80015cc:	8bfb      	ldrh	r3, [r7, #30]
 80015ce:	3301      	adds	r3, #1
 80015d0:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80015d2:	8bbb      	ldrh	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	8b3b      	ldrh	r3, [r7, #24]
 80015e2:	4413      	add	r3, r2
 80015e4:	833b      	strh	r3, [r7, #24]
	    break;
 80015e6:	e02d      	b.n	8001644 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	8bfa      	ldrh	r2, [r7, #30]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80015f6:	8bfb      	ldrh	r3, [r7, #30]
 80015f8:	3301      	adds	r3, #1
 80015fa:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80015fc:	8bbb      	ldrh	r3, [r7, #28]
 80015fe:	3301      	adds	r3, #1
 8001600:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001602:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001606:	b29b      	uxth	r3, r3
 8001608:	8b7a      	ldrh	r2, [r7, #26]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800160e:	8b7b      	ldrh	r3, [r7, #26]
 8001610:	3301      	adds	r3, #1
 8001612:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001614:	8b3b      	ldrh	r3, [r7, #24]
 8001616:	3301      	adds	r3, #1
 8001618:	833b      	strh	r3, [r7, #24]
	    break;	  
 800161a:	e013      	b.n	8001644 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800161c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001620:	b29a      	uxth	r2, r3
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800162e:	b29b      	uxth	r3, r3
 8001630:	8b7a      	ldrh	r2, [r7, #26]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001636:	8b7b      	ldrh	r3, [r7, #26]
 8001638:	3301      	adds	r3, #1
 800163a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800163c:	8b3b      	ldrh	r3, [r7, #24]
 800163e:	3301      	adds	r3, #1
 8001640:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001642:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001644:	8bb8      	ldrh	r0, [r7, #28]
 8001646:	8b7a      	ldrh	r2, [r7, #26]
 8001648:	8bf9      	ldrh	r1, [r7, #30]
 800164a:	8b3b      	ldrh	r3, [r7, #24]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4603      	mov	r3, r0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fc12 	bl	8001e7a <u8g2_IsIntersection>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <u8g2_font_decode_glyph+0x19e>
	return d;
 800165c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001660:	e03a      	b.n	80016d8 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2200      	movs	r2, #0
 8001666:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2200      	movs	r2, #0
 800166c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001674:	4619      	mov	r1, r3
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff fd81 	bl	800117e <u8g2_font_decode_get_unsigned_bits>
 800167c:	4603      	mov	r3, r0
 800167e:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001686:	4619      	mov	r1, r3
 8001688:	6978      	ldr	r0, [r7, #20]
 800168a:	f7ff fd78 	bl	800117e <u8g2_font_decode_get_unsigned_bits>
 800168e:	4603      	mov	r3, r0
 8001690:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	2200      	movs	r2, #0
 8001696:	4619      	mov	r1, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fe54 	bl	8001346 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800169e:	7bbb      	ldrb	r3, [r7, #14]
 80016a0:	2201      	movs	r2, #1
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fe4e 	bl	8001346 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80016aa:	2101      	movs	r1, #1
 80016ac:	6978      	ldr	r0, [r7, #20]
 80016ae:	f7ff fd66 	bl	800117e <u8g2_font_decode_get_unsigned_bits>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ec      	bne.n	8001692 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80016be:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dd00      	ble.n	80016c8 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80016c6:	e7d2      	b.n	800166e <u8g2_font_decode_glyph+0x1aa>
	break;
 80016c8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	7b9a      	ldrb	r2, [r3, #14]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 80016d4:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3317      	adds	r3, #23
 80016f6:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	2bff      	cmp	r3, #255	; 0xff
 80016fc:	d82a      	bhi.n	8001754 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	2b60      	cmp	r3, #96	; 0x60
 8001702:	d907      	bls.n	8001714 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800170a:	461a      	mov	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	4413      	add	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e009      	b.n	8001728 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	2b40      	cmp	r3, #64	; 0x40
 8001718:	d906      	bls.n	8001728 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001720:	461a      	mov	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	4413      	add	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d04e      	beq.n	80017d0 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	887a      	ldrh	r2, [r7, #2]
 800173a:	429a      	cmp	r2, r3
 800173c:	d102      	bne.n	8001744 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3302      	adds	r3, #2
 8001742:	e049      	b.n	80017d8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	4413      	add	r3, r2
 8001750:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001752:	e7e9      	b.n	8001728 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800175a:	461a      	mov	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	4413      	add	r3, r2
 8001760:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001766:	2100      	movs	r1, #0
 8001768:	6938      	ldr	r0, [r7, #16]
 800176a:	f7ff fc3f 	bl	8000fec <u8g2_font_get_word>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	4413      	add	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001778:	2102      	movs	r1, #2
 800177a:	6938      	ldr	r0, [r7, #16]
 800177c:	f7ff fc36 	bl	8000fec <u8g2_font_get_word>
 8001780:	4603      	mov	r3, r0
 8001782:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	3304      	adds	r3, #4
 8001788:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800178a:	89fa      	ldrh	r2, [r7, #14]
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	429a      	cmp	r2, r3
 8001790:	d3e9      	bcc.n	8001766 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001798:	89fb      	ldrh	r3, [r7, #14]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	89fb      	ldrh	r3, [r7, #14]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80017ac:	89fb      	ldrh	r3, [r7, #14]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d010      	beq.n	80017d4 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80017b2:	89fa      	ldrh	r2, [r7, #14]
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d102      	bne.n	80017c0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3303      	adds	r3, #3
 80017be:	e00b      	b.n	80017d8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3302      	adds	r3, #2
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	4413      	add	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80017ce:	e7e0      	b.n	8001792 <u8g2_font_get_glyph_data+0xb2>
	break;
 80017d0:	bf00      	nop
 80017d2:	e000      	b.n	80017d6 <u8g2_font_get_glyph_data+0xf6>
	break;
 80017d4:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	4608      	mov	r0, r1
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	817b      	strh	r3, [r7, #10]
 80017f2:	460b      	mov	r3, r1
 80017f4:	813b      	strh	r3, [r7, #8]
 80017f6:	4613      	mov	r3, r2
 80017f8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	897a      	ldrh	r2, [r7, #10]
 8001802:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	893a      	ldrh	r2, [r7, #8]
 800180a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	4619      	mov	r1, r3
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff ff64 	bl	80016e0 <u8g2_font_get_glyph_data>
 8001818:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001820:	6939      	ldr	r1, [r7, #16]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff fe4e 	bl	80014c4 <u8g2_font_decode_glyph>
 8001828:	4603      	mov	r3, r0
 800182a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800182c:	8afb      	ldrh	r3, [r7, #22]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4603      	mov	r3, r0
 8001848:	817b      	strh	r3, [r7, #10]
 800184a:	460b      	mov	r3, r1
 800184c:	813b      	strh	r3, [r7, #8]
 800184e:	4613      	mov	r3, r2
 8001850:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001858:	2b03      	cmp	r3, #3
 800185a:	d833      	bhi.n	80018c4 <u8g2_DrawGlyph+0x8c>
 800185c:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <u8g2_DrawGlyph+0x2c>)
 800185e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001862:	bf00      	nop
 8001864:	08001875 	.word	0x08001875
 8001868:	08001889 	.word	0x08001889
 800186c:	0800189d 	.word	0x0800189d
 8001870:	080018b1 	.word	0x080018b1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	4798      	blx	r3
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	893b      	ldrh	r3, [r7, #8]
 8001882:	4413      	add	r3, r2
 8001884:	813b      	strh	r3, [r7, #8]
      break;
 8001886:	e01d      	b.n	80018c4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	4798      	blx	r3
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	897b      	ldrh	r3, [r7, #10]
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	817b      	strh	r3, [r7, #10]
      break;
 800189a:	e013      	b.n	80018c4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	4798      	blx	r3
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	893b      	ldrh	r3, [r7, #8]
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	813b      	strh	r3, [r7, #8]
      break;
 80018ae:	e009      	b.n	80018c4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	4798      	blx	r3
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	897b      	ldrh	r3, [r7, #10]
 80018be:	4413      	add	r3, r2
 80018c0:	817b      	strh	r3, [r7, #10]
      break;
 80018c2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	893a      	ldrh	r2, [r7, #8]
 80018c8:	8979      	ldrh	r1, [r7, #10]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f7ff ff88 	bl	80017e0 <u8g2_font_draw_glyph>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop

080018dc <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	817b      	strh	r3, [r7, #10]
 80018ea:	4613      	mov	r3, r2
 80018ec:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 fd32 	bl	8002358 <u8x8_utf8_init>
  sum = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	7812      	ldrb	r2, [r2, #0]
 8001900:	4611      	mov	r1, r2
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	4798      	blx	r3
 8001906:	4603      	mov	r3, r0
 8001908:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800190a:	8abb      	ldrh	r3, [r7, #20]
 800190c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001910:	4293      	cmp	r3, r2
 8001912:	d038      	beq.n	8001986 <u8g2_draw_string+0xaa>
      break;
    str++;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3301      	adds	r3, #1
 8001918:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800191a:	8abb      	ldrh	r3, [r7, #20]
 800191c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001920:	4293      	cmp	r3, r2
 8001922:	d0e9      	beq.n	80018f8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001924:	8abb      	ldrh	r3, [r7, #20]
 8001926:	893a      	ldrh	r2, [r7, #8]
 8001928:	8979      	ldrh	r1, [r7, #10]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff ff84 	bl	8001838 <u8g2_DrawGlyph>
 8001930:	4603      	mov	r3, r0
 8001932:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800193a:	2b03      	cmp	r3, #3
 800193c:	d81e      	bhi.n	800197c <u8g2_draw_string+0xa0>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <u8g2_draw_string+0x68>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001955 	.word	0x08001955
 8001948:	0800195f 	.word	0x0800195f
 800194c:	08001969 	.word	0x08001969
 8001950:	08001973 	.word	0x08001973
      {
	case 0:
	  x += delta;
 8001954:	897a      	ldrh	r2, [r7, #10]
 8001956:	8a7b      	ldrh	r3, [r7, #18]
 8001958:	4413      	add	r3, r2
 800195a:	817b      	strh	r3, [r7, #10]
	  break;
 800195c:	e00e      	b.n	800197c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800195e:	893a      	ldrh	r2, [r7, #8]
 8001960:	8a7b      	ldrh	r3, [r7, #18]
 8001962:	4413      	add	r3, r2
 8001964:	813b      	strh	r3, [r7, #8]
	  break;
 8001966:	e009      	b.n	800197c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001968:	897a      	ldrh	r2, [r7, #10]
 800196a:	8a7b      	ldrh	r3, [r7, #18]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	817b      	strh	r3, [r7, #10]
	  break;
 8001970:	e004      	b.n	800197c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001972:	893a      	ldrh	r2, [r7, #8]
 8001974:	8a7b      	ldrh	r3, [r7, #18]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	813b      	strh	r3, [r7, #8]
	  break;
 800197a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 800197c:	8afa      	ldrh	r2, [r7, #22]
 800197e:	8a7b      	ldrh	r3, [r7, #18]
 8001980:	4413      	add	r3, r2
 8001982:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001984:	e7b8      	b.n	80018f8 <u8g2_draw_string+0x1c>
      break;
 8001986:	bf00      	nop
    }
  }
  return sum;
 8001988:	8afb      	ldrh	r3, [r7, #22]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop

08001994 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	817b      	strh	r3, [r7, #10]
 80019a2:	4613      	mov	r3, r2
 80019a4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <u8g2_DrawStr+0x30>)
 80019aa:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80019ac:	893a      	ldrh	r2, [r7, #8]
 80019ae:	8979      	ldrh	r1, [r7, #10]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f7ff ff92 	bl	80018dc <u8g2_draw_string>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	08002375 	.word	0x08002375

080019c8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d05d      	beq.n	8001a94 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d04d      	beq.n	8001a96 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d11c      	bne.n	8001a3e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8001a10:	429a      	cmp	r2, r3
 8001a12:	da05      	bge.n	8001a20 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dd32      	ble.n	8001a96 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001a3c:	e02b      	b.n	8001a96 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001a44:	461a      	mov	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001a54:	440b      	add	r3, r1
 8001a56:	429a      	cmp	r2, r3
 8001a58:	da0d      	bge.n	8001a76 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	b25a      	sxtb	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001a82:	429a      	cmp	r2, r3
 8001a84:	dd07      	ble.n	8001a96 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001a92:	e000      	b.n	8001a96 <u8g2_UpdateRefHeight+0xce>
    return;
 8001a94:	bf00      	nop
  }  
}
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <u8g2_SetFontRefHeightExtendedText>:
  u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_TEXT;
  u8g2_UpdateRefHeight(u8g2);
}

void u8g2_SetFontRefHeightExtendedText(u8g2_t *u8g2)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_XTEXT;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2_UpdateRefHeight(u8g2);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff89 	bl	80019c8 <u8g2_UpdateRefHeight>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  return 0;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <u8g2_SetFontPosBaseline+0x1c>)
 8001ae0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	08001abf 	.word	0x08001abf

08001af4 <u8g2_font_calc_vref_top>:
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  u8g2_uint_t tmp;
  /* reference pos is one pixel above the upper edge of the reference glyph */
  tmp = (u8g2_uint_t)(u8g2->font_ref_ascent);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001b02:	81fb      	strh	r3, [r7, #14]
  tmp++;
 8001b04:	89fb      	ldrh	r3, [r7, #14]
 8001b06:	3301      	adds	r3, #1
 8001b08:	81fb      	strh	r3, [r7, #14]
  return tmp;
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <u8g2_SetFontPosTop+0x1c>)
 8001b24:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	08001af5 	.word	0x08001af5

08001b38 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d00b      	beq.n	8001b64 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3374      	adds	r3, #116	; 0x74
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fa67 	bl	800102c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ff32 	bl	80019c8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	78fa      	ldrb	r2, [r7, #3]
 8001b7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	4611      	mov	r1, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	80fb      	strh	r3, [r7, #6]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001ba8:	8afb      	ldrh	r3, [r7, #22]
 8001baa:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	8abb      	ldrh	r3, [r7, #20]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001bb6:	8afa      	ldrh	r2, [r7, #22]
 8001bb8:	8abb      	ldrh	r3, [r7, #20]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d90b      	bls.n	8001bd6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001bbe:	8afa      	ldrh	r2, [r7, #22]
 8001bc0:	88bb      	ldrh	r3, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d205      	bcs.n	8001bd2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001bc6:	88bb      	ldrh	r3, [r7, #4]
 8001bc8:	82bb      	strh	r3, [r7, #20]
      b--;
 8001bca:	8abb      	ldrh	r3, [r7, #20]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	82bb      	strh	r3, [r7, #20]
 8001bd0:	e001      	b.n	8001bd6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001bd6:	8afa      	ldrh	r2, [r7, #22]
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d301      	bcc.n	8001be2 <u8g2_clip_intersection2+0x56>
    return 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e01c      	b.n	8001c1c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001be2:	8aba      	ldrh	r2, [r7, #20]
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d801      	bhi.n	8001bee <u8g2_clip_intersection2+0x62>
    return 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e016      	b.n	8001c1c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001bee:	8afa      	ldrh	r2, [r7, #22]
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d201      	bcs.n	8001bfa <u8g2_clip_intersection2+0x6e>
    a = c;
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001bfa:	8aba      	ldrh	r2, [r7, #20]
 8001bfc:	88bb      	ldrh	r3, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d901      	bls.n	8001c06 <u8g2_clip_intersection2+0x7a>
    b = d;
 8001c02:	88bb      	ldrh	r3, [r7, #4]
 8001c04:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8afa      	ldrh	r2, [r7, #22]
 8001c0a:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001c0c:	8aba      	ldrh	r2, [r7, #20]
 8001c0e:	8afb      	ldrh	r3, [r7, #22]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	8aba      	ldrh	r2, [r7, #20]
 8001c18:	801a      	strh	r2, [r3, #0]
  return 1;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	4608      	mov	r0, r1
 8001c32:	4611      	mov	r1, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	817b      	strh	r3, [r7, #10]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	813b      	strh	r3, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c46:	893a      	ldrh	r2, [r7, #8]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001c50:	88f8      	ldrh	r0, [r7, #6]
 8001c52:	893a      	ldrh	r2, [r7, #8]
 8001c54:	8979      	ldrh	r1, [r7, #10]
 8001c56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	47a0      	blx	r4
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd90      	pop	{r4, r7, pc}

08001c6a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001c6a:	b590      	push	{r4, r7, lr}
 8001c6c:	b087      	sub	sp, #28
 8001c6e:	af02      	add	r7, sp, #8
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	4608      	mov	r0, r1
 8001c74:	4611      	mov	r1, r2
 8001c76:	461a      	mov	r2, r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	817b      	strh	r3, [r7, #10]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	813b      	strh	r3, [r7, #8]
 8001c80:	4613      	mov	r3, r2
 8001c82:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d075      	beq.n	8001d7a <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d072      	beq.n	8001d7a <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d91a      	bls.n	8001cd0 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001c9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d109      	bne.n	8001cb6 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001ca2:	897a      	ldrh	r2, [r7, #10]
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	817b      	strh	r3, [r7, #10]
	  x++;
 8001cac:	897b      	ldrh	r3, [r7, #10]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	817b      	strh	r3, [r7, #10]
 8001cb4:	e00c      	b.n	8001cd0 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001cb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d108      	bne.n	8001cd0 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001cbe:	893a      	ldrh	r2, [r7, #8]
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	813b      	strh	r3, [r7, #8]
	  y++;
 8001cc8:	893b      	ldrh	r3, [r7, #8]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001cd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001cdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d11a      	bne.n	8001d1a <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001cea:	893b      	ldrh	r3, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d83b      	bhi.n	8001d68 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001cf6:	893b      	ldrh	r3, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d937      	bls.n	8001d6c <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001d08:	1db9      	adds	r1, r7, #6
 8001d0a:	f107 000a 	add.w	r0, r7, #10
 8001d0e:	f7ff ff3d 	bl	8001b8c <u8g2_clip_intersection2>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d11a      	bne.n	8001d4e <u8g2_DrawHVLine+0xe4>
	  return;
 8001d18:	e02f      	b.n	8001d7a <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001d20:	897b      	ldrh	r3, [r7, #10]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d824      	bhi.n	8001d70 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001d2c:	897b      	ldrh	r3, [r7, #10]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d920      	bls.n	8001d74 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001d3e:	1db9      	adds	r1, r7, #6
 8001d40:	f107 0008 	add.w	r0, r7, #8
 8001d44:	f7ff ff22 	bl	8001b8c <u8g2_clip_intersection2>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d014      	beq.n	8001d78 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	689c      	ldr	r4, [r3, #8]
 8001d54:	8979      	ldrh	r1, [r7, #10]
 8001d56:	893a      	ldrh	r2, [r7, #8]
 8001d58:	88f8      	ldrh	r0, [r7, #6]
 8001d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	4603      	mov	r3, r0
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	47a0      	blx	r4
 8001d66:	e008      	b.n	8001d7a <u8g2_DrawHVLine+0x110>
	  return;
 8001d68:	bf00      	nop
 8001d6a:	e006      	b.n	8001d7a <u8g2_DrawHVLine+0x110>
	  return;
 8001d6c:	bf00      	nop
 8001d6e:	e004      	b.n	8001d7a <u8g2_DrawHVLine+0x110>
	  return;
 8001d70:	bf00      	nop
 8001d72:	e002      	b.n	8001d7a <u8g2_DrawHVLine+0x110>
	  return;
 8001d74:	bf00      	nop
 8001d76:	e000      	b.n	8001d7a <u8g2_DrawHVLine+0x110>
	  return;
 8001d78:	bf00      	nop
    }
}
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}

08001d80 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001d96:	883a      	ldrh	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d31a      	bcc.n	8001dd2 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001da2:	883a      	ldrh	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d216      	bcs.n	8001dd6 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d312      	bcc.n	8001dda <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d20e      	bcs.n	8001dde <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001dc0:	883a      	ldrh	r2, [r7, #0]
 8001dc2:	8879      	ldrh	r1, [r7, #2]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ff4d 	bl	8001c6a <u8g2_DrawHVLine>
 8001dd0:	e006      	b.n	8001de0 <u8g2_DrawPixel+0x60>
    return;
 8001dd2:	bf00      	nop
 8001dd4:	e004      	b.n	8001de0 <u8g2_DrawPixel+0x60>
    return;
 8001dd6:	bf00      	nop
 8001dd8:	e002      	b.n	8001de0 <u8g2_DrawPixel+0x60>
    return;
 8001dda:	bf00      	nop
 8001ddc:	e000      	b.n	8001de0 <u8g2_DrawPixel+0x60>
    return;
 8001dde:	bf00      	nop
}
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d903      	bls.n	8001e08 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001e14:	b490      	push	{r4, r7}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	4611      	mov	r1, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	80fb      	strh	r3, [r7, #6]
 8001e26:	4603      	mov	r3, r0
 8001e28:	80bb      	strh	r3, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	807b      	strh	r3, [r7, #2]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	88bb      	ldrh	r3, [r7, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d20d      	bcs.n	8001e56 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001e3a:	883a      	ldrh	r2, [r7, #0]
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d901      	bls.n	8001e46 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e014      	b.n	8001e70 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	883b      	ldrh	r3, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d901      	bls.n	8001e52 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00e      	b.n	8001e70 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e00c      	b.n	8001e70 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001e56:	883a      	ldrh	r2, [r7, #0]
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d907      	bls.n	8001e6e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001e5e:	887a      	ldrh	r2, [r7, #2]
 8001e60:	883b      	ldrh	r3, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d901      	bls.n	8001e6a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e002      	b.n	8001e70 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001e6e:	2300      	movs	r3, #0
    }
  }
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc90      	pop	{r4, r7}
 8001e78:	4770      	bx	lr

08001e7a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	4608      	mov	r0, r1
 8001e84:	4611      	mov	r1, r2
 8001e86:	461a      	mov	r2, r3
 8001e88:	4603      	mov	r3, r0
 8001e8a:	817b      	strh	r3, [r7, #10]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	813b      	strh	r3, [r7, #8]
 8001e90:	4613      	mov	r3, r2
 8001e92:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8001ea0:	8b3b      	ldrh	r3, [r7, #24]
 8001ea2:	893a      	ldrh	r2, [r7, #8]
 8001ea4:	f7ff ffb6 	bl	8001e14 <u8g2_is_intersection_decision_tree>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <u8g2_IsIntersection+0x38>
    return 0; 
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e00a      	b.n	8001ec8 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	897a      	ldrh	r2, [r7, #10]
 8001ec2:	f7ff ffa7 	bl	8001e14 <u8g2_is_intersection_decision_tree>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	817b      	strh	r3, [r7, #10]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	813b      	strh	r3, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001eea:	893b      	ldrh	r3, [r7, #8]
 8001eec:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001eee:	7efb      	ldrb	r3, [r7, #27]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001efa:	7e3a      	ldrb	r2, [r7, #24]
 8001efc:	7efb      	ldrb	r3, [r7, #27]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d801      	bhi.n	8001f1a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001f16:	7e3b      	ldrb	r3, [r7, #24]
 8001f18:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d001      	beq.n	8001f28 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001f24:	7e3b      	ldrb	r3, [r7, #24]
 8001f26:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001f28:	893b      	ldrh	r3, [r7, #8]
 8001f2a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001f2c:	8afb      	ldrh	r3, [r7, #22]
 8001f2e:	f023 0307 	bic.w	r3, r3, #7
 8001f32:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	7c1b      	ldrb	r3, [r3, #16]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	8afa      	ldrh	r2, [r7, #22]
 8001f3e:	fb12 f303 	smulbb	r3, r2, r3
 8001f42:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f48:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001f4a:	8afb      	ldrh	r3, [r7, #22]
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001f52:	897b      	ldrh	r3, [r7, #10]
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	4413      	add	r3, r2
 8001f58:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001f5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d117      	bne.n	8001f92 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	7ebb      	ldrb	r3, [r7, #26]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	7e7b      	ldrb	r3, [r7, #25]
 8001f76:	4053      	eors	r3, r2
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
	len--;
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e8      	bne.n	8001f62 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001f90:	e038      	b.n	8002004 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	7ebb      	ldrb	r3, [r7, #26]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	7e7b      	ldrb	r3, [r7, #25]
 8001fa6:	4053      	eors	r3, r2
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001fae:	7efb      	ldrb	r3, [r7, #27]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8001fb4:	7efb      	ldrb	r3, [r7, #27]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	76fb      	strb	r3, [r7, #27]
      len--;
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8001fc2:	7efb      	ldrb	r3, [r7, #27]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d114      	bne.n	8001ff2 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001fcc:	461a      	mov	r2, r3
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d801      	bhi.n	8001fe2 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d008      	beq.n	8001ffe <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	767b      	strb	r3, [r7, #25]
 8001ff0:	e005      	b.n	8001ffe <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8001ff2:	7ebb      	ldrb	r3, [r7, #26]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001ff8:	7e7b      	ldrb	r3, [r7, #25]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1c6      	bne.n	8001f92 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002004:	bf00      	nop
 8002006:	3724      	adds	r7, #36	; 0x24
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002038:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	79fa      	ldrb	r2, [r7, #7]
 8002074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff ffa9 	bl	8002010 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f7ff fd08 	bl	8001ad4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020e8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80020ea:	89fb      	ldrh	r3, [r7, #14]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	89fa      	ldrh	r2, [r7, #14]
 80020f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	7c1b      	ldrb	r3, [r3, #16]
 80020fa:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80020fc:	89fb      	ldrh	r3, [r7, #14]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	89fa      	ldrh	r2, [r7, #14]
 8002106:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800210e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002110:	89fb      	ldrh	r3, [r7, #14]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	89fa      	ldrh	r2, [r7, #14]
 800211a:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002122:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002124:	89fb      	ldrh	r3, [r7, #14]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800212c:	4413      	add	r3, r2
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	7c52      	ldrb	r2, [r2, #17]
 8002132:	4293      	cmp	r3, r2
 8002134:	dd08      	ble.n	8002148 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	7c5b      	ldrb	r3, [r3, #17]
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002142:	b29b      	uxth	r3, r3
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002148:	89fb      	ldrh	r3, [r7, #14]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800216a:	89fb      	ldrh	r3, [r7, #14]
 800216c:	4413      	add	r3, r2
 800216e:	b29a      	uxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	8a9a      	ldrh	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	8ada      	ldrh	r2, [r3, #22]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af02      	add	r7, sp, #8
 800219c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	4603      	mov	r3, r0
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fe5d 	bl	8001e7a <u8g2_IsIntersection>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d104      	bne.n	80021d0 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80021ce:	e03b      	b.n	8002248 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d205      	bcs.n	80021f4 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002200:	429a      	cmp	r2, r3
 8002202:	d905      	bls.n	8002210 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800221c:	429a      	cmp	r2, r3
 800221e:	d205      	bcs.n	800222c <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002238:	429a      	cmp	r2, r3
 800223a:	d905      	bls.n	8002248 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff ff3b 	bl	80020d4 <u8g2_update_dimension_common>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002296:	429a      	cmp	r2, r3
 8002298:	d30a      	bcc.n	80022b0 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	b29a      	uxth	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ff65 	bl	8002196 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	4608      	mov	r0, r1
 80022de:	4611      	mov	r1, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	817b      	strh	r3, [r7, #10]
 80022e6:	460b      	mov	r3, r1
 80022e8:	813b      	strh	r3, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022f4:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 80022f6:	8aba      	ldrh	r2, [r7, #20]
 80022f8:	893b      	ldrh	r3, [r7, #8]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002304:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8002306:	8afa      	ldrh	r2, [r7, #22]
 8002308:	897b      	ldrh	r3, [r7, #10]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 800230e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8002316:	8abb      	ldrh	r3, [r7, #20]
 8002318:	3b01      	subs	r3, #1
 800231a:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 800231c:	8afa      	ldrh	r2, [r7, #22]
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	82fb      	strh	r3, [r7, #22]
 8002324:	e00a      	b.n	800233c <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8002326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d106      	bne.n	800233c <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 800232e:	8afb      	ldrh	r3, [r7, #22]
 8002330:	3b01      	subs	r3, #1
 8002332:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8002334:	8aba      	ldrh	r2, [r7, #20]
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 800233c:	88f8      	ldrh	r0, [r7, #6]
 800233e:	8aba      	ldrh	r2, [r7, #20]
 8002340:	8af9      	ldrh	r1, [r7, #22]
 8002342:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4603      	mov	r3, r0
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f7ff fc6c 	bl	8001c28 <u8g2_draw_hv_line_2dir>
}
 8002350:	bf00      	nop
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <u8x8_ascii_next+0x18>
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	2b0a      	cmp	r3, #10
 800238a:	d102      	bne.n	8002392 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800238c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002390:	e001      	b.n	8002396 <u8x8_ascii_next+0x22>
  return b;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	b29b      	uxth	r3, r3
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80023a2:	b590      	push	{r4, r7, lr}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	460b      	mov	r3, r1
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	691c      	ldr	r4, [r3, #16]
 80023b4:	7afa      	ldrb	r2, [r7, #11]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2117      	movs	r1, #23
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	47a0      	blx	r4
 80023be:	4603      	mov	r3, r0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd90      	pop	{r4, r7, pc}

080023c8 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80023d4:	1cfb      	adds	r3, r7, #3
 80023d6:	461a      	mov	r2, r3
 80023d8:	2101      	movs	r1, #1
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffe1 	bl	80023a2 <u8x8_byte_SendBytes>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80023ea:	b590      	push	{r4, r7, lr}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691c      	ldr	r4, [r3, #16]
 80023f6:	2300      	movs	r3, #0
 80023f8:	2200      	movs	r2, #0
 80023fa:	2118      	movs	r1, #24
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	47a0      	blx	r4
 8002400:	4603      	mov	r3, r0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}

0800240a <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800240a:	b590      	push	{r4, r7, lr}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691c      	ldr	r4, [r3, #16]
 8002416:	2300      	movs	r3, #0
 8002418:	2200      	movs	r2, #0
 800241a:	2119      	movs	r1, #25
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	47a0      	blx	r4
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bd90      	pop	{r4, r7, pc}

0800242a <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800242a:	b590      	push	{r4, r7, lr}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68dc      	ldr	r4, [r3, #12]
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	2300      	movs	r3, #0
 800243e:	2115      	movs	r1, #21
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	47a0      	blx	r4
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}

0800244e <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 800244e:	b590      	push	{r4, r7, lr}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	460b      	mov	r3, r1
 8002458:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68dc      	ldr	r4, [r3, #12]
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	2300      	movs	r3, #0
 8002462:	2116      	movs	r1, #22
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	47a0      	blx	r4
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bd90      	pop	{r4, r7, pc}

08002472 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002472:	b590      	push	{r4, r7, lr}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	460b      	mov	r3, r1
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	68dc      	ldr	r4, [r3, #12]
 8002484:	7afa      	ldrb	r2, [r7, #11]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2117      	movs	r1, #23
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	47a0      	blx	r4
 800248e:	4603      	mov	r3, r0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	bd90      	pop	{r4, r7, pc}

08002498 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68dc      	ldr	r4, [r3, #12]
 80024a4:	2300      	movs	r3, #0
 80024a6:	2200      	movs	r2, #0
 80024a8:	2118      	movs	r1, #24
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	47a0      	blx	r4
 80024ae:	4603      	mov	r3, r0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd90      	pop	{r4, r7, pc}

080024b8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68dc      	ldr	r4, [r3, #12]
 80024c4:	2300      	movs	r3, #0
 80024c6:	2200      	movs	r2, #0
 80024c8:	2119      	movs	r1, #25
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	47a0      	blx	r4
 80024ce:	4603      	mov	r3, r0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}

080024d8 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	73fb      	strb	r3, [r7, #15]
    data++;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2bfe      	cmp	r3, #254	; 0xfe
 80024f2:	d031      	beq.n	8002558 <u8x8_cad_SendSequence+0x80>
 80024f4:	2bfe      	cmp	r3, #254	; 0xfe
 80024f6:	dc3d      	bgt.n	8002574 <u8x8_cad_SendSequence+0x9c>
 80024f8:	2b19      	cmp	r3, #25
 80024fa:	dc3b      	bgt.n	8002574 <u8x8_cad_SendSequence+0x9c>
 80024fc:	2b18      	cmp	r3, #24
 80024fe:	da23      	bge.n	8002548 <u8x8_cad_SendSequence+0x70>
 8002500:	2b16      	cmp	r3, #22
 8002502:	dc02      	bgt.n	800250a <u8x8_cad_SendSequence+0x32>
 8002504:	2b15      	cmp	r3, #21
 8002506:	da03      	bge.n	8002510 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002508:	e034      	b.n	8002574 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800250a:	2b17      	cmp	r3, #23
 800250c:	d00e      	beq.n	800252c <u8x8_cad_SendSequence+0x54>
	return;
 800250e:	e031      	b.n	8002574 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68dc      	ldr	r4, [r3, #12]
 800251a:	7bba      	ldrb	r2, [r7, #14]
 800251c:	7bf9      	ldrb	r1, [r7, #15]
 800251e:	2300      	movs	r3, #0
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	47a0      	blx	r4
	  data++;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	603b      	str	r3, [r7, #0]
	  break;
 800252a:	e022      	b.n	8002572 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002532:	f107 030e 	add.w	r3, r7, #14
 8002536:	461a      	mov	r2, r3
 8002538:	2101      	movs	r1, #1
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff99 	bl	8002472 <u8x8_cad_SendData>
	  data++;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	603b      	str	r3, [r7, #0]
	  break;
 8002546:	e014      	b.n	8002572 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68dc      	ldr	r4, [r3, #12]
 800254c:	7bf9      	ldrb	r1, [r7, #15]
 800254e:	2300      	movs	r3, #0
 8002550:	2200      	movs	r2, #0
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	47a0      	blx	r4
	  break;
 8002556:	e00c      	b.n	8002572 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800255e:	7bbb      	ldrb	r3, [r7, #14]
 8002560:	461a      	mov	r2, r3
 8002562:	2129      	movs	r1, #41	; 0x29
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fa36 	bl	80029d6 <u8x8_gpio_call>
	  data++;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	603b      	str	r3, [r7, #0]
	  break;
 8002570:	bf00      	nop
    cmd = *data;
 8002572:	e7b6      	b.n	80024e2 <u8x8_cad_SendSequence+0xa>
	return;
 8002574:	bf00      	nop
    }
  }
}
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bd90      	pop	{r4, r7, pc}

0800257c <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	460b      	mov	r3, r1
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f7ff ff2d 	bl	80023ea <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002590:	2140      	movs	r1, #64	; 0x40
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7ff ff18 	bl	80023c8 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691c      	ldr	r4, [r3, #16]
 800259c:	7afa      	ldrb	r2, [r7, #11]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2117      	movs	r1, #23
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f7ff ff2f 	bl	800240a <u8x8_byte_EndTransfer>
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd90      	pop	{r4, r7, pc}

080025b4 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	72fb      	strb	r3, [r7, #11]
 80025c2:	4613      	mov	r3, r2
 80025c4:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80025c6:	7afb      	ldrb	r3, [r7, #11]
 80025c8:	3b14      	subs	r3, #20
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d86e      	bhi.n	80026ac <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 80025ce:	a201      	add	r2, pc, #4	; (adr r2, 80025d4 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 80025d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d4:	0800266b 	.word	0x0800266b
 80025d8:	080025ed 	.word	0x080025ed
 80025dc:	0800261b 	.word	0x0800261b
 80025e0:	08002627 	.word	0x08002627
 80025e4:	0800268f 	.word	0x0800268f
 80025e8:	08002697 	.word	0x08002697
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 80025ec:	4b33      	ldr	r3, [pc, #204]	; (80026bc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff ff08 	bl	800240a <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff fef5 	bl	80023ea <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002600:	2100      	movs	r1, #0
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff fee0 	bl	80023c8 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002608:	7abb      	ldrb	r3, [r7, #10]
 800260a:	4619      	mov	r1, r3
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f7ff fedb 	bl	80023c8 <u8x8_byte_SendByte>
      in_transfer = 1;
 8002612:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8002618:	e04a      	b.n	80026b0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800261a:	7abb      	ldrb	r3, [r7, #10]
 800261c:	4619      	mov	r1, r3
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff fed2 	bl	80023c8 <u8x8_byte_SendByte>
      break;      
 8002624:	e044      	b.n	80026b0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8002626:	4b25      	ldr	r3, [pc, #148]	; (80026bc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff feeb 	bl	800240a <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002638:	e00a      	b.n	8002650 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	2118      	movs	r1, #24
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff ff9c 	bl	800257c <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002644:	7abb      	ldrb	r3, [r7, #10]
 8002646:	3b18      	subs	r3, #24
 8002648:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3318      	adds	r3, #24
 800264e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002650:	7abb      	ldrb	r3, [r7, #10]
 8002652:	2b18      	cmp	r3, #24
 8002654:	d8f1      	bhi.n	800263a <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002656:	7abb      	ldrb	r3, [r7, #10]
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	4619      	mov	r1, r3
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7ff ff8d 	bl	800257c <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
      break;
 8002668:	e022      	b.n	80026b0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002670:	2bff      	cmp	r3, #255	; 0xff
 8002672:	d103      	bne.n	800267c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2278      	movs	r2, #120	; 0x78
 8002678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691c      	ldr	r4, [r3, #16]
 8002680:	7aba      	ldrb	r2, [r7, #10]
 8002682:	7af9      	ldrb	r1, [r7, #11]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	47a0      	blx	r4
 800268a:	4603      	mov	r3, r0
 800268c:	e011      	b.n	80026b2 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
      break;
 8002694:	e00c      	b.n	80026b0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff feb3 	bl	800240a <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
      break;
 80026aa:	e001      	b.n	80026b0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000053c 	.word	0x2000053c

080026c0 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	72fb      	strb	r3, [r7, #11]
 80026ce:	4613      	mov	r3, r2
 80026d0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	3b0b      	subs	r3, #11
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	f200 808a 	bhi.w	80027f0 <u8x8_d_ssd1306_sh1106_generic+0x130>
 80026dc:	a201      	add	r2, pc, #4	; (adr r2, 80026e4 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80026de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e2:	bf00      	nop
 80026e4:	080026f9 	.word	0x080026f9
 80026e8:	080027f1 	.word	0x080027f1
 80026ec:	08002713 	.word	0x08002713
 80026f0:	08002745 	.word	0x08002745
 80026f4:	08002765 	.word	0x08002765
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80026f8:	7abb      	ldrb	r3, [r7, #10]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d104      	bne.n	8002708 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80026fe:	4940      	ldr	r1, [pc, #256]	; (8002800 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fee9 	bl	80024d8 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8002706:	e075      	b.n	80027f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002708:	493e      	ldr	r1, [pc, #248]	; (8002804 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff fee4 	bl	80024d8 <u8x8_cad_SendSequence>
      break;
 8002710:	e070      	b.n	80027f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002712:	7abb      	ldrb	r3, [r7, #10]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10a      	bne.n	800272e <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002718:	493b      	ldr	r1, [pc, #236]	; (8002808 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f7ff fedc 	bl	80024d8 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	7c9a      	ldrb	r2, [r3, #18]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800272c:	e062      	b.n	80027f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800272e:	4937      	ldr	r1, [pc, #220]	; (800280c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff fed1 	bl	80024d8 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	7cda      	ldrb	r2, [r3, #19]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002742:	e057      	b.n	80027f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff fea7 	bl	8002498 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800274a:	2181      	movs	r1, #129	; 0x81
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff fe6c 	bl	800242a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8002752:	7abb      	ldrb	r3, [r7, #10]
 8002754:	4619      	mov	r1, r3
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fe79 	bl	800244e <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff feab 	bl	80024b8 <u8x8_cad_EndTransfer>
      break;
 8002762:	e047      	b.n	80027f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff fe97 	bl	8002498 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	795b      	ldrb	r3, [r3, #5]
 800276e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002770:	7dfb      	ldrb	r3, [r7, #23]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	4413      	add	r3, r2
 8002780:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002782:	2140      	movs	r1, #64	; 0x40
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff fe50 	bl	800242a <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800278a:	7dfb      	ldrb	r3, [r7, #23]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f043 0310 	orr.w	r3, r3, #16
 8002794:	b2db      	uxtb	r3, r3
 8002796:	4619      	mov	r1, r3
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff fe46 	bl	800242a <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4619      	mov	r1, r3
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff fe50 	bl	800244e <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	799b      	ldrb	r3, [r3, #6]
 80027b2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff fe47 	bl	800244e <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	791b      	ldrb	r3, [r3, #4]
 80027c4:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80027cc:	7dbb      	ldrb	r3, [r7, #22]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4619      	mov	r1, r3
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fe4b 	bl	8002472 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80027dc:	7abb      	ldrb	r3, [r7, #10]
 80027de:	3b01      	subs	r3, #1
 80027e0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80027e2:	7abb      	ldrb	r3, [r7, #10]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1eb      	bne.n	80027c0 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f7ff fe65 	bl	80024b8 <u8x8_cad_EndTransfer>
      break;
 80027ee:	e001      	b.n	80027f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80027f4:	2301      	movs	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	08007c94 	.word	0x08007c94
 8002804:	08007c9c 	.word	0x08007c9c
 8002808:	08007ca4 	.word	0x08007ca4
 800280c:	08007cac 	.word	0x08007cac

08002810 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	72fb      	strb	r3, [r7, #11]
 800281e:	4613      	mov	r3, r2
 8002820:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002822:	7aba      	ldrb	r2, [r7, #10]
 8002824:	7af9      	ldrb	r1, [r7, #11]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f7ff ff49 	bl	80026c0 <u8x8_d_ssd1306_sh1106_generic>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8002834:	2301      	movs	r3, #1
 8002836:	e014      	b.n	8002862 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8002838:	7afb      	ldrb	r3, [r7, #11]
 800283a:	2b09      	cmp	r3, #9
 800283c:	d009      	beq.n	8002852 <u8x8_d_ssd1306_128x64_noname+0x42>
 800283e:	2b0a      	cmp	r3, #10
 8002840:	d10c      	bne.n	800285c <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f82a 	bl	800289c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8002848:	4908      	ldr	r1, [pc, #32]	; (800286c <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f7ff fe44 	bl	80024d8 <u8x8_cad_SendSequence>
      break;
 8002850:	e006      	b.n	8002860 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8002852:	4907      	ldr	r1, [pc, #28]	; (8002870 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f80d 	bl	8002874 <u8x8_d_helper_display_setup_memory>
      break;
 800285a:	e001      	b.n	8002860 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800285c:	2300      	movs	r3, #0
 800285e:	e000      	b.n	8002862 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8002860:	2301      	movs	r3, #1
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	08007c5c 	.word	0x08007c5c
 8002870:	08007cb4 	.word	0x08007cb4

08002874 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	7c9a      	ldrb	r2, [r3, #18]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695c      	ldr	r4, [r3, #20]
 80028a8:	2300      	movs	r3, #0
 80028aa:	2200      	movs	r2, #0
 80028ac:	2128      	movs	r1, #40	; 0x28
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68dc      	ldr	r4, [r3, #12]
 80028b6:	2300      	movs	r3, #0
 80028b8:	2200      	movs	r2, #0
 80028ba:	2114      	movs	r1, #20
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80028c0:	2201      	movs	r2, #1
 80028c2:	214b      	movs	r1, #75	; 0x4b
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f886 	bl	80029d6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	791b      	ldrb	r3, [r3, #4]
 80028d0:	461a      	mov	r2, r3
 80028d2:	2129      	movs	r1, #41	; 0x29
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f87e 	bl	80029d6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	214b      	movs	r1, #75	; 0x4b
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f879 	bl	80029d6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	791b      	ldrb	r3, [r3, #4]
 80028ea:	461a      	mov	r2, r3
 80028ec:	2129      	movs	r1, #41	; 0x29
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f871 	bl	80029d6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80028f4:	2201      	movs	r2, #1
 80028f6:	214b      	movs	r1, #75	; 0x4b
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f86c 	bl	80029d6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	795b      	ldrb	r3, [r3, #5]
 8002904:	461a      	mov	r2, r3
 8002906:	2129      	movs	r1, #41	; 0x29
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f864 	bl	80029d6 <u8x8_gpio_call>
}    
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bd90      	pop	{r4, r7, pc}

08002916 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002916:	b590      	push	{r4, r7, lr}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	4608      	mov	r0, r1
 8002920:	4611      	mov	r1, r2
 8002922:	461a      	mov	r2, r3
 8002924:	4603      	mov	r3, r0
 8002926:	70fb      	strb	r3, [r7, #3]
 8002928:	460b      	mov	r3, r1
 800292a:	70bb      	strb	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002934:	78bb      	ldrb	r3, [r7, #2]
 8002936:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002938:	787b      	ldrb	r3, [r7, #1]
 800293a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689c      	ldr	r4, [r3, #8]
 8002944:	f107 0308 	add.w	r3, r7, #8
 8002948:	2201      	movs	r2, #1
 800294a:	210f      	movs	r1, #15
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	47a0      	blx	r4
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}

0800295a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800295a:	b590      	push	{r4, r7, lr}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689c      	ldr	r4, [r3, #8]
 8002966:	2300      	movs	r3, #0
 8002968:	2200      	movs	r2, #0
 800296a:	2109      	movs	r1, #9
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	47a0      	blx	r4
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bd90      	pop	{r4, r7, pc}

08002978 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689c      	ldr	r4, [r3, #8]
 8002984:	2300      	movs	r3, #0
 8002986:	2200      	movs	r2, #0
 8002988:	210a      	movs	r1, #10
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}

08002996 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002996:	b590      	push	{r4, r7, lr}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689c      	ldr	r4, [r3, #8]
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	2300      	movs	r3, #0
 80029aa:	210b      	movs	r1, #11
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	47a0      	blx	r4
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd90      	pop	{r4, r7, pc}

080029b8 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689c      	ldr	r4, [r3, #8]
 80029c4:	2300      	movs	r3, #0
 80029c6:	2200      	movs	r2, #0
 80029c8:	2110      	movs	r1, #16
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	47a0      	blx	r4
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}

080029d6 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80029d6:	b590      	push	{r4, r7, lr}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	70fb      	strb	r3, [r7, #3]
 80029e2:	4613      	mov	r3, r2
 80029e4:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695c      	ldr	r4, [r3, #20]
 80029ea:	78ba      	ldrb	r2, [r7, #2]
 80029ec:	78f9      	ldrb	r1, [r7, #3]
 80029ee:	2300      	movs	r3, #0
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	47a0      	blx	r4
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd90      	pop	{r4, r7, pc}

080029fc <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	72fb      	strb	r3, [r7, #11]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <u8x8_SetupDefaults+0x58>)
 8002a2e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <u8x8_SetupDefaults+0x58>)
 8002a34:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <u8x8_SetupDefaults+0x58>)
 8002a3a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <u8x8_SetupDefaults+0x58>)
 8002a40:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	22ff      	movs	r2, #255	; 0xff
 8002a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	22ff      	movs	r2, #255	; 0xff
 8002a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	080029fd 	.word	0x080029fd

08002a78 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff ffc8 	bl	8002a1c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff ff58 	bl	800295a <u8x8_SetupMemory>
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <u8x8_stm32_gpio_and_delay_cb>:
#include "u8g2.h"
#include "stm32l4xx_hal.h"
#include "u8x8_stm32_HAL.h"

uint8_t u8x8_stm32_gpio_and_delay_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	72fb      	strb	r3, [r7, #11]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	72bb      	strb	r3, [r7, #10]
  switch(msg)							// there is no need for any delay
 8002ac6:	7afb      	ldrb	r3, [r7, #11]
 8002ac8:	3b28      	subs	r3, #40	; 0x28
 8002aca:	2b27      	cmp	r3, #39	; 0x27
 8002acc:	d852      	bhi.n	8002b74 <u8x8_stm32_gpio_and_delay_cb+0xc0>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <u8x8_stm32_gpio_and_delay_cb+0x20>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b75 	.word	0x08002b75
 8002ad8:	08002b75 	.word	0x08002b75
 8002adc:	08002b75 	.word	0x08002b75
 8002ae0:	08002b75 	.word	0x08002b75
 8002ae4:	08002b75 	.word	0x08002b75
 8002ae8:	08002b75 	.word	0x08002b75
 8002aec:	08002b75 	.word	0x08002b75
 8002af0:	08002b75 	.word	0x08002b75
 8002af4:	08002b75 	.word	0x08002b75
 8002af8:	08002b75 	.word	0x08002b75
 8002afc:	08002b75 	.word	0x08002b75
 8002b00:	08002b75 	.word	0x08002b75
 8002b04:	08002b75 	.word	0x08002b75
 8002b08:	08002b75 	.word	0x08002b75
 8002b0c:	08002b75 	.word	0x08002b75
 8002b10:	08002b75 	.word	0x08002b75
 8002b14:	08002b75 	.word	0x08002b75
 8002b18:	08002b75 	.word	0x08002b75
 8002b1c:	08002b75 	.word	0x08002b75
 8002b20:	08002b75 	.word	0x08002b75
 8002b24:	08002b75 	.word	0x08002b75
 8002b28:	08002b75 	.word	0x08002b75
 8002b2c:	08002b75 	.word	0x08002b75
 8002b30:	08002b75 	.word	0x08002b75
 8002b34:	08002b75 	.word	0x08002b75
 8002b38:	08002b75 	.word	0x08002b75
 8002b3c:	08002b75 	.word	0x08002b75
 8002b40:	08002b75 	.word	0x08002b75
 8002b44:	08002b75 	.word	0x08002b75
 8002b48:	08002b75 	.word	0x08002b75
 8002b4c:	08002b75 	.word	0x08002b75
 8002b50:	08002b75 	.word	0x08002b75
 8002b54:	08002b75 	.word	0x08002b75
 8002b58:	08002b75 	.word	0x08002b75
 8002b5c:	08002b75 	.word	0x08002b75
 8002b60:	08002b75 	.word	0x08002b75
 8002b64:	08002b75 	.word	0x08002b75
 8002b68:	08002b75 	.word	0x08002b75
 8002b6c:	08002b75 	.word	0x08002b75
 8002b70:	08002b75 	.word	0x08002b75
      break;							// arg_int=1: Input dir with pullup high for I2C clock pin
    case U8X8_MSG_GPIO_I2C_DATA:			// arg_int=0: Output low at I2C data pin
      break;							// arg_int=1: Input dir with pullup high for I2C data pin

  }
  return 1;
 8002b74:	2301      	movs	r3, #1
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop

08002b84 <u8x8_byte_hw_i2c>:
 //   default:
 //     u8x8_SetGPIOResult(u8x8, 1);	*/		// default return value


uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	72fb      	strb	r3, [r7, #11]
 8002b92:	4613      	mov	r3, r2
 8002b94:	72bb      	strb	r3, [r7, #10]
  uint8_t *ptr;
  static uint8_t buffer_count;
  static uint8_t buffer[DATA_BUFFER_SIZE+1];	//the size of buffer depends on how many pages are transfered at once
  	  	  	  	  	  	  	  	  	  	  	  	//e.g. one page are 128byte and one byte more for command

  switch(msg)
 8002b96:	7afb      	ldrb	r3, [r7, #11]
 8002b98:	3b14      	subs	r3, #20
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d847      	bhi.n	8002c2e <u8x8_byte_hw_i2c+0xaa>
 8002b9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <u8x8_byte_hw_i2c+0x20>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002c33 	.word	0x08002c33
 8002ba8:	08002c2f 	.word	0x08002c2f
 8002bac:	08002c2f 	.word	0x08002c2f
 8002bb0:	08002bd9 	.word	0x08002bd9
 8002bb4:	08002c0f 	.word	0x08002c0f
 8002bb8:	08002c17 	.word	0x08002c17
 8002bbc:	08002c2f 	.word	0x08002c2f
 8002bc0:	08002c2f 	.word	0x08002c2f
 8002bc4:	08002c2f 	.word	0x08002c2f
 8002bc8:	08002c2f 	.word	0x08002c2f
 8002bcc:	08002c2f 	.word	0x08002c2f
 8002bd0:	08002c2f 	.word	0x08002c2f
 8002bd4:	08002c33 	.word	0x08002c33
  {
    case U8X8_MSG_BYTE_SEND:					//collect
      {   ptr = arg_ptr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	617b      	str	r3, [r7, #20]
    	  for (int i=1; i <= arg_int; i++)
 8002bdc:	2301      	movs	r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	e010      	b.n	8002c04 <u8x8_byte_hw_i2c+0x80>
    	  {	  buffer[buffer_count] = *(ptr++);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	617a      	str	r2, [r7, #20]
 8002be8:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <u8x8_byte_hw_i2c+0xbc>)
 8002bea:	7812      	ldrb	r2, [r2, #0]
 8002bec:	7819      	ldrb	r1, [r3, #0]
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <u8x8_byte_hw_i2c+0xc0>)
 8002bf0:	5499      	strb	r1, [r3, r2]
    		  buffer_count++;
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <u8x8_byte_hw_i2c+0xbc>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <u8x8_byte_hw_i2c+0xbc>)
 8002bfc:	701a      	strb	r2, [r3, #0]
    	  for (int i=1; i <= arg_int; i++)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	3301      	adds	r3, #1
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	7abb      	ldrb	r3, [r7, #10]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	ddea      	ble.n	8002be2 <u8x8_byte_hw_i2c+0x5e>
    	  }
      }
      break;
 8002c0c:	e012      	b.n	8002c34 <u8x8_byte_hw_i2c+0xb0>
    case U8X8_MSG_BYTE_INIT:
      break;
    case U8X8_MSG_BYTE_SET_DC:
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
    	buffer_count = 0;						// start
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <u8x8_byte_hw_i2c+0xbc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
      break;
 8002c14:	e00e      	b.n	8002c34 <u8x8_byte_hw_i2c+0xb0>
    case U8X8_MSG_BYTE_END_TRANSFER:			// send all at once
    	 HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t *)buffer, buffer_count, I2C_TIMEOUT);
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <u8x8_byte_hw_i2c+0xbc>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c20:	9200      	str	r2, [sp, #0]
 8002c22:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <u8x8_byte_hw_i2c+0xc0>)
 8002c24:	2178      	movs	r1, #120	; 0x78
 8002c26:	4808      	ldr	r0, [pc, #32]	; (8002c48 <u8x8_byte_hw_i2c+0xc4>)
 8002c28:	f000 fca6 	bl	8003578 <HAL_I2C_Master_Transmit>
      break;
 8002c2c:	e002      	b.n	8002c34 <u8x8_byte_hw_i2c+0xb0>
    default:
      return 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e001      	b.n	8002c36 <u8x8_byte_hw_i2c+0xb2>
      break;
 8002c32:	bf00      	nop
  }
  return 1;
 8002c34:	2301      	movs	r3, #1
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	2000053d 	.word	0x2000053d
 8002c44:	20000540 	.word	0x20000540
 8002c48:	20000098 	.word	0x20000098

08002c4c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c52:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <MX_USART2_UART_Init+0x5c>)
 8002c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c72:	220c      	movs	r2, #12
 8002c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_USART2_UART_Init+0x58>)
 8002c90:	f002 ff68 	bl	8005b64 <HAL_UART_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c9a:	f7fd fe60 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200005c4 	.word	0x200005c4
 8002ca8:	40004400 	.word	0x40004400

08002cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b0ac      	sub	sp, #176	; 0xb0
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	2288      	movs	r2, #136	; 0x88
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 fcc5 	bl	800665c <memset>
  if(uartHandle->Instance==USART2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <HAL_UART_MspInit+0xb0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d13b      	bne.n	8002d54 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 fe33 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002cf4:	f7fd fe33 	bl	800095e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_UART_MspInit+0xb4>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	4a18      	ldr	r2, [pc, #96]	; (8002d60 <HAL_UART_MspInit+0xb4>)
 8002cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d02:	6593      	str	r3, [r2, #88]	; 0x58
 8002d04:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <HAL_UART_MspInit+0xb4>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_UART_MspInit+0xb4>)
 8002d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d14:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <HAL_UART_MspInit+0xb4>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_UART_MspInit+0xb4>)
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d28:	230c      	movs	r3, #12
 8002d2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d40:	2307      	movs	r3, #7
 8002d42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d50:	f000 f9c0 	bl	80030d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d54:	bf00      	nop
 8002d56:	37b0      	adds	r7, #176	; 0xb0
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40004400 	.word	0x40004400
 8002d60:	40021000 	.word	0x40021000

08002d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d68:	f7fd ff0c 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d6c:	480c      	ldr	r0, [pc, #48]	; (8002da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d6e:	490d      	ldr	r1, [pc, #52]	; (8002da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d70:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <LoopForever+0xe>)
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d74:	e002      	b.n	8002d7c <LoopCopyDataInit>

08002d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7a:	3304      	adds	r3, #4

08002d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d80:	d3f9      	bcc.n	8002d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d82:	4a0a      	ldr	r2, [pc, #40]	; (8002dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d84:	4c0a      	ldr	r4, [pc, #40]	; (8002db0 <LoopForever+0x16>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d88:	e001      	b.n	8002d8e <LoopFillZerobss>

08002d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d8c:	3204      	adds	r2, #4

08002d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d90:	d3fb      	bcc.n	8002d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d92:	f003 fc37 	bl	8006604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d96:	f7fd fcf1 	bl	800077c <main>

08002d9a <LoopForever>:

LoopForever:
    b LoopForever
 8002d9a:	e7fe      	b.n	8002d9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002da8:	08007d74 	.word	0x08007d74
  ldr r2, =_sbss
 8002dac:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002db0:	2000065c 	.word	0x2000065c

08002db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002db4:	e7fe      	b.n	8002db4 <ADC1_2_IRQHandler>
	...

08002db8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <HAL_Init+0x3c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <HAL_Init+0x3c>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dce:	2003      	movs	r0, #3
 8002dd0:	f000 f93e 	bl	8003050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f000 f80f 	bl	8002df8 <HAL_InitTick>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	71fb      	strb	r3, [r7, #7]
 8002de4:	e001      	b.n	8002dea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002de6:	f7fd fdd1 	bl	800098c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dea:	79fb      	ldrb	r3, [r7, #7]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40022000 	.word	0x40022000

08002df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <HAL_InitTick+0x6c>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d023      	beq.n	8002e54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e0c:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_InitTick+0x70>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <HAL_InitTick+0x6c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f949 	bl	80030ba <HAL_SYSTICK_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10f      	bne.n	8002e4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b0f      	cmp	r3, #15
 8002e32:	d809      	bhi.n	8002e48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e34:	2200      	movs	r2, #0
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	f000 f913 	bl	8003066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e40:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <HAL_InitTick+0x74>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e007      	b.n	8002e58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	e004      	b.n	8002e58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	e001      	b.n	8002e58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000014 	.word	0x20000014
 8002e68:	2000000c 	.word	0x2000000c
 8002e6c:	20000010 	.word	0x20000010

08002e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x20>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_IncTick+0x24>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <HAL_IncTick+0x24>)
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000014 	.word	0x20000014
 8002e94:	20000648 	.word	0x20000648

08002e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_GetTick+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000648 	.word	0x20000648

08002eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f003 0307 	and.w	r3, r3, #7
 8002ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee2:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	60d3      	str	r3, [r2, #12]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <__NVIC_GetPriorityGrouping+0x18>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	f003 0307 	and.w	r3, r3, #7
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	e000ed00 	.word	0xe000ed00

08002f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	db0b      	blt.n	8002f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	4907      	ldr	r1, [pc, #28]	; (8002f4c <__NVIC_EnableIRQ+0x38>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2001      	movs	r0, #1
 8002f36:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000e100 	.word	0xe000e100

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	db0a      	blt.n	8002f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	490c      	ldr	r1, [pc, #48]	; (8002f9c <__NVIC_SetPriority+0x4c>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	0112      	lsls	r2, r2, #4
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	440b      	add	r3, r1
 8002f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f78:	e00a      	b.n	8002f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4908      	ldr	r1, [pc, #32]	; (8002fa0 <__NVIC_SetPriority+0x50>)
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	3b04      	subs	r3, #4
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	761a      	strb	r2, [r3, #24]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000e100 	.word	0xe000e100
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b089      	sub	sp, #36	; 0x24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f1c3 0307 	rsb	r3, r3, #7
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	bf28      	it	cs
 8002fc2:	2304      	movcs	r3, #4
 8002fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d902      	bls.n	8002fd4 <NVIC_EncodePriority+0x30>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3b03      	subs	r3, #3
 8002fd2:	e000      	b.n	8002fd6 <NVIC_EncodePriority+0x32>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	4313      	orrs	r3, r2
         );
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3724      	adds	r7, #36	; 0x24
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
	...

0800300c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3b01      	subs	r3, #1
 8003018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800301c:	d301      	bcc.n	8003022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301e:	2301      	movs	r3, #1
 8003020:	e00f      	b.n	8003042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003022:	4a0a      	ldr	r2, [pc, #40]	; (800304c <SysTick_Config+0x40>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302a:	210f      	movs	r1, #15
 800302c:	f04f 30ff 	mov.w	r0, #4294967295
 8003030:	f7ff ff8e 	bl	8002f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <SysTick_Config+0x40>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303a:	4b04      	ldr	r3, [pc, #16]	; (800304c <SysTick_Config+0x40>)
 800303c:	2207      	movs	r2, #7
 800303e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	e000e010 	.word	0xe000e010

08003050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff ff29 	bl	8002eb0 <__NVIC_SetPriorityGrouping>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	4603      	mov	r3, r0
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003078:	f7ff ff3e 	bl	8002ef8 <__NVIC_GetPriorityGrouping>
 800307c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68b9      	ldr	r1, [r7, #8]
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	f7ff ff8e 	bl	8002fa4 <NVIC_EncodePriority>
 8003088:	4602      	mov	r2, r0
 800308a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff5d 	bl	8002f50 <__NVIC_SetPriority>
}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	4603      	mov	r3, r0
 80030a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff31 	bl	8002f14 <__NVIC_EnableIRQ>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ffa2 	bl	800300c <SysTick_Config>
 80030c8:	4603      	mov	r3, r0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e2:	e17f      	b.n	80033e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	4013      	ands	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8171 	beq.w	80033de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d005      	beq.n	8003114 <HAL_GPIO_Init+0x40>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d130      	bne.n	8003176 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800314a:	2201      	movs	r2, #1
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4013      	ands	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	f003 0201 	and.w	r2, r3, #1
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b03      	cmp	r3, #3
 8003180:	d118      	bne.n	80031b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003188:	2201      	movs	r2, #1
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	f003 0201 	and.w	r2, r3, #1
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d017      	beq.n	80031f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d123      	bne.n	8003244 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	08da      	lsrs	r2, r3, #3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3208      	adds	r2, #8
 8003204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003208:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	220f      	movs	r2, #15
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	08da      	lsrs	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3208      	adds	r2, #8
 800323e:	6939      	ldr	r1, [r7, #16]
 8003240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2203      	movs	r2, #3
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80ac 	beq.w	80033de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003286:	4b5f      	ldr	r3, [pc, #380]	; (8003404 <HAL_GPIO_Init+0x330>)
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	4a5e      	ldr	r2, [pc, #376]	; (8003404 <HAL_GPIO_Init+0x330>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6613      	str	r3, [r2, #96]	; 0x60
 8003292:	4b5c      	ldr	r3, [pc, #368]	; (8003404 <HAL_GPIO_Init+0x330>)
 8003294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800329e:	4a5a      	ldr	r2, [pc, #360]	; (8003408 <HAL_GPIO_Init+0x334>)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	220f      	movs	r2, #15
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032c8:	d025      	beq.n	8003316 <HAL_GPIO_Init+0x242>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4f      	ldr	r2, [pc, #316]	; (800340c <HAL_GPIO_Init+0x338>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <HAL_GPIO_Init+0x23e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4e      	ldr	r2, [pc, #312]	; (8003410 <HAL_GPIO_Init+0x33c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d019      	beq.n	800330e <HAL_GPIO_Init+0x23a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4d      	ldr	r2, [pc, #308]	; (8003414 <HAL_GPIO_Init+0x340>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <HAL_GPIO_Init+0x236>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4c      	ldr	r2, [pc, #304]	; (8003418 <HAL_GPIO_Init+0x344>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_GPIO_Init+0x232>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4b      	ldr	r2, [pc, #300]	; (800341c <HAL_GPIO_Init+0x348>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <HAL_GPIO_Init+0x22e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4a      	ldr	r2, [pc, #296]	; (8003420 <HAL_GPIO_Init+0x34c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_GPIO_Init+0x22a>
 80032fa:	2306      	movs	r3, #6
 80032fc:	e00c      	b.n	8003318 <HAL_GPIO_Init+0x244>
 80032fe:	2307      	movs	r3, #7
 8003300:	e00a      	b.n	8003318 <HAL_GPIO_Init+0x244>
 8003302:	2305      	movs	r3, #5
 8003304:	e008      	b.n	8003318 <HAL_GPIO_Init+0x244>
 8003306:	2304      	movs	r3, #4
 8003308:	e006      	b.n	8003318 <HAL_GPIO_Init+0x244>
 800330a:	2303      	movs	r3, #3
 800330c:	e004      	b.n	8003318 <HAL_GPIO_Init+0x244>
 800330e:	2302      	movs	r3, #2
 8003310:	e002      	b.n	8003318 <HAL_GPIO_Init+0x244>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_GPIO_Init+0x244>
 8003316:	2300      	movs	r3, #0
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	f002 0203 	and.w	r2, r2, #3
 800331e:	0092      	lsls	r2, r2, #2
 8003320:	4093      	lsls	r3, r2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003328:	4937      	ldr	r1, [pc, #220]	; (8003408 <HAL_GPIO_Init+0x334>)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3302      	adds	r3, #2
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003336:	4b3b      	ldr	r3, [pc, #236]	; (8003424 <HAL_GPIO_Init+0x350>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800335a:	4a32      	ldr	r2, [pc, #200]	; (8003424 <HAL_GPIO_Init+0x350>)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003360:	4b30      	ldr	r3, [pc, #192]	; (8003424 <HAL_GPIO_Init+0x350>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003384:	4a27      	ldr	r2, [pc, #156]	; (8003424 <HAL_GPIO_Init+0x350>)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800338a:	4b26      	ldr	r3, [pc, #152]	; (8003424 <HAL_GPIO_Init+0x350>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033ae:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <HAL_GPIO_Init+0x350>)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_GPIO_Init+0x350>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	43db      	mvns	r3, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033d8:	4a12      	ldr	r2, [pc, #72]	; (8003424 <HAL_GPIO_Init+0x350>)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f ae78 	bne.w	80030e4 <HAL_GPIO_Init+0x10>
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40010000 	.word	0x40010000
 800340c:	48000400 	.word	0x48000400
 8003410:	48000800 	.word	0x48000800
 8003414:	48000c00 	.word	0x48000c00
 8003418:	48001000 	.word	0x48001000
 800341c:	48001400 	.word	0x48001400
 8003420:	48001800 	.word	0x48001800
 8003424:	40010400 	.word	0x40010400

08003428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	807b      	strh	r3, [r7, #2]
 8003434:	4613      	mov	r3, r2
 8003436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003438:	787b      	ldrb	r3, [r7, #1]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800343e:	887a      	ldrh	r2, [r7, #2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003444:	e002      	b.n	800344c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e081      	b.n	800356e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd f91e 	bl	80006c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	; 0x24
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d107      	bne.n	80034d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	e006      	b.n	80034e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d104      	bne.n	80034f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003504:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003514:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69d9      	ldr	r1, [r3, #28]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1a      	ldr	r2, [r3, #32]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	461a      	mov	r2, r3
 8003584:	460b      	mov	r3, r1
 8003586:	817b      	strh	r3, [r7, #10]
 8003588:	4613      	mov	r3, r2
 800358a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b20      	cmp	r3, #32
 8003596:	f040 80da 	bne.w	800374e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_I2C_Master_Transmit+0x30>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0d3      	b.n	8003750 <HAL_I2C_Master_Transmit+0x1d8>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035b0:	f7ff fc72 	bl	8002e98 <HAL_GetTick>
 80035b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2319      	movs	r3, #25
 80035bc:	2201      	movs	r2, #1
 80035be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f8f0 	bl	80037a8 <I2C_WaitOnFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e0be      	b.n	8003750 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2221      	movs	r2, #33	; 0x21
 80035d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2210      	movs	r2, #16
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	893a      	ldrh	r2, [r7, #8]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2bff      	cmp	r3, #255	; 0xff
 8003602:	d90e      	bls.n	8003622 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	22ff      	movs	r2, #255	; 0xff
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	b2da      	uxtb	r2, r3
 8003610:	8979      	ldrh	r1, [r7, #10]
 8003612:	4b51      	ldr	r3, [pc, #324]	; (8003758 <HAL_I2C_Master_Transmit+0x1e0>)
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fa6c 	bl	8003af8 <I2C_TransferConfig>
 8003620:	e06c      	b.n	80036fc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	b2da      	uxtb	r2, r3
 8003632:	8979      	ldrh	r1, [r7, #10]
 8003634:	4b48      	ldr	r3, [pc, #288]	; (8003758 <HAL_I2C_Master_Transmit+0x1e0>)
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fa5b 	bl	8003af8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003642:	e05b      	b.n	80036fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	6a39      	ldr	r1, [r7, #32]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f8ed 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e07b      	b.n	8003750 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d034      	beq.n	80036fc <HAL_I2C_Master_Transmit+0x184>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d130      	bne.n	80036fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	2200      	movs	r2, #0
 80036a2:	2180      	movs	r1, #128	; 0x80
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f87f 	bl	80037a8 <I2C_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e04d      	b.n	8003750 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2bff      	cmp	r3, #255	; 0xff
 80036bc:	d90e      	bls.n	80036dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	22ff      	movs	r2, #255	; 0xff
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	8979      	ldrh	r1, [r7, #10]
 80036cc:	2300      	movs	r3, #0
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fa0f 	bl	8003af8 <I2C_TransferConfig>
 80036da:	e00f      	b.n	80036fc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	8979      	ldrh	r1, [r7, #10]
 80036ee:	2300      	movs	r3, #0
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f9fe 	bl	8003af8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d19e      	bne.n	8003644 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	6a39      	ldr	r1, [r7, #32]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f8cc 	bl	80038a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e01a      	b.n	8003750 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2220      	movs	r2, #32
 8003720:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_I2C_Master_Transmit+0x1e4>)
 800372e:	400b      	ands	r3, r1
 8003730:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800374e:	2302      	movs	r3, #2
  }
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	80002000 	.word	0x80002000
 800375c:	fe00e800 	.word	0xfe00e800

08003760 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d103      	bne.n	800377e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2200      	movs	r2, #0
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d007      	beq.n	800379c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	619a      	str	r2, [r3, #24]
  }
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b8:	e022      	b.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d01e      	beq.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7ff fb69 	bl	8002e98 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d113      	bne.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e00f      	b.n	8003820 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4013      	ands	r3, r2
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	429a      	cmp	r2, r3
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	429a      	cmp	r2, r3
 800381c:	d0cd      	beq.n	80037ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003834:	e02c      	b.n	8003890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f870 	bl	8003920 <I2C_IsErrorOccurred>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e02a      	b.n	80038a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d01e      	beq.n	8003890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003852:	f7ff fb21 	bl	8002e98 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	429a      	cmp	r2, r3
 8003860:	d302      	bcc.n	8003868 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d113      	bne.n	8003890 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	f043 0220 	orr.w	r2, r3, #32
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e007      	b.n	80038a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b02      	cmp	r3, #2
 800389c:	d1cb      	bne.n	8003836 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b4:	e028      	b.n	8003908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f830 	bl	8003920 <I2C_IsErrorOccurred>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e026      	b.n	8003918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7ff fae5 	bl	8002e98 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d113      	bne.n	8003908 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e007      	b.n	8003918 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b20      	cmp	r3, #32
 8003914:	d1cf      	bne.n	80038b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	d075      	beq.n	8003a38 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2210      	movs	r2, #16
 8003952:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003954:	e056      	b.n	8003a04 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d052      	beq.n	8003a04 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7ff fa9b 	bl	8002e98 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <I2C_IsErrorOccurred+0x54>
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d147      	bne.n	8003a04 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800397e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003986:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003996:	d12e      	bne.n	80039f6 <I2C_IsErrorOccurred+0xd6>
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800399e:	d02a      	beq.n	80039f6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d027      	beq.n	80039f6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039b6:	f7ff fa6f 	bl	8002e98 <HAL_GetTick>
 80039ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039bc:	e01b      	b.n	80039f6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039be:	f7ff fa6b 	bl	8002e98 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b19      	cmp	r3, #25
 80039ca:	d914      	bls.n	80039f6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d1dc      	bne.n	80039be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d003      	beq.n	8003a1a <I2C_IsErrorOccurred+0xfa>
 8003a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d09d      	beq.n	8003956 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2220      	movs	r2, #32
 8003a28:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01c      	beq.n	8003ae8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f7ff fe56 	bl	8003760 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <I2C_IsErrorOccurred+0x1d4>)
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3728      	adds	r7, #40	; 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	fe00e800 	.word	0xfe00e800

08003af8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	817b      	strh	r3, [r7, #10]
 8003b06:	4613      	mov	r3, r2
 8003b08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b10:	7a7b      	ldrb	r3, [r7, #9]
 8003b12:	041b      	lsls	r3, r3, #16
 8003b14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	0d5b      	lsrs	r3, r3, #21
 8003b32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <I2C_TransferConfig+0x60>)
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	ea02 0103 	and.w	r1, r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	03ff63ff 	.word	0x03ff63ff

08003b5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d138      	bne.n	8003be4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e032      	b.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2224      	movs	r2, #36	; 0x24
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d139      	bne.n	8003c7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e033      	b.n	8003c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2224      	movs	r2, #36	; 0x24
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40007000 	.word	0x40007000

08003ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb6:	d130      	bne.n	8003d1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cb8:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc4:	d038      	beq.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cce:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2232      	movs	r2, #50	; 0x32
 8003cdc:	fb02 f303 	mul.w	r3, r2, r3
 8003ce0:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0c9b      	lsrs	r3, r3, #18
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cec:	e002      	b.n	8003cf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf4:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d00:	d102      	bne.n	8003d08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f2      	bne.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d14:	d110      	bne.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e00f      	b.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d26:	d007      	beq.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d30:	4a05      	ldr	r2, [pc, #20]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	2000000c 	.word	0x2000000c
 8003d50:	431bde83 	.word	0x431bde83

08003d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e3ca      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d66:	4b97      	ldr	r3, [pc, #604]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d70:	4b94      	ldr	r3, [pc, #592]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80e4 	beq.w	8003f50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_RCC_OscConfig+0x4a>
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b0c      	cmp	r3, #12
 8003d92:	f040 808b 	bne.w	8003eac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	f040 8087 	bne.w	8003eac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d9e:	4b89      	ldr	r3, [pc, #548]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_RCC_OscConfig+0x62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e3a2      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	4b82      	ldr	r3, [pc, #520]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x7c>
 8003dc6:	4b7f      	ldr	r3, [pc, #508]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dce:	e005      	b.n	8003ddc <HAL_RCC_OscConfig+0x88>
 8003dd0:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d223      	bcs.n	8003e28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fd55 	bl	8004894 <RCC_SetFlashLatencyFromMSIRange>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e383      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df4:	4b73      	ldr	r3, [pc, #460]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a72      	ldr	r2, [pc, #456]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	f043 0308 	orr.w	r3, r3, #8
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	496d      	ldr	r1, [pc, #436]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e12:	4b6c      	ldr	r3, [pc, #432]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	4968      	ldr	r1, [pc, #416]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
 8003e26:	e025      	b.n	8003e74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e28:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a65      	ldr	r2, [pc, #404]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	f043 0308 	orr.w	r3, r3, #8
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4960      	ldr	r1, [pc, #384]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e46:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	495b      	ldr	r1, [pc, #364]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d109      	bne.n	8003e74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fd15 	bl	8004894 <RCC_SetFlashLatencyFromMSIRange>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e343      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e74:	f000 fc4a 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b52      	ldr	r3, [pc, #328]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	4950      	ldr	r1, [pc, #320]	; (8003fc8 <HAL_RCC_OscConfig+0x274>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	4a4e      	ldr	r2, [pc, #312]	; (8003fcc <HAL_RCC_OscConfig+0x278>)
 8003e92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e94:	4b4e      	ldr	r3, [pc, #312]	; (8003fd0 <HAL_RCC_OscConfig+0x27c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe ffad 	bl	8002df8 <HAL_InitTick>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d052      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	e327      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d032      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eb4:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a42      	ldr	r2, [pc, #264]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe ffea 	bl	8002e98 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ec8:	f7fe ffe6 	bl	8002e98 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e310      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eda:	4b3a      	ldr	r3, [pc, #232]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ee6:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a36      	ldr	r2, [pc, #216]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eec:	f043 0308 	orr.w	r3, r3, #8
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4931      	ldr	r1, [pc, #196]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f04:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	492c      	ldr	r1, [pc, #176]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
 8003f18:	e01a      	b.n	8003f50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f1a:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f26:	f7fe ffb7 	bl	8002e98 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f2e:	f7fe ffb3 	bl	8002e98 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e2dd      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f40:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f0      	bne.n	8003f2e <HAL_RCC_OscConfig+0x1da>
 8003f4c:	e000      	b.n	8003f50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d074      	beq.n	8004046 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d005      	beq.n	8003f6e <HAL_RCC_OscConfig+0x21a>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b0c      	cmp	r3, #12
 8003f66:	d10e      	bne.n	8003f86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d10b      	bne.n	8003f86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d064      	beq.n	8004044 <HAL_RCC_OscConfig+0x2f0>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d160      	bne.n	8004044 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e2ba      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x24a>
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0b      	ldr	r2, [pc, #44]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e026      	b.n	8003fec <HAL_RCC_OscConfig+0x298>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa6:	d115      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x280>
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a02      	ldr	r2, [pc, #8]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x298>
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	080076b8 	.word	0x080076b8
 8003fcc:	2000000c 	.word	0x2000000c
 8003fd0:	20000010 	.word	0x20000010
 8003fd4:	4ba0      	ldr	r3, [pc, #640]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a9f      	ldr	r2, [pc, #636]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4b9d      	ldr	r3, [pc, #628]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a9c      	ldr	r2, [pc, #624]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe ff50 	bl	8002e98 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fe ff4c 	bl	8002e98 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e276      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800400e:	4b92      	ldr	r3, [pc, #584]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2a8>
 800401a:	e014      	b.n	8004046 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe ff3c 	bl	8002e98 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004024:	f7fe ff38 	bl	8002e98 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e262      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004036:	4b88      	ldr	r3, [pc, #544]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x2d0>
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d060      	beq.n	8004114 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d005      	beq.n	8004064 <HAL_RCC_OscConfig+0x310>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d119      	bne.n	8004092 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d116      	bne.n	8004092 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004064:	4b7c      	ldr	r3, [pc, #496]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_OscConfig+0x328>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e23f      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407c:	4b76      	ldr	r3, [pc, #472]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	061b      	lsls	r3, r3, #24
 800408a:	4973      	ldr	r1, [pc, #460]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004090:	e040      	b.n	8004114 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d023      	beq.n	80040e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409a:	4b6f      	ldr	r3, [pc, #444]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a6e      	ldr	r2, [pc, #440]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fe fef7 	bl	8002e98 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fe fef3 	bl	8002e98 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e21d      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c0:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b62      	ldr	r3, [pc, #392]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	495f      	ldr	r1, [pc, #380]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
 80040e0:	e018      	b.n	8004114 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e2:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a5c      	ldr	r2, [pc, #368]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7fe fed3 	bl	8002e98 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f6:	f7fe fecf 	bl	8002e98 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e1f9      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004108:	4b53      	ldr	r3, [pc, #332]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f0      	bne.n	80040f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d03c      	beq.n	800419a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01c      	beq.n	8004162 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004128:	4b4b      	ldr	r3, [pc, #300]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412e:	4a4a      	ldr	r2, [pc, #296]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fe feae 	bl	8002e98 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004140:	f7fe feaa 	bl	8002e98 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e1d4      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004152:	4b41      	ldr	r3, [pc, #260]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ef      	beq.n	8004140 <HAL_RCC_OscConfig+0x3ec>
 8004160:	e01b      	b.n	800419a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004162:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004168:	4a3b      	ldr	r2, [pc, #236]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fe fe91 	bl	8002e98 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417a:	f7fe fe8d 	bl	8002e98 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1b7      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ef      	bne.n	800417a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80a6 	beq.w	80042f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a8:	2300      	movs	r3, #0
 80041aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041ac:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10d      	bne.n	80041d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b8:	4b27      	ldr	r3, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	4a26      	ldr	r2, [pc, #152]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58
 80041c4:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d0:	2301      	movs	r3, #1
 80041d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d4:	4b21      	ldr	r3, [pc, #132]	; (800425c <HAL_RCC_OscConfig+0x508>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d118      	bne.n	8004212 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e0:	4b1e      	ldr	r3, [pc, #120]	; (800425c <HAL_RCC_OscConfig+0x508>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_RCC_OscConfig+0x508>)
 80041e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ec:	f7fe fe54 	bl	8002e98 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f4:	f7fe fe50 	bl	8002e98 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e17a      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <HAL_RCC_OscConfig+0x508>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d108      	bne.n	800422c <HAL_RCC_OscConfig+0x4d8>
 800421a:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	4a0d      	ldr	r2, [pc, #52]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422a:	e029      	b.n	8004280 <HAL_RCC_OscConfig+0x52c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d115      	bne.n	8004260 <HAL_RCC_OscConfig+0x50c>
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	4a07      	ldr	r2, [pc, #28]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800423c:	f043 0304 	orr.w	r3, r3, #4
 8004240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	4a03      	ldr	r2, [pc, #12]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004254:	e014      	b.n	8004280 <HAL_RCC_OscConfig+0x52c>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	40007000 	.word	0x40007000
 8004260:	4b9c      	ldr	r3, [pc, #624]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	4a9b      	ldr	r2, [pc, #620]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004270:	4b98      	ldr	r3, [pc, #608]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a97      	ldr	r2, [pc, #604]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d016      	beq.n	80042b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fe fe06 	bl	8002e98 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fe fe02 	bl	8002e98 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e12a      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a6:	4b8b      	ldr	r3, [pc, #556]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ed      	beq.n	8004290 <HAL_RCC_OscConfig+0x53c>
 80042b4:	e015      	b.n	80042e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fe fdef 	bl	8002e98 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fe fdeb 	bl	8002e98 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e113      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d4:	4b7f      	ldr	r3, [pc, #508]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ed      	bne.n	80042be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e2:	7ffb      	ldrb	r3, [r7, #31]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e8:	4b7a      	ldr	r3, [pc, #488]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	4a79      	ldr	r2, [pc, #484]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80042ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80fe 	beq.w	80044fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	2b02      	cmp	r3, #2
 8004304:	f040 80d0 	bne.w	80044a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004308:	4b72      	ldr	r3, [pc, #456]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f003 0203 	and.w	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d130      	bne.n	800437e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	3b01      	subs	r3, #1
 8004328:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d127      	bne.n	800437e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d11f      	bne.n	800437e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004348:	2a07      	cmp	r2, #7
 800434a:	bf14      	ite	ne
 800434c:	2201      	movne	r2, #1
 800434e:	2200      	moveq	r2, #0
 8004350:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004352:	4293      	cmp	r3, r2
 8004354:	d113      	bne.n	800437e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d109      	bne.n	800437e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	3b01      	subs	r3, #1
 8004378:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d06e      	beq.n	800445c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d069      	beq.n	8004458 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004384:	4b53      	ldr	r3, [pc, #332]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004390:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0ad      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043a0:	4b4c      	ldr	r3, [pc, #304]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a4b      	ldr	r2, [pc, #300]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80043a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043ac:	f7fe fd74 	bl	8002e98 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe fd70 	bl	8002e98 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e09a      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c6:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d2:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	4b40      	ldr	r3, [pc, #256]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043e2:	3a01      	subs	r2, #1
 80043e4:	0112      	lsls	r2, r2, #4
 80043e6:	4311      	orrs	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043ec:	0212      	lsls	r2, r2, #8
 80043ee:	4311      	orrs	r1, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043f4:	0852      	lsrs	r2, r2, #1
 80043f6:	3a01      	subs	r2, #1
 80043f8:	0552      	lsls	r2, r2, #21
 80043fa:	4311      	orrs	r1, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004400:	0852      	lsrs	r2, r2, #1
 8004402:	3a01      	subs	r2, #1
 8004404:	0652      	lsls	r2, r2, #25
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800440c:	0912      	lsrs	r2, r2, #4
 800440e:	0452      	lsls	r2, r2, #17
 8004410:	430a      	orrs	r2, r1
 8004412:	4930      	ldr	r1, [pc, #192]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004414:	4313      	orrs	r3, r2
 8004416:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004418:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800441e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004422:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004424:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004430:	f7fe fd32 	bl	8002e98 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fe fd2e 	bl	8002e98 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e058      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444a:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004456:	e050      	b.n	80044fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e04f      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d148      	bne.n	80044fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a19      	ldr	r2, [pc, #100]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800446e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004474:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004480:	f7fe fd0a 	bl	8002e98 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fe fd06 	bl	8002e98 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e030      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449a:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x734>
 80044a6:	e028      	b.n	80044fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d023      	beq.n	80044f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80044b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fe fced 	bl	8002e98 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c0:	e00c      	b.n	80044dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fe fce9 	bl	8002e98 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d905      	bls.n	80044dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e013      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
 80044d4:	40021000 	.word	0x40021000
 80044d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_OscConfig+0x7b0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1ec      	bne.n	80044c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_OscConfig+0x7b0>)
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	4905      	ldr	r1, [pc, #20]	; (8004504 <HAL_RCC_OscConfig+0x7b0>)
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_RCC_OscConfig+0x7b4>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	60cb      	str	r3, [r1, #12]
 80044f4:	e001      	b.n	80044fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	feeefffc 	.word	0xfeeefffc

0800450c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0e7      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004520:	4b75      	ldr	r3, [pc, #468]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d910      	bls.n	8004550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b72      	ldr	r3, [pc, #456]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 0207 	bic.w	r2, r3, #7
 8004536:	4970      	ldr	r1, [pc, #448]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b6e      	ldr	r3, [pc, #440]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0cf      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d010      	beq.n	800457e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	4b66      	ldr	r3, [pc, #408]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004568:	429a      	cmp	r2, r3
 800456a:	d908      	bls.n	800457e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800456c:	4b63      	ldr	r3, [pc, #396]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4960      	ldr	r1, [pc, #384]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d04c      	beq.n	8004624 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004592:	4b5a      	ldr	r3, [pc, #360]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d121      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e0a6      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045aa:	4b54      	ldr	r3, [pc, #336]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d115      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e09a      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045c2:	4b4e      	ldr	r3, [pc, #312]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e08e      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d2:	4b4a      	ldr	r3, [pc, #296]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e086      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045e2:	4b46      	ldr	r3, [pc, #280]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 0203 	bic.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4943      	ldr	r1, [pc, #268]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f4:	f7fe fc50 	bl	8002e98 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fc:	f7fe fc4c 	bl	8002e98 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e06e      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 020c 	and.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	429a      	cmp	r2, r3
 8004622:	d1eb      	bne.n	80045fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d010      	beq.n	8004652 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	4b31      	ldr	r3, [pc, #196]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800463c:	429a      	cmp	r2, r3
 800463e:	d208      	bcs.n	8004652 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004640:	4b2e      	ldr	r3, [pc, #184]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	492b      	ldr	r1, [pc, #172]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004652:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d210      	bcs.n	8004682 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 0207 	bic.w	r2, r3, #7
 8004668:	4923      	ldr	r1, [pc, #140]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004670:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d001      	beq.n	8004682 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e036      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468e:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4918      	ldr	r1, [pc, #96]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4910      	ldr	r1, [pc, #64]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c0:	f000 f824 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	490b      	ldr	r1, [pc, #44]	; (8004700 <HAL_RCC_ClockConfig+0x1f4>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
 80046dc:	4a09      	ldr	r2, [pc, #36]	; (8004704 <HAL_RCC_ClockConfig+0x1f8>)
 80046de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe fb87 	bl	8002df8 <HAL_InitTick>
 80046ea:	4603      	mov	r3, r0
 80046ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80046ee:	7afb      	ldrb	r3, [r7, #11]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40022000 	.word	0x40022000
 80046fc:	40021000 	.word	0x40021000
 8004700:	080076b8 	.word	0x080076b8
 8004704:	2000000c 	.word	0x2000000c
 8004708:	20000010 	.word	0x20000010

0800470c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471a:	4b3e      	ldr	r3, [pc, #248]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004724:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x34>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d121      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d11e      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004740:	4b34      	ldr	r3, [pc, #208]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800474c:	4b31      	ldr	r3, [pc, #196]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 800474e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e005      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004768:	4a2b      	ldr	r2, [pc, #172]	; (8004818 <HAL_RCC_GetSysClockFreq+0x10c>)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004770:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10d      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800477c:	e00a      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b04      	cmp	r3, #4
 8004782:	d102      	bne.n	800478a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <HAL_RCC_GetSysClockFreq+0x110>)
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e004      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d101      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004790:	4b23      	ldr	r3, [pc, #140]	; (8004820 <HAL_RCC_GetSysClockFreq+0x114>)
 8004792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d134      	bne.n	8004804 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800479a:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d003      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d003      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0xac>
 80047b0:	e005      	b.n	80047be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047b2:	4b1a      	ldr	r3, [pc, #104]	; (800481c <HAL_RCC_GetSysClockFreq+0x110>)
 80047b4:	617b      	str	r3, [r7, #20]
      break;
 80047b6:	e005      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047b8:	4b19      	ldr	r3, [pc, #100]	; (8004820 <HAL_RCC_GetSysClockFreq+0x114>)
 80047ba:	617b      	str	r3, [r7, #20]
      break;
 80047bc:	e002      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	617b      	str	r3, [r7, #20]
      break;
 80047c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	3301      	adds	r3, #1
 80047d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	fb03 f202 	mul.w	r2, r3, r2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	0e5b      	lsrs	r3, r3, #25
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	3301      	adds	r3, #1
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004804:	69bb      	ldr	r3, [r7, #24]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3724      	adds	r7, #36	; 0x24
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	080076d0 	.word	0x080076d0
 800481c:	00f42400 	.word	0x00f42400
 8004820:	007a1200 	.word	0x007a1200

08004824 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <HAL_RCC_GetHCLKFreq+0x14>)
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	2000000c 	.word	0x2000000c

0800483c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004840:	f7ff fff0 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4904      	ldr	r1, [pc, #16]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40021000 	.word	0x40021000
 8004864:	080076c8 	.word	0x080076c8

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800486c:	f7ff ffda 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	0adb      	lsrs	r3, r3, #11
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4904      	ldr	r1, [pc, #16]	; (8004890 <HAL_RCC_GetPCLK2Freq+0x28>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000
 8004890:	080076c8 	.word	0x080076c8

08004894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048a0:	4b2a      	ldr	r3, [pc, #168]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048ac:	f7ff f9ee 	bl	8003c8c <HAL_PWREx_GetVoltageRange>
 80048b0:	6178      	str	r0, [r7, #20]
 80048b2:	e014      	b.n	80048de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048b4:	4b25      	ldr	r3, [pc, #148]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b8:	4a24      	ldr	r2, [pc, #144]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048be:	6593      	str	r3, [r2, #88]	; 0x58
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048cc:	f7ff f9de 	bl	8003c8c <HAL_PWREx_GetVoltageRange>
 80048d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048d2:	4b1e      	ldr	r3, [pc, #120]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	4a1d      	ldr	r2, [pc, #116]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e4:	d10b      	bne.n	80048fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b80      	cmp	r3, #128	; 0x80
 80048ea:	d919      	bls.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2ba0      	cmp	r3, #160	; 0xa0
 80048f0:	d902      	bls.n	80048f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048f2:	2302      	movs	r3, #2
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	e013      	b.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048f8:	2301      	movs	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	e010      	b.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d902      	bls.n	800490a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004904:	2303      	movs	r3, #3
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	e00a      	b.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d102      	bne.n	8004916 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004910:	2302      	movs	r3, #2
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	e004      	b.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b70      	cmp	r3, #112	; 0x70
 800491a:	d101      	bne.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800491c:	2301      	movs	r3, #1
 800491e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 0207 	bic.w	r2, r3, #7
 8004928:	4909      	ldr	r1, [pc, #36]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	429a      	cmp	r2, r3
 800493c:	d001      	beq.n	8004942 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40021000 	.word	0x40021000
 8004950:	40022000 	.word	0x40022000

08004954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800495c:	2300      	movs	r3, #0
 800495e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004960:	2300      	movs	r3, #0
 8004962:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800496c:	2b00      	cmp	r3, #0
 800496e:	d041      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004974:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004978:	d02a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800497a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800497e:	d824      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004984:	d008      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800498a:	d81e      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004994:	d010      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004996:	e018      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004998:	4b86      	ldr	r3, [pc, #536]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a85      	ldr	r2, [pc, #532]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049a4:	e015      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3304      	adds	r3, #4
 80049aa:	2100      	movs	r1, #0
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fabb 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049b6:	e00c      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3320      	adds	r3, #32
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fba6 	bl	8005110 <RCCEx_PLLSAI2_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	74fb      	strb	r3, [r7, #19]
      break;
 80049ce:	e000      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049d8:	4b76      	ldr	r3, [pc, #472]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e6:	4973      	ldr	r1, [pc, #460]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049ee:	e001      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d041      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a08:	d02a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a0e:	d824      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a14:	d008      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a1a:	d81e      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a24:	d010      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a26:	e018      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a28:	4b62      	ldr	r3, [pc, #392]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a61      	ldr	r2, [pc, #388]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a34:	e015      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fa73 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a46:	e00c      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3320      	adds	r3, #32
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fb5e 	bl	8005110 <RCCEx_PLLSAI2_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a58:	e003      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a68:	4b52      	ldr	r3, [pc, #328]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a76:	494f      	ldr	r1, [pc, #316]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a7e:	e001      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80a0 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aac:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	4a40      	ldr	r2, [pc, #256]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ab8:	4b3e      	ldr	r3, [pc, #248]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ac8:	4b3b      	ldr	r3, [pc, #236]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a3a      	ldr	r2, [pc, #232]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad4:	f7fe f9e0 	bl	8002e98 <HAL_GetTick>
 8004ad8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ada:	e009      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004adc:	f7fe f9dc 	bl	8002e98 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d902      	bls.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	74fb      	strb	r3, [r7, #19]
        break;
 8004aee:	e005      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004af0:	4b31      	ldr	r3, [pc, #196]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ef      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d15c      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b02:	4b2c      	ldr	r3, [pc, #176]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01f      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d019      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b20:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b2c:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fe f99b 	bl	8002e98 <HAL_GetTick>
 8004b62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b64:	e00b      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fe f997 	bl	8002e98 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d902      	bls.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	74fb      	strb	r3, [r7, #19]
            break;
 8004b7c:	e006      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ec      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b92:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba2:	4904      	ldr	r1, [pc, #16]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004baa:	e009      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bac:	7cfb      	ldrb	r3, [r7, #19]
 8004bae:	74bb      	strb	r3, [r7, #18]
 8004bb0:	e006      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bc0:	7c7b      	ldrb	r3, [r7, #17]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d105      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc6:	4b9e      	ldr	r3, [pc, #632]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	4a9d      	ldr	r2, [pc, #628]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bde:	4b98      	ldr	r3, [pc, #608]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f023 0203 	bic.w	r2, r3, #3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	4994      	ldr	r1, [pc, #592]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c00:	4b8f      	ldr	r3, [pc, #572]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f023 020c 	bic.w	r2, r3, #12
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	498c      	ldr	r1, [pc, #560]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c22:	4b87      	ldr	r3, [pc, #540]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	4983      	ldr	r1, [pc, #524]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c44:	4b7e      	ldr	r3, [pc, #504]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	497b      	ldr	r1, [pc, #492]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c66:	4b76      	ldr	r3, [pc, #472]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c74:	4972      	ldr	r1, [pc, #456]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c88:	4b6d      	ldr	r3, [pc, #436]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	496a      	ldr	r1, [pc, #424]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004caa:	4b65      	ldr	r3, [pc, #404]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	4961      	ldr	r1, [pc, #388]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ccc:	4b5c      	ldr	r3, [pc, #368]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cda:	4959      	ldr	r1, [pc, #356]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cee:	4b54      	ldr	r3, [pc, #336]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	4950      	ldr	r1, [pc, #320]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d10:	4b4b      	ldr	r3, [pc, #300]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	4948      	ldr	r1, [pc, #288]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d32:	4b43      	ldr	r3, [pc, #268]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	493f      	ldr	r1, [pc, #252]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d028      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d54:	4b3a      	ldr	r3, [pc, #232]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d62:	4937      	ldr	r1, [pc, #220]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d72:	d106      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d74:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4a31      	ldr	r2, [pc, #196]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d7e:	60d3      	str	r3, [r2, #12]
 8004d80:	e011      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8a:	d10c      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	2101      	movs	r1, #1
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f8c8 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004da2:	7cfb      	ldrb	r3, [r7, #19]
 8004da4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d028      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004db2:	4b23      	ldr	r3, [pc, #140]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	491f      	ldr	r1, [pc, #124]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd0:	d106      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ddc:	60d3      	str	r3, [r2, #12]
 8004dde:	e011      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de8:	d10c      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3304      	adds	r3, #4
 8004dee:	2101      	movs	r1, #1
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 f899 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dfa:	7cfb      	ldrb	r3, [r7, #19]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e00:	7cfb      	ldrb	r3, [r7, #19]
 8004e02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d02b      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	4908      	ldr	r1, [pc, #32]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2e:	d109      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a02      	ldr	r2, [pc, #8]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3a:	60d3      	str	r3, [r2, #12]
 8004e3c:	e014      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e3e:	bf00      	nop
 8004e40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
 8004e52:	2101      	movs	r1, #1
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f867 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e64:	7cfb      	ldrb	r3, [r7, #19]
 8004e66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d02f      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e74:	4b2b      	ldr	r3, [pc, #172]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e82:	4928      	ldr	r1, [pc, #160]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e92:	d10d      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3304      	adds	r3, #4
 8004e98:	2102      	movs	r1, #2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f844 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea4:	7cfb      	ldrb	r3, [r7, #19]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d014      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	74bb      	strb	r3, [r7, #18]
 8004eae:	e011      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3320      	adds	r3, #32
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f925 	bl	8005110 <RCCEx_PLLSAI2_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ee0:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eee:	490d      	ldr	r1, [pc, #52]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f12:	4904      	ldr	r1, [pc, #16]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000

08004f28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f36:	4b75      	ldr	r3, [pc, #468]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d018      	beq.n	8004f74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f42:	4b72      	ldr	r3, [pc, #456]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0203 	and.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d10d      	bne.n	8004f6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
       ||
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f5a:	4b6c      	ldr	r3, [pc, #432]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
       ||
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d047      	beq.n	8004ffe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
 8004f72:	e044      	b.n	8004ffe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d018      	beq.n	8004fae <RCCEx_PLLSAI1_Config+0x86>
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d825      	bhi.n	8004fcc <RCCEx_PLLSAI1_Config+0xa4>
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d002      	beq.n	8004f8a <RCCEx_PLLSAI1_Config+0x62>
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d009      	beq.n	8004f9c <RCCEx_PLLSAI1_Config+0x74>
 8004f88:	e020      	b.n	8004fcc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f8a:	4b60      	ldr	r3, [pc, #384]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11d      	bne.n	8004fd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f9a:	e01a      	b.n	8004fd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f9c:	4b5b      	ldr	r3, [pc, #364]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d116      	bne.n	8004fd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fac:	e013      	b.n	8004fd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fae:	4b57      	ldr	r3, [pc, #348]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10f      	bne.n	8004fda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fba:	4b54      	ldr	r3, [pc, #336]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fca:	e006      	b.n	8004fda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd0:	e004      	b.n	8004fdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e002      	b.n	8004fdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fda:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fe2:	4b4a      	ldr	r3, [pc, #296]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6819      	ldr	r1, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	4944      	ldr	r1, [pc, #272]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d17d      	bne.n	8005100 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005004:	4b41      	ldr	r3, [pc, #260]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a40      	ldr	r2, [pc, #256]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 800500a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800500e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005010:	f7fd ff42 	bl	8002e98 <HAL_GetTick>
 8005014:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005016:	e009      	b.n	800502c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005018:	f7fd ff3e 	bl	8002e98 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d902      	bls.n	800502c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	73fb      	strb	r3, [r7, #15]
        break;
 800502a:	e005      	b.n	8005038 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800502c:	4b37      	ldr	r3, [pc, #220]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1ef      	bne.n	8005018 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d160      	bne.n	8005100 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d111      	bne.n	8005068 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005044:	4b31      	ldr	r3, [pc, #196]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800504c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6892      	ldr	r2, [r2, #8]
 8005054:	0211      	lsls	r1, r2, #8
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68d2      	ldr	r2, [r2, #12]
 800505a:	0912      	lsrs	r2, r2, #4
 800505c:	0452      	lsls	r2, r2, #17
 800505e:	430a      	orrs	r2, r1
 8005060:	492a      	ldr	r1, [pc, #168]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005062:	4313      	orrs	r3, r2
 8005064:	610b      	str	r3, [r1, #16]
 8005066:	e027      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d112      	bne.n	8005094 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800506e:	4b27      	ldr	r3, [pc, #156]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005076:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6892      	ldr	r2, [r2, #8]
 800507e:	0211      	lsls	r1, r2, #8
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6912      	ldr	r2, [r2, #16]
 8005084:	0852      	lsrs	r2, r2, #1
 8005086:	3a01      	subs	r2, #1
 8005088:	0552      	lsls	r2, r2, #21
 800508a:	430a      	orrs	r2, r1
 800508c:	491f      	ldr	r1, [pc, #124]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 800508e:	4313      	orrs	r3, r2
 8005090:	610b      	str	r3, [r1, #16]
 8005092:	e011      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005094:	4b1d      	ldr	r3, [pc, #116]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800509c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6892      	ldr	r2, [r2, #8]
 80050a4:	0211      	lsls	r1, r2, #8
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6952      	ldr	r2, [r2, #20]
 80050aa:	0852      	lsrs	r2, r2, #1
 80050ac:	3a01      	subs	r2, #1
 80050ae:	0652      	lsls	r2, r2, #25
 80050b0:	430a      	orrs	r2, r1
 80050b2:	4916      	ldr	r1, [pc, #88]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050b8:	4b14      	ldr	r3, [pc, #80]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a13      	ldr	r2, [pc, #76]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fd fee8 	bl	8002e98 <HAL_GetTick>
 80050c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ca:	e009      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050cc:	f7fd fee4 	bl	8002e98 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d902      	bls.n	80050e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	73fb      	strb	r3, [r7, #15]
          break;
 80050de:	e005      	b.n	80050ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ef      	beq.n	80050cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	4904      	ldr	r1, [pc, #16]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005100:	7bfb      	ldrb	r3, [r7, #15]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000

08005110 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800511e:	4b6a      	ldr	r3, [pc, #424]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d018      	beq.n	800515c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800512a:	4b67      	ldr	r3, [pc, #412]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 0203 	and.w	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d10d      	bne.n	8005156 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
       ||
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005142:	4b61      	ldr	r3, [pc, #388]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	091b      	lsrs	r3, r3, #4
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
       ||
 8005152:	429a      	cmp	r2, r3
 8005154:	d047      	beq.n	80051e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	73fb      	strb	r3, [r7, #15]
 800515a:	e044      	b.n	80051e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d018      	beq.n	8005196 <RCCEx_PLLSAI2_Config+0x86>
 8005164:	2b03      	cmp	r3, #3
 8005166:	d825      	bhi.n	80051b4 <RCCEx_PLLSAI2_Config+0xa4>
 8005168:	2b01      	cmp	r3, #1
 800516a:	d002      	beq.n	8005172 <RCCEx_PLLSAI2_Config+0x62>
 800516c:	2b02      	cmp	r3, #2
 800516e:	d009      	beq.n	8005184 <RCCEx_PLLSAI2_Config+0x74>
 8005170:	e020      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005172:	4b55      	ldr	r3, [pc, #340]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d11d      	bne.n	80051ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005182:	e01a      	b.n	80051ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005184:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	2b00      	cmp	r3, #0
 800518e:	d116      	bne.n	80051be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005194:	e013      	b.n	80051be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005196:	4b4c      	ldr	r3, [pc, #304]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051a2:	4b49      	ldr	r3, [pc, #292]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d109      	bne.n	80051c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051b2:	e006      	b.n	80051c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
      break;
 80051b8:	e004      	b.n	80051c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ba:	bf00      	nop
 80051bc:	e002      	b.n	80051c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051be:	bf00      	nop
 80051c0:	e000      	b.n	80051c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10d      	bne.n	80051e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ca:	4b3f      	ldr	r3, [pc, #252]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6819      	ldr	r1, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	3b01      	subs	r3, #1
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	430b      	orrs	r3, r1
 80051e0:	4939      	ldr	r1, [pc, #228]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d167      	bne.n	80052bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051ec:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a35      	ldr	r2, [pc, #212]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f8:	f7fd fe4e 	bl	8002e98 <HAL_GetTick>
 80051fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051fe:	e009      	b.n	8005214 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005200:	f7fd fe4a 	bl	8002e98 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d902      	bls.n	8005214 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	73fb      	strb	r3, [r7, #15]
        break;
 8005212:	e005      	b.n	8005220 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1ef      	bne.n	8005200 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d14a      	bne.n	80052bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d111      	bne.n	8005250 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800522c:	4b26      	ldr	r3, [pc, #152]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6892      	ldr	r2, [r2, #8]
 800523c:	0211      	lsls	r1, r2, #8
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68d2      	ldr	r2, [r2, #12]
 8005242:	0912      	lsrs	r2, r2, #4
 8005244:	0452      	lsls	r2, r2, #17
 8005246:	430a      	orrs	r2, r1
 8005248:	491f      	ldr	r1, [pc, #124]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524a:	4313      	orrs	r3, r2
 800524c:	614b      	str	r3, [r1, #20]
 800524e:	e011      	b.n	8005274 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005250:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005258:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6892      	ldr	r2, [r2, #8]
 8005260:	0211      	lsls	r1, r2, #8
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6912      	ldr	r2, [r2, #16]
 8005266:	0852      	lsrs	r2, r2, #1
 8005268:	3a01      	subs	r2, #1
 800526a:	0652      	lsls	r2, r2, #25
 800526c:	430a      	orrs	r2, r1
 800526e:	4916      	ldr	r1, [pc, #88]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005270:	4313      	orrs	r3, r2
 8005272:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005274:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fd fe0a 	bl	8002e98 <HAL_GetTick>
 8005284:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005286:	e009      	b.n	800529c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005288:	f7fd fe06 	bl	8002e98 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d902      	bls.n	800529c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	73fb      	strb	r3, [r7, #15]
          break;
 800529a:	e005      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ef      	beq.n	8005288 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	4904      	ldr	r1, [pc, #16]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000

080052cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e049      	b.n	8005372 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fb fca6 	bl	8000c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f000 fa50 	bl	80057b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d122      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b02      	cmp	r3, #2
 800539c:	d11b      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f06f 0202 	mvn.w	r2, #2
 80053a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f9d8 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 80053c2:	e005      	b.n	80053d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f9ca 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9db 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d122      	bne.n	800542a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d11b      	bne.n	800542a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0204 	mvn.w	r2, #4
 80053fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f9ae 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 8005416:	e005      	b.n	8005424 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f9a0 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f9b1 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b08      	cmp	r3, #8
 8005436:	d122      	bne.n	800547e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b08      	cmp	r3, #8
 8005444:	d11b      	bne.n	800547e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f06f 0208 	mvn.w	r2, #8
 800544e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2204      	movs	r2, #4
 8005454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f984 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 800546a:	e005      	b.n	8005478 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f976 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f987 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b10      	cmp	r3, #16
 800548a:	d122      	bne.n	80054d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b10      	cmp	r3, #16
 8005498:	d11b      	bne.n	80054d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f06f 0210 	mvn.w	r2, #16
 80054a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2208      	movs	r2, #8
 80054a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f95a 	bl	8005772 <HAL_TIM_IC_CaptureCallback>
 80054be:	e005      	b.n	80054cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f94c 	bl	800575e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f95d 	bl	8005786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10e      	bne.n	80054fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d107      	bne.n	80054fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f06f 0201 	mvn.w	r2, #1
 80054f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f926 	bl	800574a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b80      	cmp	r3, #128	; 0x80
 800550a:	d10e      	bne.n	800552a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005516:	2b80      	cmp	r3, #128	; 0x80
 8005518:	d107      	bne.n	800552a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fb09 	bl	8005b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005538:	d10e      	bne.n	8005558 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005544:	2b80      	cmp	r3, #128	; 0x80
 8005546:	d107      	bne.n	8005558 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fafc 	bl	8005b50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	d10e      	bne.n	8005584 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d107      	bne.n	8005584 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800557c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f90b 	bl	800579a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b20      	cmp	r3, #32
 8005590:	d10e      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b20      	cmp	r3, #32
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0220 	mvn.w	r2, #32
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fabc 	bl	8005b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_TIM_ConfigClockSource+0x1c>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e0b6      	b.n	8005742 <HAL_TIM_ConfigClockSource+0x18a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005610:	d03e      	beq.n	8005690 <HAL_TIM_ConfigClockSource+0xd8>
 8005612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005616:	f200 8087 	bhi.w	8005728 <HAL_TIM_ConfigClockSource+0x170>
 800561a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561e:	f000 8086 	beq.w	800572e <HAL_TIM_ConfigClockSource+0x176>
 8005622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005626:	d87f      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x170>
 8005628:	2b70      	cmp	r3, #112	; 0x70
 800562a:	d01a      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0xaa>
 800562c:	2b70      	cmp	r3, #112	; 0x70
 800562e:	d87b      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x170>
 8005630:	2b60      	cmp	r3, #96	; 0x60
 8005632:	d050      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x11e>
 8005634:	2b60      	cmp	r3, #96	; 0x60
 8005636:	d877      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x170>
 8005638:	2b50      	cmp	r3, #80	; 0x50
 800563a:	d03c      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0xfe>
 800563c:	2b50      	cmp	r3, #80	; 0x50
 800563e:	d873      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x170>
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d058      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x13e>
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	d86f      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x170>
 8005648:	2b30      	cmp	r3, #48	; 0x30
 800564a:	d064      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x15e>
 800564c:	2b30      	cmp	r3, #48	; 0x30
 800564e:	d86b      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x170>
 8005650:	2b20      	cmp	r3, #32
 8005652:	d060      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x15e>
 8005654:	2b20      	cmp	r3, #32
 8005656:	d867      	bhi.n	8005728 <HAL_TIM_ConfigClockSource+0x170>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d05c      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x15e>
 800565c:	2b10      	cmp	r3, #16
 800565e:	d05a      	beq.n	8005716 <HAL_TIM_ConfigClockSource+0x15e>
 8005660:	e062      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6899      	ldr	r1, [r3, #8]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f000 f9b1 	bl	80059d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	609a      	str	r2, [r3, #8]
      break;
 800568e:	e04f      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	6899      	ldr	r1, [r3, #8]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f000 f99a 	bl	80059d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056b2:	609a      	str	r2, [r3, #8]
      break;
 80056b4:	e03c      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 f90e 	bl	80058e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2150      	movs	r1, #80	; 0x50
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f967 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 80056d4:	e02c      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6859      	ldr	r1, [r3, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f000 f92d 	bl	8005942 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2160      	movs	r1, #96	; 0x60
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f957 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 80056f4:	e01c      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	461a      	mov	r2, r3
 8005704:	f000 f8ee 	bl	80058e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2140      	movs	r1, #64	; 0x40
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f947 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 8005714:	e00c      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f000 f93e 	bl	80059a2 <TIM_ITRx_SetConfig>
      break;
 8005726:	e003      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
      break;
 800572c:	e000      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800572e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a40      	ldr	r2, [pc, #256]	; (80058c4 <TIM_Base_SetConfig+0x114>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d013      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ce:	d00f      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a3d      	ldr	r2, [pc, #244]	; (80058c8 <TIM_Base_SetConfig+0x118>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00b      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a3c      	ldr	r2, [pc, #240]	; (80058cc <TIM_Base_SetConfig+0x11c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d007      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a3b      	ldr	r2, [pc, #236]	; (80058d0 <TIM_Base_SetConfig+0x120>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d003      	beq.n	80057f0 <TIM_Base_SetConfig+0x40>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a3a      	ldr	r2, [pc, #232]	; (80058d4 <TIM_Base_SetConfig+0x124>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d108      	bne.n	8005802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2f      	ldr	r2, [pc, #188]	; (80058c4 <TIM_Base_SetConfig+0x114>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d01f      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005810:	d01b      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <TIM_Base_SetConfig+0x118>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d017      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2b      	ldr	r2, [pc, #172]	; (80058cc <TIM_Base_SetConfig+0x11c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d013      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2a      	ldr	r2, [pc, #168]	; (80058d0 <TIM_Base_SetConfig+0x120>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00f      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <TIM_Base_SetConfig+0x124>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00b      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a28      	ldr	r2, [pc, #160]	; (80058d8 <TIM_Base_SetConfig+0x128>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d007      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a27      	ldr	r2, [pc, #156]	; (80058dc <TIM_Base_SetConfig+0x12c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_Base_SetConfig+0x9a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a26      	ldr	r2, [pc, #152]	; (80058e0 <TIM_Base_SetConfig+0x130>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d108      	bne.n	800585c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4313      	orrs	r3, r2
 800585a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a10      	ldr	r2, [pc, #64]	; (80058c4 <TIM_Base_SetConfig+0x114>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00f      	beq.n	80058a8 <TIM_Base_SetConfig+0xf8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a12      	ldr	r2, [pc, #72]	; (80058d4 <TIM_Base_SetConfig+0x124>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00b      	beq.n	80058a8 <TIM_Base_SetConfig+0xf8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a11      	ldr	r2, [pc, #68]	; (80058d8 <TIM_Base_SetConfig+0x128>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <TIM_Base_SetConfig+0xf8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a10      	ldr	r2, [pc, #64]	; (80058dc <TIM_Base_SetConfig+0x12c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_Base_SetConfig+0xf8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a0f      	ldr	r2, [pc, #60]	; (80058e0 <TIM_Base_SetConfig+0x130>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d103      	bne.n	80058b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	615a      	str	r2, [r3, #20]
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40012c00 	.word	0x40012c00
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40013400 	.word	0x40013400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400
 80058e0:	40014800 	.word	0x40014800

080058e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f023 0201 	bic.w	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800590e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f023 030a 	bic.w	r3, r3, #10
 8005920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005942:	b480      	push	{r7}
 8005944:	b087      	sub	sp, #28
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	f023 0210 	bic.w	r2, r3, #16
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800596c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	031b      	lsls	r3, r3, #12
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800597e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	f043 0307 	orr.w	r3, r3, #7
 80059c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	609a      	str	r2, [r3, #8]
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	609a      	str	r2, [r3, #8]
}
 8005a0c:	bf00      	nop
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e068      	b.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2e      	ldr	r2, [pc, #184]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d108      	bne.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1e      	ldr	r2, [pc, #120]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01d      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d018      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d009      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d10c      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40013400 	.word	0x40013400
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800
 8005b20:	40000c00 	.word	0x40000c00
 8005b24:	40014000 	.word	0x40014000

08005b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e040      	b.n	8005bf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fd f890 	bl	8002cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2224      	movs	r2, #36	; 0x24
 8005b90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f8c0 	bl	8005d28 <UART_SetConfig>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e022      	b.n	8005bf8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fb6c 	bl	8006298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fbf3 	bl	80063dc <UART_CheckIdleState>
 8005bf6:	4603      	mov	r3, r0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	f040 8082 	bne.w	8005d1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_UART_Transmit+0x26>
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e07a      	b.n	8005d20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_UART_Transmit+0x38>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e073      	b.n	8005d20 <HAL_UART_Transmit+0x120>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2221      	movs	r2, #33	; 0x21
 8005c4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c4e:	f7fd f923 	bl	8002e98 <HAL_GetTick>
 8005c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	88fa      	ldrh	r2, [r7, #6]
 8005c60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6c:	d108      	bne.n	8005c80 <HAL_UART_Transmit+0x80>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d104      	bne.n	8005c80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	e003      	b.n	8005c88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005c90:	e02d      	b.n	8005cee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2180      	movs	r1, #128	; 0x80
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fbe6 	bl	800646e <UART_WaitOnFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e039      	b.n	8005d20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	881a      	ldrh	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	3302      	adds	r3, #2
 8005cc6:	61bb      	str	r3, [r7, #24]
 8005cc8:	e008      	b.n	8005cdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	b292      	uxth	r2, r2
 8005cd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1cb      	bne.n	8005c92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2200      	movs	r2, #0
 8005d02:	2140      	movs	r1, #64	; 0x40
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 fbb2 	bl	800646e <UART_WaitOnFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e005      	b.n	8005d20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e000      	b.n	8005d20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005d1e:	2302      	movs	r3, #2
  }
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d2c:	b08a      	sub	sp, #40	; 0x28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4ba4      	ldr	r3, [pc, #656]	; (8005fe8 <UART_SetConfig+0x2c0>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d60:	430b      	orrs	r3, r1
 8005d62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a99      	ldr	r2, [pc, #612]	; (8005fec <UART_SetConfig+0x2c4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d90:	4313      	orrs	r3, r2
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da4:	430a      	orrs	r2, r1
 8005da6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a90      	ldr	r2, [pc, #576]	; (8005ff0 <UART_SetConfig+0x2c8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d126      	bne.n	8005e00 <UART_SetConfig+0xd8>
 8005db2:	4b90      	ldr	r3, [pc, #576]	; (8005ff4 <UART_SetConfig+0x2cc>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d81b      	bhi.n	8005df8 <UART_SetConfig+0xd0>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0xa0>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005de9 	.word	0x08005de9
 8005dd0:	08005de1 	.word	0x08005de1
 8005dd4:	08005df1 	.word	0x08005df1
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dde:	e116      	b.n	800600e <UART_SetConfig+0x2e6>
 8005de0:	2302      	movs	r3, #2
 8005de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de6:	e112      	b.n	800600e <UART_SetConfig+0x2e6>
 8005de8:	2304      	movs	r3, #4
 8005dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dee:	e10e      	b.n	800600e <UART_SetConfig+0x2e6>
 8005df0:	2308      	movs	r3, #8
 8005df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df6:	e10a      	b.n	800600e <UART_SetConfig+0x2e6>
 8005df8:	2310      	movs	r3, #16
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfe:	e106      	b.n	800600e <UART_SetConfig+0x2e6>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a7c      	ldr	r2, [pc, #496]	; (8005ff8 <UART_SetConfig+0x2d0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d138      	bne.n	8005e7c <UART_SetConfig+0x154>
 8005e0a:	4b7a      	ldr	r3, [pc, #488]	; (8005ff4 <UART_SetConfig+0x2cc>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e10:	f003 030c 	and.w	r3, r3, #12
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	d82d      	bhi.n	8005e74 <UART_SetConfig+0x14c>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <UART_SetConfig+0xf8>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e55 	.word	0x08005e55
 8005e24:	08005e75 	.word	0x08005e75
 8005e28:	08005e75 	.word	0x08005e75
 8005e2c:	08005e75 	.word	0x08005e75
 8005e30:	08005e65 	.word	0x08005e65
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005e75 	.word	0x08005e75
 8005e40:	08005e5d 	.word	0x08005e5d
 8005e44:	08005e75 	.word	0x08005e75
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e6d 	.word	0x08005e6d
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5a:	e0d8      	b.n	800600e <UART_SetConfig+0x2e6>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e62:	e0d4      	b.n	800600e <UART_SetConfig+0x2e6>
 8005e64:	2304      	movs	r3, #4
 8005e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6a:	e0d0      	b.n	800600e <UART_SetConfig+0x2e6>
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e72:	e0cc      	b.n	800600e <UART_SetConfig+0x2e6>
 8005e74:	2310      	movs	r3, #16
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7a:	e0c8      	b.n	800600e <UART_SetConfig+0x2e6>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a5e      	ldr	r2, [pc, #376]	; (8005ffc <UART_SetConfig+0x2d4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d125      	bne.n	8005ed2 <UART_SetConfig+0x1aa>
 8005e86:	4b5b      	ldr	r3, [pc, #364]	; (8005ff4 <UART_SetConfig+0x2cc>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e90:	2b30      	cmp	r3, #48	; 0x30
 8005e92:	d016      	beq.n	8005ec2 <UART_SetConfig+0x19a>
 8005e94:	2b30      	cmp	r3, #48	; 0x30
 8005e96:	d818      	bhi.n	8005eca <UART_SetConfig+0x1a2>
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d00a      	beq.n	8005eb2 <UART_SetConfig+0x18a>
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	d814      	bhi.n	8005eca <UART_SetConfig+0x1a2>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <UART_SetConfig+0x182>
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d008      	beq.n	8005eba <UART_SetConfig+0x192>
 8005ea8:	e00f      	b.n	8005eca <UART_SetConfig+0x1a2>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb0:	e0ad      	b.n	800600e <UART_SetConfig+0x2e6>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb8:	e0a9      	b.n	800600e <UART_SetConfig+0x2e6>
 8005eba:	2304      	movs	r3, #4
 8005ebc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec0:	e0a5      	b.n	800600e <UART_SetConfig+0x2e6>
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec8:	e0a1      	b.n	800600e <UART_SetConfig+0x2e6>
 8005eca:	2310      	movs	r3, #16
 8005ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed0:	e09d      	b.n	800600e <UART_SetConfig+0x2e6>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a4a      	ldr	r2, [pc, #296]	; (8006000 <UART_SetConfig+0x2d8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d125      	bne.n	8005f28 <UART_SetConfig+0x200>
 8005edc:	4b45      	ldr	r3, [pc, #276]	; (8005ff4 <UART_SetConfig+0x2cc>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ee6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ee8:	d016      	beq.n	8005f18 <UART_SetConfig+0x1f0>
 8005eea:	2bc0      	cmp	r3, #192	; 0xc0
 8005eec:	d818      	bhi.n	8005f20 <UART_SetConfig+0x1f8>
 8005eee:	2b80      	cmp	r3, #128	; 0x80
 8005ef0:	d00a      	beq.n	8005f08 <UART_SetConfig+0x1e0>
 8005ef2:	2b80      	cmp	r3, #128	; 0x80
 8005ef4:	d814      	bhi.n	8005f20 <UART_SetConfig+0x1f8>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <UART_SetConfig+0x1d8>
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d008      	beq.n	8005f10 <UART_SetConfig+0x1e8>
 8005efe:	e00f      	b.n	8005f20 <UART_SetConfig+0x1f8>
 8005f00:	2300      	movs	r3, #0
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f06:	e082      	b.n	800600e <UART_SetConfig+0x2e6>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0e:	e07e      	b.n	800600e <UART_SetConfig+0x2e6>
 8005f10:	2304      	movs	r3, #4
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f16:	e07a      	b.n	800600e <UART_SetConfig+0x2e6>
 8005f18:	2308      	movs	r3, #8
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1e:	e076      	b.n	800600e <UART_SetConfig+0x2e6>
 8005f20:	2310      	movs	r3, #16
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f26:	e072      	b.n	800600e <UART_SetConfig+0x2e6>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a35      	ldr	r2, [pc, #212]	; (8006004 <UART_SetConfig+0x2dc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d12a      	bne.n	8005f88 <UART_SetConfig+0x260>
 8005f32:	4b30      	ldr	r3, [pc, #192]	; (8005ff4 <UART_SetConfig+0x2cc>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f40:	d01a      	beq.n	8005f78 <UART_SetConfig+0x250>
 8005f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f46:	d81b      	bhi.n	8005f80 <UART_SetConfig+0x258>
 8005f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4c:	d00c      	beq.n	8005f68 <UART_SetConfig+0x240>
 8005f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f52:	d815      	bhi.n	8005f80 <UART_SetConfig+0x258>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <UART_SetConfig+0x238>
 8005f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5c:	d008      	beq.n	8005f70 <UART_SetConfig+0x248>
 8005f5e:	e00f      	b.n	8005f80 <UART_SetConfig+0x258>
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f66:	e052      	b.n	800600e <UART_SetConfig+0x2e6>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6e:	e04e      	b.n	800600e <UART_SetConfig+0x2e6>
 8005f70:	2304      	movs	r3, #4
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f76:	e04a      	b.n	800600e <UART_SetConfig+0x2e6>
 8005f78:	2308      	movs	r3, #8
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7e:	e046      	b.n	800600e <UART_SetConfig+0x2e6>
 8005f80:	2310      	movs	r3, #16
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f86:	e042      	b.n	800600e <UART_SetConfig+0x2e6>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a17      	ldr	r2, [pc, #92]	; (8005fec <UART_SetConfig+0x2c4>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d13a      	bne.n	8006008 <UART_SetConfig+0x2e0>
 8005f92:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <UART_SetConfig+0x2cc>)
 8005f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fa0:	d01a      	beq.n	8005fd8 <UART_SetConfig+0x2b0>
 8005fa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fa6:	d81b      	bhi.n	8005fe0 <UART_SetConfig+0x2b8>
 8005fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fac:	d00c      	beq.n	8005fc8 <UART_SetConfig+0x2a0>
 8005fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb2:	d815      	bhi.n	8005fe0 <UART_SetConfig+0x2b8>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <UART_SetConfig+0x298>
 8005fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fbc:	d008      	beq.n	8005fd0 <UART_SetConfig+0x2a8>
 8005fbe:	e00f      	b.n	8005fe0 <UART_SetConfig+0x2b8>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc6:	e022      	b.n	800600e <UART_SetConfig+0x2e6>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fce:	e01e      	b.n	800600e <UART_SetConfig+0x2e6>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd6:	e01a      	b.n	800600e <UART_SetConfig+0x2e6>
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fde:	e016      	b.n	800600e <UART_SetConfig+0x2e6>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe6:	e012      	b.n	800600e <UART_SetConfig+0x2e6>
 8005fe8:	efff69f3 	.word	0xefff69f3
 8005fec:	40008000 	.word	0x40008000
 8005ff0:	40013800 	.word	0x40013800
 8005ff4:	40021000 	.word	0x40021000
 8005ff8:	40004400 	.word	0x40004400
 8005ffc:	40004800 	.word	0x40004800
 8006000:	40004c00 	.word	0x40004c00
 8006004:	40005000 	.word	0x40005000
 8006008:	2310      	movs	r3, #16
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a9f      	ldr	r2, [pc, #636]	; (8006290 <UART_SetConfig+0x568>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d17a      	bne.n	800610e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006018:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800601c:	2b08      	cmp	r3, #8
 800601e:	d824      	bhi.n	800606a <UART_SetConfig+0x342>
 8006020:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <UART_SetConfig+0x300>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	0800604d 	.word	0x0800604d
 800602c:	0800606b 	.word	0x0800606b
 8006030:	08006055 	.word	0x08006055
 8006034:	0800606b 	.word	0x0800606b
 8006038:	0800605b 	.word	0x0800605b
 800603c:	0800606b 	.word	0x0800606b
 8006040:	0800606b 	.word	0x0800606b
 8006044:	0800606b 	.word	0x0800606b
 8006048:	08006063 	.word	0x08006063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800604c:	f7fe fbf6 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 8006050:	61f8      	str	r0, [r7, #28]
        break;
 8006052:	e010      	b.n	8006076 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006054:	4b8f      	ldr	r3, [pc, #572]	; (8006294 <UART_SetConfig+0x56c>)
 8006056:	61fb      	str	r3, [r7, #28]
        break;
 8006058:	e00d      	b.n	8006076 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800605a:	f7fe fb57 	bl	800470c <HAL_RCC_GetSysClockFreq>
 800605e:	61f8      	str	r0, [r7, #28]
        break;
 8006060:	e009      	b.n	8006076 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006066:	61fb      	str	r3, [r7, #28]
        break;
 8006068:	e005      	b.n	8006076 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006074:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 80fb 	beq.w	8006274 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	4413      	add	r3, r2
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	429a      	cmp	r2, r3
 800608c:	d305      	bcc.n	800609a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	429a      	cmp	r2, r3
 8006098:	d903      	bls.n	80060a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060a0:	e0e8      	b.n	8006274 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	2200      	movs	r2, #0
 80060a6:	461c      	mov	r4, r3
 80060a8:	4615      	mov	r5, r2
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	022b      	lsls	r3, r5, #8
 80060b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060b8:	0222      	lsls	r2, r4, #8
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	6849      	ldr	r1, [r1, #4]
 80060be:	0849      	lsrs	r1, r1, #1
 80060c0:	2000      	movs	r0, #0
 80060c2:	4688      	mov	r8, r1
 80060c4:	4681      	mov	r9, r0
 80060c6:	eb12 0a08 	adds.w	sl, r2, r8
 80060ca:	eb43 0b09 	adc.w	fp, r3, r9
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	603b      	str	r3, [r7, #0]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060dc:	4650      	mov	r0, sl
 80060de:	4659      	mov	r1, fp
 80060e0:	f7fa f8c6 	bl	8000270 <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4613      	mov	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060f2:	d308      	bcc.n	8006106 <UART_SetConfig+0x3de>
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060fa:	d204      	bcs.n	8006106 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	60da      	str	r2, [r3, #12]
 8006104:	e0b6      	b.n	8006274 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800610c:	e0b2      	b.n	8006274 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006116:	d15e      	bne.n	80061d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006118:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800611c:	2b08      	cmp	r3, #8
 800611e:	d828      	bhi.n	8006172 <UART_SetConfig+0x44a>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <UART_SetConfig+0x400>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	0800614d 	.word	0x0800614d
 800612c:	08006155 	.word	0x08006155
 8006130:	0800615d 	.word	0x0800615d
 8006134:	08006173 	.word	0x08006173
 8006138:	08006163 	.word	0x08006163
 800613c:	08006173 	.word	0x08006173
 8006140:	08006173 	.word	0x08006173
 8006144:	08006173 	.word	0x08006173
 8006148:	0800616b 	.word	0x0800616b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800614c:	f7fe fb76 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 8006150:	61f8      	str	r0, [r7, #28]
        break;
 8006152:	e014      	b.n	800617e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006154:	f7fe fb88 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8006158:	61f8      	str	r0, [r7, #28]
        break;
 800615a:	e010      	b.n	800617e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800615c:	4b4d      	ldr	r3, [pc, #308]	; (8006294 <UART_SetConfig+0x56c>)
 800615e:	61fb      	str	r3, [r7, #28]
        break;
 8006160:	e00d      	b.n	800617e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006162:	f7fe fad3 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8006166:	61f8      	str	r0, [r7, #28]
        break;
 8006168:	e009      	b.n	800617e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800616a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800616e:	61fb      	str	r3, [r7, #28]
        break;
 8006170:	e005      	b.n	800617e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800617c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d077      	beq.n	8006274 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	005a      	lsls	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	085b      	lsrs	r3, r3, #1
 800618e:	441a      	add	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	2b0f      	cmp	r3, #15
 800619e:	d916      	bls.n	80061ce <UART_SetConfig+0x4a6>
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a6:	d212      	bcs.n	80061ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f023 030f 	bic.w	r3, r3, #15
 80061b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	b29a      	uxth	r2, r3
 80061be:	8afb      	ldrh	r3, [r7, #22]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	8afa      	ldrh	r2, [r7, #22]
 80061ca:	60da      	str	r2, [r3, #12]
 80061cc:	e052      	b.n	8006274 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061d4:	e04e      	b.n	8006274 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d827      	bhi.n	800622e <UART_SetConfig+0x506>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <UART_SetConfig+0x4bc>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006219 	.word	0x08006219
 80061f0:	0800622f 	.word	0x0800622f
 80061f4:	0800621f 	.word	0x0800621f
 80061f8:	0800622f 	.word	0x0800622f
 80061fc:	0800622f 	.word	0x0800622f
 8006200:	0800622f 	.word	0x0800622f
 8006204:	08006227 	.word	0x08006227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006208:	f7fe fb18 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 800620c:	61f8      	str	r0, [r7, #28]
        break;
 800620e:	e014      	b.n	800623a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006210:	f7fe fb2a 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8006214:	61f8      	str	r0, [r7, #28]
        break;
 8006216:	e010      	b.n	800623a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006218:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <UART_SetConfig+0x56c>)
 800621a:	61fb      	str	r3, [r7, #28]
        break;
 800621c:	e00d      	b.n	800623a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800621e:	f7fe fa75 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8006222:	61f8      	str	r0, [r7, #28]
        break;
 8006224:	e009      	b.n	800623a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800622a:	61fb      	str	r3, [r7, #28]
        break;
 800622c:	e005      	b.n	800623a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006238:	bf00      	nop
    }

    if (pclk != 0U)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d019      	beq.n	8006274 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	085a      	lsrs	r2, r3, #1
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	441a      	add	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006252:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2b0f      	cmp	r3, #15
 8006258:	d909      	bls.n	800626e <UART_SetConfig+0x546>
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006260:	d205      	bcs.n	800626e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60da      	str	r2, [r3, #12]
 800626c:	e002      	b.n	8006274 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006280:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006284:	4618      	mov	r0, r3
 8006286:	3728      	adds	r7, #40	; 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800628e:	bf00      	nop
 8006290:	40008000 	.word	0x40008000
 8006294:	00f42400 	.word	0x00f42400

08006298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01a      	beq.n	80063ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006396:	d10a      	bne.n	80063ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]
  }
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063ec:	f7fc fd54 	bl	8002e98 <HAL_GetTick>
 80063f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d10e      	bne.n	800641e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f82d 	bl	800646e <UART_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e023      	b.n	8006466 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b04      	cmp	r3, #4
 800642a:	d10e      	bne.n	800644a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800642c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f817 	bl	800646e <UART_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e00d      	b.n	8006466 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b09c      	sub	sp, #112	; 0x70
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	4613      	mov	r3, r2
 800647c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800647e:	e0a5      	b.n	80065cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006486:	f000 80a1 	beq.w	80065cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800648a:	f7fc fd05 	bl	8002e98 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006496:	429a      	cmp	r2, r3
 8006498:	d302      	bcc.n	80064a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800649a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800649c:	2b00      	cmp	r3, #0
 800649e:	d13e      	bne.n	800651e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064b4:	667b      	str	r3, [r7, #100]	; 0x64
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e6      	bne.n	80064a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3308      	adds	r3, #8
 80064d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e4:	f023 0301 	bic.w	r3, r3, #1
 80064e8:	663b      	str	r3, [r7, #96]	; 0x60
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80064f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e5      	bne.n	80064d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2220      	movs	r2, #32
 800650a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e067      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d04f      	beq.n	80065cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653a:	d147      	bne.n	80065cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006544:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800655a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
 8006566:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800656a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e6      	bne.n	8006546 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3308      	adds	r3, #8
 800657e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	613b      	str	r3, [r7, #16]
   return(result);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006598:	623a      	str	r2, [r7, #32]
 800659a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	69f9      	ldr	r1, [r7, #28]
 800659e:	6a3a      	ldr	r2, [r7, #32]
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e010      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	69da      	ldr	r2, [r3, #28]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	4013      	ands	r3, r2
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	429a      	cmp	r2, r3
 80065da:	bf0c      	ite	eq
 80065dc:	2301      	moveq	r3, #1
 80065de:	2300      	movne	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	461a      	mov	r2, r3
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	f43f af4a 	beq.w	8006480 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3770      	adds	r7, #112	; 0x70
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <__errno>:
 80065f8:	4b01      	ldr	r3, [pc, #4]	; (8006600 <__errno+0x8>)
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20000018 	.word	0x20000018

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	4d0d      	ldr	r5, [pc, #52]	; (800663c <__libc_init_array+0x38>)
 8006608:	4c0d      	ldr	r4, [pc, #52]	; (8006640 <__libc_init_array+0x3c>)
 800660a:	1b64      	subs	r4, r4, r5
 800660c:	10a4      	asrs	r4, r4, #2
 800660e:	2600      	movs	r6, #0
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	4d0b      	ldr	r5, [pc, #44]	; (8006644 <__libc_init_array+0x40>)
 8006616:	4c0c      	ldr	r4, [pc, #48]	; (8006648 <__libc_init_array+0x44>)
 8006618:	f001 f82c 	bl	8007674 <_init>
 800661c:	1b64      	subs	r4, r4, r5
 800661e:	10a4      	asrs	r4, r4, #2
 8006620:	2600      	movs	r6, #0
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	f855 3b04 	ldr.w	r3, [r5], #4
 800662c:	4798      	blx	r3
 800662e:	3601      	adds	r6, #1
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	f855 3b04 	ldr.w	r3, [r5], #4
 8006636:	4798      	blx	r3
 8006638:	3601      	adds	r6, #1
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	08007d6c 	.word	0x08007d6c
 8006640:	08007d6c 	.word	0x08007d6c
 8006644:	08007d6c 	.word	0x08007d6c
 8006648:	08007d70 	.word	0x08007d70

0800664c <malloc>:
 800664c:	4b02      	ldr	r3, [pc, #8]	; (8006658 <malloc+0xc>)
 800664e:	4601      	mov	r1, r0
 8006650:	6818      	ldr	r0, [r3, #0]
 8006652:	f000 b877 	b.w	8006744 <_malloc_r>
 8006656:	bf00      	nop
 8006658:	20000018 	.word	0x20000018

0800665c <memset>:
 800665c:	4402      	add	r2, r0
 800665e:	4603      	mov	r3, r0
 8006660:	4293      	cmp	r3, r2
 8006662:	d100      	bne.n	8006666 <memset+0xa>
 8006664:	4770      	bx	lr
 8006666:	f803 1b01 	strb.w	r1, [r3], #1
 800666a:	e7f9      	b.n	8006660 <memset+0x4>

0800666c <_free_r>:
 800666c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800666e:	2900      	cmp	r1, #0
 8006670:	d044      	beq.n	80066fc <_free_r+0x90>
 8006672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006676:	9001      	str	r0, [sp, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	f1a1 0404 	sub.w	r4, r1, #4
 800667e:	bfb8      	it	lt
 8006680:	18e4      	addlt	r4, r4, r3
 8006682:	f000 fc51 	bl	8006f28 <__malloc_lock>
 8006686:	4a1e      	ldr	r2, [pc, #120]	; (8006700 <_free_r+0x94>)
 8006688:	9801      	ldr	r0, [sp, #4]
 800668a:	6813      	ldr	r3, [r2, #0]
 800668c:	b933      	cbnz	r3, 800669c <_free_r+0x30>
 800668e:	6063      	str	r3, [r4, #4]
 8006690:	6014      	str	r4, [r2, #0]
 8006692:	b003      	add	sp, #12
 8006694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006698:	f000 bc4c 	b.w	8006f34 <__malloc_unlock>
 800669c:	42a3      	cmp	r3, r4
 800669e:	d908      	bls.n	80066b2 <_free_r+0x46>
 80066a0:	6825      	ldr	r5, [r4, #0]
 80066a2:	1961      	adds	r1, r4, r5
 80066a4:	428b      	cmp	r3, r1
 80066a6:	bf01      	itttt	eq
 80066a8:	6819      	ldreq	r1, [r3, #0]
 80066aa:	685b      	ldreq	r3, [r3, #4]
 80066ac:	1949      	addeq	r1, r1, r5
 80066ae:	6021      	streq	r1, [r4, #0]
 80066b0:	e7ed      	b.n	800668e <_free_r+0x22>
 80066b2:	461a      	mov	r2, r3
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	b10b      	cbz	r3, 80066bc <_free_r+0x50>
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d9fa      	bls.n	80066b2 <_free_r+0x46>
 80066bc:	6811      	ldr	r1, [r2, #0]
 80066be:	1855      	adds	r5, r2, r1
 80066c0:	42a5      	cmp	r5, r4
 80066c2:	d10b      	bne.n	80066dc <_free_r+0x70>
 80066c4:	6824      	ldr	r4, [r4, #0]
 80066c6:	4421      	add	r1, r4
 80066c8:	1854      	adds	r4, r2, r1
 80066ca:	42a3      	cmp	r3, r4
 80066cc:	6011      	str	r1, [r2, #0]
 80066ce:	d1e0      	bne.n	8006692 <_free_r+0x26>
 80066d0:	681c      	ldr	r4, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	6053      	str	r3, [r2, #4]
 80066d6:	4421      	add	r1, r4
 80066d8:	6011      	str	r1, [r2, #0]
 80066da:	e7da      	b.n	8006692 <_free_r+0x26>
 80066dc:	d902      	bls.n	80066e4 <_free_r+0x78>
 80066de:	230c      	movs	r3, #12
 80066e0:	6003      	str	r3, [r0, #0]
 80066e2:	e7d6      	b.n	8006692 <_free_r+0x26>
 80066e4:	6825      	ldr	r5, [r4, #0]
 80066e6:	1961      	adds	r1, r4, r5
 80066e8:	428b      	cmp	r3, r1
 80066ea:	bf04      	itt	eq
 80066ec:	6819      	ldreq	r1, [r3, #0]
 80066ee:	685b      	ldreq	r3, [r3, #4]
 80066f0:	6063      	str	r3, [r4, #4]
 80066f2:	bf04      	itt	eq
 80066f4:	1949      	addeq	r1, r1, r5
 80066f6:	6021      	streq	r1, [r4, #0]
 80066f8:	6054      	str	r4, [r2, #4]
 80066fa:	e7ca      	b.n	8006692 <_free_r+0x26>
 80066fc:	b003      	add	sp, #12
 80066fe:	bd30      	pop	{r4, r5, pc}
 8006700:	2000064c 	.word	0x2000064c

08006704 <sbrk_aligned>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	4e0e      	ldr	r6, [pc, #56]	; (8006740 <sbrk_aligned+0x3c>)
 8006708:	460c      	mov	r4, r1
 800670a:	6831      	ldr	r1, [r6, #0]
 800670c:	4605      	mov	r5, r0
 800670e:	b911      	cbnz	r1, 8006716 <sbrk_aligned+0x12>
 8006710:	f000 f91a 	bl	8006948 <_sbrk_r>
 8006714:	6030      	str	r0, [r6, #0]
 8006716:	4621      	mov	r1, r4
 8006718:	4628      	mov	r0, r5
 800671a:	f000 f915 	bl	8006948 <_sbrk_r>
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	d00a      	beq.n	8006738 <sbrk_aligned+0x34>
 8006722:	1cc4      	adds	r4, r0, #3
 8006724:	f024 0403 	bic.w	r4, r4, #3
 8006728:	42a0      	cmp	r0, r4
 800672a:	d007      	beq.n	800673c <sbrk_aligned+0x38>
 800672c:	1a21      	subs	r1, r4, r0
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f90a 	bl	8006948 <_sbrk_r>
 8006734:	3001      	adds	r0, #1
 8006736:	d101      	bne.n	800673c <sbrk_aligned+0x38>
 8006738:	f04f 34ff 	mov.w	r4, #4294967295
 800673c:	4620      	mov	r0, r4
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	20000650 	.word	0x20000650

08006744 <_malloc_r>:
 8006744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006748:	1ccd      	adds	r5, r1, #3
 800674a:	f025 0503 	bic.w	r5, r5, #3
 800674e:	3508      	adds	r5, #8
 8006750:	2d0c      	cmp	r5, #12
 8006752:	bf38      	it	cc
 8006754:	250c      	movcc	r5, #12
 8006756:	2d00      	cmp	r5, #0
 8006758:	4607      	mov	r7, r0
 800675a:	db01      	blt.n	8006760 <_malloc_r+0x1c>
 800675c:	42a9      	cmp	r1, r5
 800675e:	d905      	bls.n	800676c <_malloc_r+0x28>
 8006760:	230c      	movs	r3, #12
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	2600      	movs	r6, #0
 8006766:	4630      	mov	r0, r6
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	4e2e      	ldr	r6, [pc, #184]	; (8006828 <_malloc_r+0xe4>)
 800676e:	f000 fbdb 	bl	8006f28 <__malloc_lock>
 8006772:	6833      	ldr	r3, [r6, #0]
 8006774:	461c      	mov	r4, r3
 8006776:	bb34      	cbnz	r4, 80067c6 <_malloc_r+0x82>
 8006778:	4629      	mov	r1, r5
 800677a:	4638      	mov	r0, r7
 800677c:	f7ff ffc2 	bl	8006704 <sbrk_aligned>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	4604      	mov	r4, r0
 8006784:	d14d      	bne.n	8006822 <_malloc_r+0xde>
 8006786:	6834      	ldr	r4, [r6, #0]
 8006788:	4626      	mov	r6, r4
 800678a:	2e00      	cmp	r6, #0
 800678c:	d140      	bne.n	8006810 <_malloc_r+0xcc>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	4631      	mov	r1, r6
 8006792:	4638      	mov	r0, r7
 8006794:	eb04 0803 	add.w	r8, r4, r3
 8006798:	f000 f8d6 	bl	8006948 <_sbrk_r>
 800679c:	4580      	cmp	r8, r0
 800679e:	d13a      	bne.n	8006816 <_malloc_r+0xd2>
 80067a0:	6821      	ldr	r1, [r4, #0]
 80067a2:	3503      	adds	r5, #3
 80067a4:	1a6d      	subs	r5, r5, r1
 80067a6:	f025 0503 	bic.w	r5, r5, #3
 80067aa:	3508      	adds	r5, #8
 80067ac:	2d0c      	cmp	r5, #12
 80067ae:	bf38      	it	cc
 80067b0:	250c      	movcc	r5, #12
 80067b2:	4629      	mov	r1, r5
 80067b4:	4638      	mov	r0, r7
 80067b6:	f7ff ffa5 	bl	8006704 <sbrk_aligned>
 80067ba:	3001      	adds	r0, #1
 80067bc:	d02b      	beq.n	8006816 <_malloc_r+0xd2>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	442b      	add	r3, r5
 80067c2:	6023      	str	r3, [r4, #0]
 80067c4:	e00e      	b.n	80067e4 <_malloc_r+0xa0>
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	1b52      	subs	r2, r2, r5
 80067ca:	d41e      	bmi.n	800680a <_malloc_r+0xc6>
 80067cc:	2a0b      	cmp	r2, #11
 80067ce:	d916      	bls.n	80067fe <_malloc_r+0xba>
 80067d0:	1961      	adds	r1, r4, r5
 80067d2:	42a3      	cmp	r3, r4
 80067d4:	6025      	str	r5, [r4, #0]
 80067d6:	bf18      	it	ne
 80067d8:	6059      	strne	r1, [r3, #4]
 80067da:	6863      	ldr	r3, [r4, #4]
 80067dc:	bf08      	it	eq
 80067de:	6031      	streq	r1, [r6, #0]
 80067e0:	5162      	str	r2, [r4, r5]
 80067e2:	604b      	str	r3, [r1, #4]
 80067e4:	4638      	mov	r0, r7
 80067e6:	f104 060b 	add.w	r6, r4, #11
 80067ea:	f000 fba3 	bl	8006f34 <__malloc_unlock>
 80067ee:	f026 0607 	bic.w	r6, r6, #7
 80067f2:	1d23      	adds	r3, r4, #4
 80067f4:	1af2      	subs	r2, r6, r3
 80067f6:	d0b6      	beq.n	8006766 <_malloc_r+0x22>
 80067f8:	1b9b      	subs	r3, r3, r6
 80067fa:	50a3      	str	r3, [r4, r2]
 80067fc:	e7b3      	b.n	8006766 <_malloc_r+0x22>
 80067fe:	6862      	ldr	r2, [r4, #4]
 8006800:	42a3      	cmp	r3, r4
 8006802:	bf0c      	ite	eq
 8006804:	6032      	streq	r2, [r6, #0]
 8006806:	605a      	strne	r2, [r3, #4]
 8006808:	e7ec      	b.n	80067e4 <_malloc_r+0xa0>
 800680a:	4623      	mov	r3, r4
 800680c:	6864      	ldr	r4, [r4, #4]
 800680e:	e7b2      	b.n	8006776 <_malloc_r+0x32>
 8006810:	4634      	mov	r4, r6
 8006812:	6876      	ldr	r6, [r6, #4]
 8006814:	e7b9      	b.n	800678a <_malloc_r+0x46>
 8006816:	230c      	movs	r3, #12
 8006818:	603b      	str	r3, [r7, #0]
 800681a:	4638      	mov	r0, r7
 800681c:	f000 fb8a 	bl	8006f34 <__malloc_unlock>
 8006820:	e7a1      	b.n	8006766 <_malloc_r+0x22>
 8006822:	6025      	str	r5, [r4, #0]
 8006824:	e7de      	b.n	80067e4 <_malloc_r+0xa0>
 8006826:	bf00      	nop
 8006828:	2000064c 	.word	0x2000064c

0800682c <iprintf>:
 800682c:	b40f      	push	{r0, r1, r2, r3}
 800682e:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <iprintf+0x2c>)
 8006830:	b513      	push	{r0, r1, r4, lr}
 8006832:	681c      	ldr	r4, [r3, #0]
 8006834:	b124      	cbz	r4, 8006840 <iprintf+0x14>
 8006836:	69a3      	ldr	r3, [r4, #24]
 8006838:	b913      	cbnz	r3, 8006840 <iprintf+0x14>
 800683a:	4620      	mov	r0, r4
 800683c:	f000 fa6e 	bl	8006d1c <__sinit>
 8006840:	ab05      	add	r3, sp, #20
 8006842:	9a04      	ldr	r2, [sp, #16]
 8006844:	68a1      	ldr	r1, [r4, #8]
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	4620      	mov	r0, r4
 800684a:	f000 fba3 	bl	8006f94 <_vfiprintf_r>
 800684e:	b002      	add	sp, #8
 8006850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006854:	b004      	add	sp, #16
 8006856:	4770      	bx	lr
 8006858:	20000018 	.word	0x20000018

0800685c <_puts_r>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	460e      	mov	r6, r1
 8006860:	4605      	mov	r5, r0
 8006862:	b118      	cbz	r0, 800686c <_puts_r+0x10>
 8006864:	6983      	ldr	r3, [r0, #24]
 8006866:	b90b      	cbnz	r3, 800686c <_puts_r+0x10>
 8006868:	f000 fa58 	bl	8006d1c <__sinit>
 800686c:	69ab      	ldr	r3, [r5, #24]
 800686e:	68ac      	ldr	r4, [r5, #8]
 8006870:	b913      	cbnz	r3, 8006878 <_puts_r+0x1c>
 8006872:	4628      	mov	r0, r5
 8006874:	f000 fa52 	bl	8006d1c <__sinit>
 8006878:	4b2c      	ldr	r3, [pc, #176]	; (800692c <_puts_r+0xd0>)
 800687a:	429c      	cmp	r4, r3
 800687c:	d120      	bne.n	80068c0 <_puts_r+0x64>
 800687e:	686c      	ldr	r4, [r5, #4]
 8006880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006882:	07db      	lsls	r3, r3, #31
 8006884:	d405      	bmi.n	8006892 <_puts_r+0x36>
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	0598      	lsls	r0, r3, #22
 800688a:	d402      	bmi.n	8006892 <_puts_r+0x36>
 800688c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800688e:	f000 fae3 	bl	8006e58 <__retarget_lock_acquire_recursive>
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	0719      	lsls	r1, r3, #28
 8006896:	d51d      	bpl.n	80068d4 <_puts_r+0x78>
 8006898:	6923      	ldr	r3, [r4, #16]
 800689a:	b1db      	cbz	r3, 80068d4 <_puts_r+0x78>
 800689c:	3e01      	subs	r6, #1
 800689e:	68a3      	ldr	r3, [r4, #8]
 80068a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068a4:	3b01      	subs	r3, #1
 80068a6:	60a3      	str	r3, [r4, #8]
 80068a8:	bb39      	cbnz	r1, 80068fa <_puts_r+0x9e>
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	da38      	bge.n	8006920 <_puts_r+0xc4>
 80068ae:	4622      	mov	r2, r4
 80068b0:	210a      	movs	r1, #10
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 f858 	bl	8006968 <__swbuf_r>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d011      	beq.n	80068e0 <_puts_r+0x84>
 80068bc:	250a      	movs	r5, #10
 80068be:	e011      	b.n	80068e4 <_puts_r+0x88>
 80068c0:	4b1b      	ldr	r3, [pc, #108]	; (8006930 <_puts_r+0xd4>)
 80068c2:	429c      	cmp	r4, r3
 80068c4:	d101      	bne.n	80068ca <_puts_r+0x6e>
 80068c6:	68ac      	ldr	r4, [r5, #8]
 80068c8:	e7da      	b.n	8006880 <_puts_r+0x24>
 80068ca:	4b1a      	ldr	r3, [pc, #104]	; (8006934 <_puts_r+0xd8>)
 80068cc:	429c      	cmp	r4, r3
 80068ce:	bf08      	it	eq
 80068d0:	68ec      	ldreq	r4, [r5, #12]
 80068d2:	e7d5      	b.n	8006880 <_puts_r+0x24>
 80068d4:	4621      	mov	r1, r4
 80068d6:	4628      	mov	r0, r5
 80068d8:	f000 f898 	bl	8006a0c <__swsetup_r>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d0dd      	beq.n	800689c <_puts_r+0x40>
 80068e0:	f04f 35ff 	mov.w	r5, #4294967295
 80068e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068e6:	07da      	lsls	r2, r3, #31
 80068e8:	d405      	bmi.n	80068f6 <_puts_r+0x9a>
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	059b      	lsls	r3, r3, #22
 80068ee:	d402      	bmi.n	80068f6 <_puts_r+0x9a>
 80068f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068f2:	f000 fab2 	bl	8006e5a <__retarget_lock_release_recursive>
 80068f6:	4628      	mov	r0, r5
 80068f8:	bd70      	pop	{r4, r5, r6, pc}
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	da04      	bge.n	8006908 <_puts_r+0xac>
 80068fe:	69a2      	ldr	r2, [r4, #24]
 8006900:	429a      	cmp	r2, r3
 8006902:	dc06      	bgt.n	8006912 <_puts_r+0xb6>
 8006904:	290a      	cmp	r1, #10
 8006906:	d004      	beq.n	8006912 <_puts_r+0xb6>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	6022      	str	r2, [r4, #0]
 800690e:	7019      	strb	r1, [r3, #0]
 8006910:	e7c5      	b.n	800689e <_puts_r+0x42>
 8006912:	4622      	mov	r2, r4
 8006914:	4628      	mov	r0, r5
 8006916:	f000 f827 	bl	8006968 <__swbuf_r>
 800691a:	3001      	adds	r0, #1
 800691c:	d1bf      	bne.n	800689e <_puts_r+0x42>
 800691e:	e7df      	b.n	80068e0 <_puts_r+0x84>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	250a      	movs	r5, #10
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	6022      	str	r2, [r4, #0]
 8006928:	701d      	strb	r5, [r3, #0]
 800692a:	e7db      	b.n	80068e4 <_puts_r+0x88>
 800692c:	08007cf0 	.word	0x08007cf0
 8006930:	08007d10 	.word	0x08007d10
 8006934:	08007cd0 	.word	0x08007cd0

08006938 <puts>:
 8006938:	4b02      	ldr	r3, [pc, #8]	; (8006944 <puts+0xc>)
 800693a:	4601      	mov	r1, r0
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	f7ff bf8d 	b.w	800685c <_puts_r>
 8006942:	bf00      	nop
 8006944:	20000018 	.word	0x20000018

08006948 <_sbrk_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d06      	ldr	r5, [pc, #24]	; (8006964 <_sbrk_r+0x1c>)
 800694c:	2300      	movs	r3, #0
 800694e:	4604      	mov	r4, r0
 8006950:	4608      	mov	r0, r1
 8006952:	602b      	str	r3, [r5, #0]
 8006954:	f7fa f8e0 	bl	8000b18 <_sbrk>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d102      	bne.n	8006962 <_sbrk_r+0x1a>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	b103      	cbz	r3, 8006962 <_sbrk_r+0x1a>
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	bd38      	pop	{r3, r4, r5, pc}
 8006964:	20000658 	.word	0x20000658

08006968 <__swbuf_r>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	460e      	mov	r6, r1
 800696c:	4614      	mov	r4, r2
 800696e:	4605      	mov	r5, r0
 8006970:	b118      	cbz	r0, 800697a <__swbuf_r+0x12>
 8006972:	6983      	ldr	r3, [r0, #24]
 8006974:	b90b      	cbnz	r3, 800697a <__swbuf_r+0x12>
 8006976:	f000 f9d1 	bl	8006d1c <__sinit>
 800697a:	4b21      	ldr	r3, [pc, #132]	; (8006a00 <__swbuf_r+0x98>)
 800697c:	429c      	cmp	r4, r3
 800697e:	d12b      	bne.n	80069d8 <__swbuf_r+0x70>
 8006980:	686c      	ldr	r4, [r5, #4]
 8006982:	69a3      	ldr	r3, [r4, #24]
 8006984:	60a3      	str	r3, [r4, #8]
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	071a      	lsls	r2, r3, #28
 800698a:	d52f      	bpl.n	80069ec <__swbuf_r+0x84>
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	b36b      	cbz	r3, 80069ec <__swbuf_r+0x84>
 8006990:	6923      	ldr	r3, [r4, #16]
 8006992:	6820      	ldr	r0, [r4, #0]
 8006994:	1ac0      	subs	r0, r0, r3
 8006996:	6963      	ldr	r3, [r4, #20]
 8006998:	b2f6      	uxtb	r6, r6
 800699a:	4283      	cmp	r3, r0
 800699c:	4637      	mov	r7, r6
 800699e:	dc04      	bgt.n	80069aa <__swbuf_r+0x42>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f926 	bl	8006bf4 <_fflush_r>
 80069a8:	bb30      	cbnz	r0, 80069f8 <__swbuf_r+0x90>
 80069aa:	68a3      	ldr	r3, [r4, #8]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	60a3      	str	r3, [r4, #8]
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	6022      	str	r2, [r4, #0]
 80069b6:	701e      	strb	r6, [r3, #0]
 80069b8:	6963      	ldr	r3, [r4, #20]
 80069ba:	3001      	adds	r0, #1
 80069bc:	4283      	cmp	r3, r0
 80069be:	d004      	beq.n	80069ca <__swbuf_r+0x62>
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	07db      	lsls	r3, r3, #31
 80069c4:	d506      	bpl.n	80069d4 <__swbuf_r+0x6c>
 80069c6:	2e0a      	cmp	r6, #10
 80069c8:	d104      	bne.n	80069d4 <__swbuf_r+0x6c>
 80069ca:	4621      	mov	r1, r4
 80069cc:	4628      	mov	r0, r5
 80069ce:	f000 f911 	bl	8006bf4 <_fflush_r>
 80069d2:	b988      	cbnz	r0, 80069f8 <__swbuf_r+0x90>
 80069d4:	4638      	mov	r0, r7
 80069d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <__swbuf_r+0x9c>)
 80069da:	429c      	cmp	r4, r3
 80069dc:	d101      	bne.n	80069e2 <__swbuf_r+0x7a>
 80069de:	68ac      	ldr	r4, [r5, #8]
 80069e0:	e7cf      	b.n	8006982 <__swbuf_r+0x1a>
 80069e2:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <__swbuf_r+0xa0>)
 80069e4:	429c      	cmp	r4, r3
 80069e6:	bf08      	it	eq
 80069e8:	68ec      	ldreq	r4, [r5, #12]
 80069ea:	e7ca      	b.n	8006982 <__swbuf_r+0x1a>
 80069ec:	4621      	mov	r1, r4
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 f80c 	bl	8006a0c <__swsetup_r>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d0cb      	beq.n	8006990 <__swbuf_r+0x28>
 80069f8:	f04f 37ff 	mov.w	r7, #4294967295
 80069fc:	e7ea      	b.n	80069d4 <__swbuf_r+0x6c>
 80069fe:	bf00      	nop
 8006a00:	08007cf0 	.word	0x08007cf0
 8006a04:	08007d10 	.word	0x08007d10
 8006a08:	08007cd0 	.word	0x08007cd0

08006a0c <__swsetup_r>:
 8006a0c:	4b32      	ldr	r3, [pc, #200]	; (8006ad8 <__swsetup_r+0xcc>)
 8006a0e:	b570      	push	{r4, r5, r6, lr}
 8006a10:	681d      	ldr	r5, [r3, #0]
 8006a12:	4606      	mov	r6, r0
 8006a14:	460c      	mov	r4, r1
 8006a16:	b125      	cbz	r5, 8006a22 <__swsetup_r+0x16>
 8006a18:	69ab      	ldr	r3, [r5, #24]
 8006a1a:	b913      	cbnz	r3, 8006a22 <__swsetup_r+0x16>
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f000 f97d 	bl	8006d1c <__sinit>
 8006a22:	4b2e      	ldr	r3, [pc, #184]	; (8006adc <__swsetup_r+0xd0>)
 8006a24:	429c      	cmp	r4, r3
 8006a26:	d10f      	bne.n	8006a48 <__swsetup_r+0x3c>
 8006a28:	686c      	ldr	r4, [r5, #4]
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a30:	0719      	lsls	r1, r3, #28
 8006a32:	d42c      	bmi.n	8006a8e <__swsetup_r+0x82>
 8006a34:	06dd      	lsls	r5, r3, #27
 8006a36:	d411      	bmi.n	8006a5c <__swsetup_r+0x50>
 8006a38:	2309      	movs	r3, #9
 8006a3a:	6033      	str	r3, [r6, #0]
 8006a3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a40:	81a3      	strh	r3, [r4, #12]
 8006a42:	f04f 30ff 	mov.w	r0, #4294967295
 8006a46:	e03e      	b.n	8006ac6 <__swsetup_r+0xba>
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <__swsetup_r+0xd4>)
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	d101      	bne.n	8006a52 <__swsetup_r+0x46>
 8006a4e:	68ac      	ldr	r4, [r5, #8]
 8006a50:	e7eb      	b.n	8006a2a <__swsetup_r+0x1e>
 8006a52:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <__swsetup_r+0xd8>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	bf08      	it	eq
 8006a58:	68ec      	ldreq	r4, [r5, #12]
 8006a5a:	e7e6      	b.n	8006a2a <__swsetup_r+0x1e>
 8006a5c:	0758      	lsls	r0, r3, #29
 8006a5e:	d512      	bpl.n	8006a86 <__swsetup_r+0x7a>
 8006a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a62:	b141      	cbz	r1, 8006a76 <__swsetup_r+0x6a>
 8006a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	d002      	beq.n	8006a72 <__swsetup_r+0x66>
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	f7ff fdfd 	bl	800666c <_free_r>
 8006a72:	2300      	movs	r3, #0
 8006a74:	6363      	str	r3, [r4, #52]	; 0x34
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6063      	str	r3, [r4, #4]
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	f043 0308 	orr.w	r3, r3, #8
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	b94b      	cbnz	r3, 8006aa6 <__swsetup_r+0x9a>
 8006a92:	89a3      	ldrh	r3, [r4, #12]
 8006a94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a9c:	d003      	beq.n	8006aa6 <__swsetup_r+0x9a>
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f000 fa01 	bl	8006ea8 <__smakebuf_r>
 8006aa6:	89a0      	ldrh	r0, [r4, #12]
 8006aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aac:	f010 0301 	ands.w	r3, r0, #1
 8006ab0:	d00a      	beq.n	8006ac8 <__swsetup_r+0xbc>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60a3      	str	r3, [r4, #8]
 8006ab6:	6963      	ldr	r3, [r4, #20]
 8006ab8:	425b      	negs	r3, r3
 8006aba:	61a3      	str	r3, [r4, #24]
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	b943      	cbnz	r3, 8006ad2 <__swsetup_r+0xc6>
 8006ac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ac4:	d1ba      	bne.n	8006a3c <__swsetup_r+0x30>
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	0781      	lsls	r1, r0, #30
 8006aca:	bf58      	it	pl
 8006acc:	6963      	ldrpl	r3, [r4, #20]
 8006ace:	60a3      	str	r3, [r4, #8]
 8006ad0:	e7f4      	b.n	8006abc <__swsetup_r+0xb0>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e7f7      	b.n	8006ac6 <__swsetup_r+0xba>
 8006ad6:	bf00      	nop
 8006ad8:	20000018 	.word	0x20000018
 8006adc:	08007cf0 	.word	0x08007cf0
 8006ae0:	08007d10 	.word	0x08007d10
 8006ae4:	08007cd0 	.word	0x08007cd0

08006ae8 <__sflush_r>:
 8006ae8:	898a      	ldrh	r2, [r1, #12]
 8006aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aee:	4605      	mov	r5, r0
 8006af0:	0710      	lsls	r0, r2, #28
 8006af2:	460c      	mov	r4, r1
 8006af4:	d458      	bmi.n	8006ba8 <__sflush_r+0xc0>
 8006af6:	684b      	ldr	r3, [r1, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dc05      	bgt.n	8006b08 <__sflush_r+0x20>
 8006afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dc02      	bgt.n	8006b08 <__sflush_r+0x20>
 8006b02:	2000      	movs	r0, #0
 8006b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d0f9      	beq.n	8006b02 <__sflush_r+0x1a>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b14:	682f      	ldr	r7, [r5, #0]
 8006b16:	602b      	str	r3, [r5, #0]
 8006b18:	d032      	beq.n	8006b80 <__sflush_r+0x98>
 8006b1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	075a      	lsls	r2, r3, #29
 8006b20:	d505      	bpl.n	8006b2e <__sflush_r+0x46>
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	1ac0      	subs	r0, r0, r3
 8006b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b28:	b10b      	cbz	r3, 8006b2e <__sflush_r+0x46>
 8006b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b2c:	1ac0      	subs	r0, r0, r3
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4602      	mov	r2, r0
 8006b32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b34:	6a21      	ldr	r1, [r4, #32]
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b0      	blx	r6
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	d106      	bne.n	8006b4e <__sflush_r+0x66>
 8006b40:	6829      	ldr	r1, [r5, #0]
 8006b42:	291d      	cmp	r1, #29
 8006b44:	d82c      	bhi.n	8006ba0 <__sflush_r+0xb8>
 8006b46:	4a2a      	ldr	r2, [pc, #168]	; (8006bf0 <__sflush_r+0x108>)
 8006b48:	40ca      	lsrs	r2, r1
 8006b4a:	07d6      	lsls	r6, r2, #31
 8006b4c:	d528      	bpl.n	8006ba0 <__sflush_r+0xb8>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	6062      	str	r2, [r4, #4]
 8006b52:	04d9      	lsls	r1, r3, #19
 8006b54:	6922      	ldr	r2, [r4, #16]
 8006b56:	6022      	str	r2, [r4, #0]
 8006b58:	d504      	bpl.n	8006b64 <__sflush_r+0x7c>
 8006b5a:	1c42      	adds	r2, r0, #1
 8006b5c:	d101      	bne.n	8006b62 <__sflush_r+0x7a>
 8006b5e:	682b      	ldr	r3, [r5, #0]
 8006b60:	b903      	cbnz	r3, 8006b64 <__sflush_r+0x7c>
 8006b62:	6560      	str	r0, [r4, #84]	; 0x54
 8006b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b66:	602f      	str	r7, [r5, #0]
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	d0ca      	beq.n	8006b02 <__sflush_r+0x1a>
 8006b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b70:	4299      	cmp	r1, r3
 8006b72:	d002      	beq.n	8006b7a <__sflush_r+0x92>
 8006b74:	4628      	mov	r0, r5
 8006b76:	f7ff fd79 	bl	800666c <_free_r>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	6360      	str	r0, [r4, #52]	; 0x34
 8006b7e:	e7c1      	b.n	8006b04 <__sflush_r+0x1c>
 8006b80:	6a21      	ldr	r1, [r4, #32]
 8006b82:	2301      	movs	r3, #1
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b0      	blx	r6
 8006b88:	1c41      	adds	r1, r0, #1
 8006b8a:	d1c7      	bne.n	8006b1c <__sflush_r+0x34>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0c4      	beq.n	8006b1c <__sflush_r+0x34>
 8006b92:	2b1d      	cmp	r3, #29
 8006b94:	d001      	beq.n	8006b9a <__sflush_r+0xb2>
 8006b96:	2b16      	cmp	r3, #22
 8006b98:	d101      	bne.n	8006b9e <__sflush_r+0xb6>
 8006b9a:	602f      	str	r7, [r5, #0]
 8006b9c:	e7b1      	b.n	8006b02 <__sflush_r+0x1a>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba4:	81a3      	strh	r3, [r4, #12]
 8006ba6:	e7ad      	b.n	8006b04 <__sflush_r+0x1c>
 8006ba8:	690f      	ldr	r7, [r1, #16]
 8006baa:	2f00      	cmp	r7, #0
 8006bac:	d0a9      	beq.n	8006b02 <__sflush_r+0x1a>
 8006bae:	0793      	lsls	r3, r2, #30
 8006bb0:	680e      	ldr	r6, [r1, #0]
 8006bb2:	bf08      	it	eq
 8006bb4:	694b      	ldreq	r3, [r1, #20]
 8006bb6:	600f      	str	r7, [r1, #0]
 8006bb8:	bf18      	it	ne
 8006bba:	2300      	movne	r3, #0
 8006bbc:	eba6 0807 	sub.w	r8, r6, r7
 8006bc0:	608b      	str	r3, [r1, #8]
 8006bc2:	f1b8 0f00 	cmp.w	r8, #0
 8006bc6:	dd9c      	ble.n	8006b02 <__sflush_r+0x1a>
 8006bc8:	6a21      	ldr	r1, [r4, #32]
 8006bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bcc:	4643      	mov	r3, r8
 8006bce:	463a      	mov	r2, r7
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b0      	blx	r6
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	dc06      	bgt.n	8006be6 <__sflush_r+0xfe>
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	e78e      	b.n	8006b04 <__sflush_r+0x1c>
 8006be6:	4407      	add	r7, r0
 8006be8:	eba8 0800 	sub.w	r8, r8, r0
 8006bec:	e7e9      	b.n	8006bc2 <__sflush_r+0xda>
 8006bee:	bf00      	nop
 8006bf0:	20400001 	.word	0x20400001

08006bf4 <_fflush_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	690b      	ldr	r3, [r1, #16]
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b913      	cbnz	r3, 8006c04 <_fflush_r+0x10>
 8006bfe:	2500      	movs	r5, #0
 8006c00:	4628      	mov	r0, r5
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	b118      	cbz	r0, 8006c0e <_fflush_r+0x1a>
 8006c06:	6983      	ldr	r3, [r0, #24]
 8006c08:	b90b      	cbnz	r3, 8006c0e <_fflush_r+0x1a>
 8006c0a:	f000 f887 	bl	8006d1c <__sinit>
 8006c0e:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <_fflush_r+0x6c>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	d11b      	bne.n	8006c4c <_fflush_r+0x58>
 8006c14:	686c      	ldr	r4, [r5, #4]
 8006c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0ef      	beq.n	8006bfe <_fflush_r+0xa>
 8006c1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c20:	07d0      	lsls	r0, r2, #31
 8006c22:	d404      	bmi.n	8006c2e <_fflush_r+0x3a>
 8006c24:	0599      	lsls	r1, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_fflush_r+0x3a>
 8006c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c2a:	f000 f915 	bl	8006e58 <__retarget_lock_acquire_recursive>
 8006c2e:	4628      	mov	r0, r5
 8006c30:	4621      	mov	r1, r4
 8006c32:	f7ff ff59 	bl	8006ae8 <__sflush_r>
 8006c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c38:	07da      	lsls	r2, r3, #31
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	d4e0      	bmi.n	8006c00 <_fflush_r+0xc>
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	059b      	lsls	r3, r3, #22
 8006c42:	d4dd      	bmi.n	8006c00 <_fflush_r+0xc>
 8006c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c46:	f000 f908 	bl	8006e5a <__retarget_lock_release_recursive>
 8006c4a:	e7d9      	b.n	8006c00 <_fflush_r+0xc>
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <_fflush_r+0x70>)
 8006c4e:	429c      	cmp	r4, r3
 8006c50:	d101      	bne.n	8006c56 <_fflush_r+0x62>
 8006c52:	68ac      	ldr	r4, [r5, #8]
 8006c54:	e7df      	b.n	8006c16 <_fflush_r+0x22>
 8006c56:	4b04      	ldr	r3, [pc, #16]	; (8006c68 <_fflush_r+0x74>)
 8006c58:	429c      	cmp	r4, r3
 8006c5a:	bf08      	it	eq
 8006c5c:	68ec      	ldreq	r4, [r5, #12]
 8006c5e:	e7da      	b.n	8006c16 <_fflush_r+0x22>
 8006c60:	08007cf0 	.word	0x08007cf0
 8006c64:	08007d10 	.word	0x08007d10
 8006c68:	08007cd0 	.word	0x08007cd0

08006c6c <std>:
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	4604      	mov	r4, r0
 8006c72:	e9c0 3300 	strd	r3, r3, [r0]
 8006c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c7a:	6083      	str	r3, [r0, #8]
 8006c7c:	8181      	strh	r1, [r0, #12]
 8006c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8006c80:	81c2      	strh	r2, [r0, #14]
 8006c82:	6183      	str	r3, [r0, #24]
 8006c84:	4619      	mov	r1, r3
 8006c86:	2208      	movs	r2, #8
 8006c88:	305c      	adds	r0, #92	; 0x5c
 8006c8a:	f7ff fce7 	bl	800665c <memset>
 8006c8e:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <std+0x38>)
 8006c90:	6263      	str	r3, [r4, #36]	; 0x24
 8006c92:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <std+0x3c>)
 8006c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c96:	4b05      	ldr	r3, [pc, #20]	; (8006cac <std+0x40>)
 8006c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <std+0x44>)
 8006c9c:	6224      	str	r4, [r4, #32]
 8006c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	bf00      	nop
 8006ca4:	0800751d 	.word	0x0800751d
 8006ca8:	0800753f 	.word	0x0800753f
 8006cac:	08007577 	.word	0x08007577
 8006cb0:	0800759b 	.word	0x0800759b

08006cb4 <_cleanup_r>:
 8006cb4:	4901      	ldr	r1, [pc, #4]	; (8006cbc <_cleanup_r+0x8>)
 8006cb6:	f000 b8af 	b.w	8006e18 <_fwalk_reent>
 8006cba:	bf00      	nop
 8006cbc:	08006bf5 	.word	0x08006bf5

08006cc0 <__sfmoreglue>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	2268      	movs	r2, #104	; 0x68
 8006cc4:	1e4d      	subs	r5, r1, #1
 8006cc6:	4355      	muls	r5, r2
 8006cc8:	460e      	mov	r6, r1
 8006cca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cce:	f7ff fd39 	bl	8006744 <_malloc_r>
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	b140      	cbz	r0, 8006ce8 <__sfmoreglue+0x28>
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	e9c0 1600 	strd	r1, r6, [r0]
 8006cdc:	300c      	adds	r0, #12
 8006cde:	60a0      	str	r0, [r4, #8]
 8006ce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ce4:	f7ff fcba 	bl	800665c <memset>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	bd70      	pop	{r4, r5, r6, pc}

08006cec <__sfp_lock_acquire>:
 8006cec:	4801      	ldr	r0, [pc, #4]	; (8006cf4 <__sfp_lock_acquire+0x8>)
 8006cee:	f000 b8b3 	b.w	8006e58 <__retarget_lock_acquire_recursive>
 8006cf2:	bf00      	nop
 8006cf4:	20000655 	.word	0x20000655

08006cf8 <__sfp_lock_release>:
 8006cf8:	4801      	ldr	r0, [pc, #4]	; (8006d00 <__sfp_lock_release+0x8>)
 8006cfa:	f000 b8ae 	b.w	8006e5a <__retarget_lock_release_recursive>
 8006cfe:	bf00      	nop
 8006d00:	20000655 	.word	0x20000655

08006d04 <__sinit_lock_acquire>:
 8006d04:	4801      	ldr	r0, [pc, #4]	; (8006d0c <__sinit_lock_acquire+0x8>)
 8006d06:	f000 b8a7 	b.w	8006e58 <__retarget_lock_acquire_recursive>
 8006d0a:	bf00      	nop
 8006d0c:	20000656 	.word	0x20000656

08006d10 <__sinit_lock_release>:
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <__sinit_lock_release+0x8>)
 8006d12:	f000 b8a2 	b.w	8006e5a <__retarget_lock_release_recursive>
 8006d16:	bf00      	nop
 8006d18:	20000656 	.word	0x20000656

08006d1c <__sinit>:
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	4604      	mov	r4, r0
 8006d20:	f7ff fff0 	bl	8006d04 <__sinit_lock_acquire>
 8006d24:	69a3      	ldr	r3, [r4, #24]
 8006d26:	b11b      	cbz	r3, 8006d30 <__sinit+0x14>
 8006d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d2c:	f7ff bff0 	b.w	8006d10 <__sinit_lock_release>
 8006d30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d34:	6523      	str	r3, [r4, #80]	; 0x50
 8006d36:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <__sinit+0x68>)
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <__sinit+0x6c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d3e:	42a3      	cmp	r3, r4
 8006d40:	bf04      	itt	eq
 8006d42:	2301      	moveq	r3, #1
 8006d44:	61a3      	streq	r3, [r4, #24]
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 f820 	bl	8006d8c <__sfp>
 8006d4c:	6060      	str	r0, [r4, #4]
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 f81c 	bl	8006d8c <__sfp>
 8006d54:	60a0      	str	r0, [r4, #8]
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 f818 	bl	8006d8c <__sfp>
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	60e0      	str	r0, [r4, #12]
 8006d60:	2104      	movs	r1, #4
 8006d62:	6860      	ldr	r0, [r4, #4]
 8006d64:	f7ff ff82 	bl	8006c6c <std>
 8006d68:	68a0      	ldr	r0, [r4, #8]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	2109      	movs	r1, #9
 8006d6e:	f7ff ff7d 	bl	8006c6c <std>
 8006d72:	68e0      	ldr	r0, [r4, #12]
 8006d74:	2202      	movs	r2, #2
 8006d76:	2112      	movs	r1, #18
 8006d78:	f7ff ff78 	bl	8006c6c <std>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	61a3      	str	r3, [r4, #24]
 8006d80:	e7d2      	b.n	8006d28 <__sinit+0xc>
 8006d82:	bf00      	nop
 8006d84:	08007ccc 	.word	0x08007ccc
 8006d88:	08006cb5 	.word	0x08006cb5

08006d8c <__sfp>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	4607      	mov	r7, r0
 8006d90:	f7ff ffac 	bl	8006cec <__sfp_lock_acquire>
 8006d94:	4b1e      	ldr	r3, [pc, #120]	; (8006e10 <__sfp+0x84>)
 8006d96:	681e      	ldr	r6, [r3, #0]
 8006d98:	69b3      	ldr	r3, [r6, #24]
 8006d9a:	b913      	cbnz	r3, 8006da2 <__sfp+0x16>
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f7ff ffbd 	bl	8006d1c <__sinit>
 8006da2:	3648      	adds	r6, #72	; 0x48
 8006da4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	d503      	bpl.n	8006db4 <__sfp+0x28>
 8006dac:	6833      	ldr	r3, [r6, #0]
 8006dae:	b30b      	cbz	r3, 8006df4 <__sfp+0x68>
 8006db0:	6836      	ldr	r6, [r6, #0]
 8006db2:	e7f7      	b.n	8006da4 <__sfp+0x18>
 8006db4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006db8:	b9d5      	cbnz	r5, 8006df0 <__sfp+0x64>
 8006dba:	4b16      	ldr	r3, [pc, #88]	; (8006e14 <__sfp+0x88>)
 8006dbc:	60e3      	str	r3, [r4, #12]
 8006dbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dc2:	6665      	str	r5, [r4, #100]	; 0x64
 8006dc4:	f000 f847 	bl	8006e56 <__retarget_lock_init_recursive>
 8006dc8:	f7ff ff96 	bl	8006cf8 <__sfp_lock_release>
 8006dcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006dd4:	6025      	str	r5, [r4, #0]
 8006dd6:	61a5      	str	r5, [r4, #24]
 8006dd8:	2208      	movs	r2, #8
 8006dda:	4629      	mov	r1, r5
 8006ddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006de0:	f7ff fc3c 	bl	800665c <memset>
 8006de4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006de8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006dec:	4620      	mov	r0, r4
 8006dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df0:	3468      	adds	r4, #104	; 0x68
 8006df2:	e7d9      	b.n	8006da8 <__sfp+0x1c>
 8006df4:	2104      	movs	r1, #4
 8006df6:	4638      	mov	r0, r7
 8006df8:	f7ff ff62 	bl	8006cc0 <__sfmoreglue>
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	6030      	str	r0, [r6, #0]
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d1d5      	bne.n	8006db0 <__sfp+0x24>
 8006e04:	f7ff ff78 	bl	8006cf8 <__sfp_lock_release>
 8006e08:	230c      	movs	r3, #12
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	e7ee      	b.n	8006dec <__sfp+0x60>
 8006e0e:	bf00      	nop
 8006e10:	08007ccc 	.word	0x08007ccc
 8006e14:	ffff0001 	.word	0xffff0001

08006e18 <_fwalk_reent>:
 8006e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	4688      	mov	r8, r1
 8006e20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e24:	2700      	movs	r7, #0
 8006e26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e2a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e2e:	d505      	bpl.n	8006e3c <_fwalk_reent+0x24>
 8006e30:	6824      	ldr	r4, [r4, #0]
 8006e32:	2c00      	cmp	r4, #0
 8006e34:	d1f7      	bne.n	8006e26 <_fwalk_reent+0xe>
 8006e36:	4638      	mov	r0, r7
 8006e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e3c:	89ab      	ldrh	r3, [r5, #12]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d907      	bls.n	8006e52 <_fwalk_reent+0x3a>
 8006e42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e46:	3301      	adds	r3, #1
 8006e48:	d003      	beq.n	8006e52 <_fwalk_reent+0x3a>
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	47c0      	blx	r8
 8006e50:	4307      	orrs	r7, r0
 8006e52:	3568      	adds	r5, #104	; 0x68
 8006e54:	e7e9      	b.n	8006e2a <_fwalk_reent+0x12>

08006e56 <__retarget_lock_init_recursive>:
 8006e56:	4770      	bx	lr

08006e58 <__retarget_lock_acquire_recursive>:
 8006e58:	4770      	bx	lr

08006e5a <__retarget_lock_release_recursive>:
 8006e5a:	4770      	bx	lr

08006e5c <__swhatbuf_r>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	460e      	mov	r6, r1
 8006e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e64:	2900      	cmp	r1, #0
 8006e66:	b096      	sub	sp, #88	; 0x58
 8006e68:	4614      	mov	r4, r2
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	da08      	bge.n	8006e80 <__swhatbuf_r+0x24>
 8006e6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	602a      	str	r2, [r5, #0]
 8006e76:	061a      	lsls	r2, r3, #24
 8006e78:	d410      	bmi.n	8006e9c <__swhatbuf_r+0x40>
 8006e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e7e:	e00e      	b.n	8006e9e <__swhatbuf_r+0x42>
 8006e80:	466a      	mov	r2, sp
 8006e82:	f000 fbb1 	bl	80075e8 <_fstat_r>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	dbf1      	blt.n	8006e6e <__swhatbuf_r+0x12>
 8006e8a:	9a01      	ldr	r2, [sp, #4]
 8006e8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e94:	425a      	negs	r2, r3
 8006e96:	415a      	adcs	r2, r3
 8006e98:	602a      	str	r2, [r5, #0]
 8006e9a:	e7ee      	b.n	8006e7a <__swhatbuf_r+0x1e>
 8006e9c:	2340      	movs	r3, #64	; 0x40
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	b016      	add	sp, #88	; 0x58
 8006ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ea8 <__smakebuf_r>:
 8006ea8:	898b      	ldrh	r3, [r1, #12]
 8006eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eac:	079d      	lsls	r5, r3, #30
 8006eae:	4606      	mov	r6, r0
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	d507      	bpl.n	8006ec4 <__smakebuf_r+0x1c>
 8006eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	6123      	str	r3, [r4, #16]
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	6163      	str	r3, [r4, #20]
 8006ec0:	b002      	add	sp, #8
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	ab01      	add	r3, sp, #4
 8006ec6:	466a      	mov	r2, sp
 8006ec8:	f7ff ffc8 	bl	8006e5c <__swhatbuf_r>
 8006ecc:	9900      	ldr	r1, [sp, #0]
 8006ece:	4605      	mov	r5, r0
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f7ff fc37 	bl	8006744 <_malloc_r>
 8006ed6:	b948      	cbnz	r0, 8006eec <__smakebuf_r+0x44>
 8006ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006edc:	059a      	lsls	r2, r3, #22
 8006ede:	d4ef      	bmi.n	8006ec0 <__smakebuf_r+0x18>
 8006ee0:	f023 0303 	bic.w	r3, r3, #3
 8006ee4:	f043 0302 	orr.w	r3, r3, #2
 8006ee8:	81a3      	strh	r3, [r4, #12]
 8006eea:	e7e3      	b.n	8006eb4 <__smakebuf_r+0xc>
 8006eec:	4b0d      	ldr	r3, [pc, #52]	; (8006f24 <__smakebuf_r+0x7c>)
 8006eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	6020      	str	r0, [r4, #0]
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	9b00      	ldr	r3, [sp, #0]
 8006efc:	6163      	str	r3, [r4, #20]
 8006efe:	9b01      	ldr	r3, [sp, #4]
 8006f00:	6120      	str	r0, [r4, #16]
 8006f02:	b15b      	cbz	r3, 8006f1c <__smakebuf_r+0x74>
 8006f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f000 fb7f 	bl	800760c <_isatty_r>
 8006f0e:	b128      	cbz	r0, 8006f1c <__smakebuf_r+0x74>
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	f023 0303 	bic.w	r3, r3, #3
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	81a3      	strh	r3, [r4, #12]
 8006f1c:	89a0      	ldrh	r0, [r4, #12]
 8006f1e:	4305      	orrs	r5, r0
 8006f20:	81a5      	strh	r5, [r4, #12]
 8006f22:	e7cd      	b.n	8006ec0 <__smakebuf_r+0x18>
 8006f24:	08006cb5 	.word	0x08006cb5

08006f28 <__malloc_lock>:
 8006f28:	4801      	ldr	r0, [pc, #4]	; (8006f30 <__malloc_lock+0x8>)
 8006f2a:	f7ff bf95 	b.w	8006e58 <__retarget_lock_acquire_recursive>
 8006f2e:	bf00      	nop
 8006f30:	20000654 	.word	0x20000654

08006f34 <__malloc_unlock>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__malloc_unlock+0x8>)
 8006f36:	f7ff bf90 	b.w	8006e5a <__retarget_lock_release_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20000654 	.word	0x20000654

08006f40 <__sfputc_r>:
 8006f40:	6893      	ldr	r3, [r2, #8]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	b410      	push	{r4}
 8006f48:	6093      	str	r3, [r2, #8]
 8006f4a:	da08      	bge.n	8006f5e <__sfputc_r+0x1e>
 8006f4c:	6994      	ldr	r4, [r2, #24]
 8006f4e:	42a3      	cmp	r3, r4
 8006f50:	db01      	blt.n	8006f56 <__sfputc_r+0x16>
 8006f52:	290a      	cmp	r1, #10
 8006f54:	d103      	bne.n	8006f5e <__sfputc_r+0x1e>
 8006f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f5a:	f7ff bd05 	b.w	8006968 <__swbuf_r>
 8006f5e:	6813      	ldr	r3, [r2, #0]
 8006f60:	1c58      	adds	r0, r3, #1
 8006f62:	6010      	str	r0, [r2, #0]
 8006f64:	7019      	strb	r1, [r3, #0]
 8006f66:	4608      	mov	r0, r1
 8006f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <__sfputs_r>:
 8006f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f70:	4606      	mov	r6, r0
 8006f72:	460f      	mov	r7, r1
 8006f74:	4614      	mov	r4, r2
 8006f76:	18d5      	adds	r5, r2, r3
 8006f78:	42ac      	cmp	r4, r5
 8006f7a:	d101      	bne.n	8006f80 <__sfputs_r+0x12>
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	e007      	b.n	8006f90 <__sfputs_r+0x22>
 8006f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f84:	463a      	mov	r2, r7
 8006f86:	4630      	mov	r0, r6
 8006f88:	f7ff ffda 	bl	8006f40 <__sfputc_r>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d1f3      	bne.n	8006f78 <__sfputs_r+0xa>
 8006f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f94 <_vfiprintf_r>:
 8006f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	460d      	mov	r5, r1
 8006f9a:	b09d      	sub	sp, #116	; 0x74
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	4698      	mov	r8, r3
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	b118      	cbz	r0, 8006fac <_vfiprintf_r+0x18>
 8006fa4:	6983      	ldr	r3, [r0, #24]
 8006fa6:	b90b      	cbnz	r3, 8006fac <_vfiprintf_r+0x18>
 8006fa8:	f7ff feb8 	bl	8006d1c <__sinit>
 8006fac:	4b89      	ldr	r3, [pc, #548]	; (80071d4 <_vfiprintf_r+0x240>)
 8006fae:	429d      	cmp	r5, r3
 8006fb0:	d11b      	bne.n	8006fea <_vfiprintf_r+0x56>
 8006fb2:	6875      	ldr	r5, [r6, #4]
 8006fb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fb6:	07d9      	lsls	r1, r3, #31
 8006fb8:	d405      	bmi.n	8006fc6 <_vfiprintf_r+0x32>
 8006fba:	89ab      	ldrh	r3, [r5, #12]
 8006fbc:	059a      	lsls	r2, r3, #22
 8006fbe:	d402      	bmi.n	8006fc6 <_vfiprintf_r+0x32>
 8006fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc2:	f7ff ff49 	bl	8006e58 <__retarget_lock_acquire_recursive>
 8006fc6:	89ab      	ldrh	r3, [r5, #12]
 8006fc8:	071b      	lsls	r3, r3, #28
 8006fca:	d501      	bpl.n	8006fd0 <_vfiprintf_r+0x3c>
 8006fcc:	692b      	ldr	r3, [r5, #16]
 8006fce:	b9eb      	cbnz	r3, 800700c <_vfiprintf_r+0x78>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7ff fd1a 	bl	8006a0c <__swsetup_r>
 8006fd8:	b1c0      	cbz	r0, 800700c <_vfiprintf_r+0x78>
 8006fda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fdc:	07dc      	lsls	r4, r3, #31
 8006fde:	d50e      	bpl.n	8006ffe <_vfiprintf_r+0x6a>
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	b01d      	add	sp, #116	; 0x74
 8006fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fea:	4b7b      	ldr	r3, [pc, #492]	; (80071d8 <_vfiprintf_r+0x244>)
 8006fec:	429d      	cmp	r5, r3
 8006fee:	d101      	bne.n	8006ff4 <_vfiprintf_r+0x60>
 8006ff0:	68b5      	ldr	r5, [r6, #8]
 8006ff2:	e7df      	b.n	8006fb4 <_vfiprintf_r+0x20>
 8006ff4:	4b79      	ldr	r3, [pc, #484]	; (80071dc <_vfiprintf_r+0x248>)
 8006ff6:	429d      	cmp	r5, r3
 8006ff8:	bf08      	it	eq
 8006ffa:	68f5      	ldreq	r5, [r6, #12]
 8006ffc:	e7da      	b.n	8006fb4 <_vfiprintf_r+0x20>
 8006ffe:	89ab      	ldrh	r3, [r5, #12]
 8007000:	0598      	lsls	r0, r3, #22
 8007002:	d4ed      	bmi.n	8006fe0 <_vfiprintf_r+0x4c>
 8007004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007006:	f7ff ff28 	bl	8006e5a <__retarget_lock_release_recursive>
 800700a:	e7e9      	b.n	8006fe0 <_vfiprintf_r+0x4c>
 800700c:	2300      	movs	r3, #0
 800700e:	9309      	str	r3, [sp, #36]	; 0x24
 8007010:	2320      	movs	r3, #32
 8007012:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007016:	f8cd 800c 	str.w	r8, [sp, #12]
 800701a:	2330      	movs	r3, #48	; 0x30
 800701c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071e0 <_vfiprintf_r+0x24c>
 8007020:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007024:	f04f 0901 	mov.w	r9, #1
 8007028:	4623      	mov	r3, r4
 800702a:	469a      	mov	sl, r3
 800702c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007030:	b10a      	cbz	r2, 8007036 <_vfiprintf_r+0xa2>
 8007032:	2a25      	cmp	r2, #37	; 0x25
 8007034:	d1f9      	bne.n	800702a <_vfiprintf_r+0x96>
 8007036:	ebba 0b04 	subs.w	fp, sl, r4
 800703a:	d00b      	beq.n	8007054 <_vfiprintf_r+0xc0>
 800703c:	465b      	mov	r3, fp
 800703e:	4622      	mov	r2, r4
 8007040:	4629      	mov	r1, r5
 8007042:	4630      	mov	r0, r6
 8007044:	f7ff ff93 	bl	8006f6e <__sfputs_r>
 8007048:	3001      	adds	r0, #1
 800704a:	f000 80aa 	beq.w	80071a2 <_vfiprintf_r+0x20e>
 800704e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007050:	445a      	add	r2, fp
 8007052:	9209      	str	r2, [sp, #36]	; 0x24
 8007054:	f89a 3000 	ldrb.w	r3, [sl]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 80a2 	beq.w	80071a2 <_vfiprintf_r+0x20e>
 800705e:	2300      	movs	r3, #0
 8007060:	f04f 32ff 	mov.w	r2, #4294967295
 8007064:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007068:	f10a 0a01 	add.w	sl, sl, #1
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007074:	931a      	str	r3, [sp, #104]	; 0x68
 8007076:	4654      	mov	r4, sl
 8007078:	2205      	movs	r2, #5
 800707a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800707e:	4858      	ldr	r0, [pc, #352]	; (80071e0 <_vfiprintf_r+0x24c>)
 8007080:	f7f9 f8a6 	bl	80001d0 <memchr>
 8007084:	9a04      	ldr	r2, [sp, #16]
 8007086:	b9d8      	cbnz	r0, 80070c0 <_vfiprintf_r+0x12c>
 8007088:	06d1      	lsls	r1, r2, #27
 800708a:	bf44      	itt	mi
 800708c:	2320      	movmi	r3, #32
 800708e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007092:	0713      	lsls	r3, r2, #28
 8007094:	bf44      	itt	mi
 8007096:	232b      	movmi	r3, #43	; 0x2b
 8007098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800709c:	f89a 3000 	ldrb.w	r3, [sl]
 80070a0:	2b2a      	cmp	r3, #42	; 0x2a
 80070a2:	d015      	beq.n	80070d0 <_vfiprintf_r+0x13c>
 80070a4:	9a07      	ldr	r2, [sp, #28]
 80070a6:	4654      	mov	r4, sl
 80070a8:	2000      	movs	r0, #0
 80070aa:	f04f 0c0a 	mov.w	ip, #10
 80070ae:	4621      	mov	r1, r4
 80070b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070b4:	3b30      	subs	r3, #48	; 0x30
 80070b6:	2b09      	cmp	r3, #9
 80070b8:	d94e      	bls.n	8007158 <_vfiprintf_r+0x1c4>
 80070ba:	b1b0      	cbz	r0, 80070ea <_vfiprintf_r+0x156>
 80070bc:	9207      	str	r2, [sp, #28]
 80070be:	e014      	b.n	80070ea <_vfiprintf_r+0x156>
 80070c0:	eba0 0308 	sub.w	r3, r0, r8
 80070c4:	fa09 f303 	lsl.w	r3, r9, r3
 80070c8:	4313      	orrs	r3, r2
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	46a2      	mov	sl, r4
 80070ce:	e7d2      	b.n	8007076 <_vfiprintf_r+0xe2>
 80070d0:	9b03      	ldr	r3, [sp, #12]
 80070d2:	1d19      	adds	r1, r3, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	9103      	str	r1, [sp, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bfbb      	ittet	lt
 80070dc:	425b      	neglt	r3, r3
 80070de:	f042 0202 	orrlt.w	r2, r2, #2
 80070e2:	9307      	strge	r3, [sp, #28]
 80070e4:	9307      	strlt	r3, [sp, #28]
 80070e6:	bfb8      	it	lt
 80070e8:	9204      	strlt	r2, [sp, #16]
 80070ea:	7823      	ldrb	r3, [r4, #0]
 80070ec:	2b2e      	cmp	r3, #46	; 0x2e
 80070ee:	d10c      	bne.n	800710a <_vfiprintf_r+0x176>
 80070f0:	7863      	ldrb	r3, [r4, #1]
 80070f2:	2b2a      	cmp	r3, #42	; 0x2a
 80070f4:	d135      	bne.n	8007162 <_vfiprintf_r+0x1ce>
 80070f6:	9b03      	ldr	r3, [sp, #12]
 80070f8:	1d1a      	adds	r2, r3, #4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	9203      	str	r2, [sp, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfb8      	it	lt
 8007102:	f04f 33ff 	movlt.w	r3, #4294967295
 8007106:	3402      	adds	r4, #2
 8007108:	9305      	str	r3, [sp, #20]
 800710a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80071f0 <_vfiprintf_r+0x25c>
 800710e:	7821      	ldrb	r1, [r4, #0]
 8007110:	2203      	movs	r2, #3
 8007112:	4650      	mov	r0, sl
 8007114:	f7f9 f85c 	bl	80001d0 <memchr>
 8007118:	b140      	cbz	r0, 800712c <_vfiprintf_r+0x198>
 800711a:	2340      	movs	r3, #64	; 0x40
 800711c:	eba0 000a 	sub.w	r0, r0, sl
 8007120:	fa03 f000 	lsl.w	r0, r3, r0
 8007124:	9b04      	ldr	r3, [sp, #16]
 8007126:	4303      	orrs	r3, r0
 8007128:	3401      	adds	r4, #1
 800712a:	9304      	str	r3, [sp, #16]
 800712c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007130:	482c      	ldr	r0, [pc, #176]	; (80071e4 <_vfiprintf_r+0x250>)
 8007132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007136:	2206      	movs	r2, #6
 8007138:	f7f9 f84a 	bl	80001d0 <memchr>
 800713c:	2800      	cmp	r0, #0
 800713e:	d03f      	beq.n	80071c0 <_vfiprintf_r+0x22c>
 8007140:	4b29      	ldr	r3, [pc, #164]	; (80071e8 <_vfiprintf_r+0x254>)
 8007142:	bb1b      	cbnz	r3, 800718c <_vfiprintf_r+0x1f8>
 8007144:	9b03      	ldr	r3, [sp, #12]
 8007146:	3307      	adds	r3, #7
 8007148:	f023 0307 	bic.w	r3, r3, #7
 800714c:	3308      	adds	r3, #8
 800714e:	9303      	str	r3, [sp, #12]
 8007150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007152:	443b      	add	r3, r7
 8007154:	9309      	str	r3, [sp, #36]	; 0x24
 8007156:	e767      	b.n	8007028 <_vfiprintf_r+0x94>
 8007158:	fb0c 3202 	mla	r2, ip, r2, r3
 800715c:	460c      	mov	r4, r1
 800715e:	2001      	movs	r0, #1
 8007160:	e7a5      	b.n	80070ae <_vfiprintf_r+0x11a>
 8007162:	2300      	movs	r3, #0
 8007164:	3401      	adds	r4, #1
 8007166:	9305      	str	r3, [sp, #20]
 8007168:	4619      	mov	r1, r3
 800716a:	f04f 0c0a 	mov.w	ip, #10
 800716e:	4620      	mov	r0, r4
 8007170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007174:	3a30      	subs	r2, #48	; 0x30
 8007176:	2a09      	cmp	r2, #9
 8007178:	d903      	bls.n	8007182 <_vfiprintf_r+0x1ee>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0c5      	beq.n	800710a <_vfiprintf_r+0x176>
 800717e:	9105      	str	r1, [sp, #20]
 8007180:	e7c3      	b.n	800710a <_vfiprintf_r+0x176>
 8007182:	fb0c 2101 	mla	r1, ip, r1, r2
 8007186:	4604      	mov	r4, r0
 8007188:	2301      	movs	r3, #1
 800718a:	e7f0      	b.n	800716e <_vfiprintf_r+0x1da>
 800718c:	ab03      	add	r3, sp, #12
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	462a      	mov	r2, r5
 8007192:	4b16      	ldr	r3, [pc, #88]	; (80071ec <_vfiprintf_r+0x258>)
 8007194:	a904      	add	r1, sp, #16
 8007196:	4630      	mov	r0, r6
 8007198:	f3af 8000 	nop.w
 800719c:	4607      	mov	r7, r0
 800719e:	1c78      	adds	r0, r7, #1
 80071a0:	d1d6      	bne.n	8007150 <_vfiprintf_r+0x1bc>
 80071a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071a4:	07d9      	lsls	r1, r3, #31
 80071a6:	d405      	bmi.n	80071b4 <_vfiprintf_r+0x220>
 80071a8:	89ab      	ldrh	r3, [r5, #12]
 80071aa:	059a      	lsls	r2, r3, #22
 80071ac:	d402      	bmi.n	80071b4 <_vfiprintf_r+0x220>
 80071ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071b0:	f7ff fe53 	bl	8006e5a <__retarget_lock_release_recursive>
 80071b4:	89ab      	ldrh	r3, [r5, #12]
 80071b6:	065b      	lsls	r3, r3, #25
 80071b8:	f53f af12 	bmi.w	8006fe0 <_vfiprintf_r+0x4c>
 80071bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071be:	e711      	b.n	8006fe4 <_vfiprintf_r+0x50>
 80071c0:	ab03      	add	r3, sp, #12
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	462a      	mov	r2, r5
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <_vfiprintf_r+0x258>)
 80071c8:	a904      	add	r1, sp, #16
 80071ca:	4630      	mov	r0, r6
 80071cc:	f000 f880 	bl	80072d0 <_printf_i>
 80071d0:	e7e4      	b.n	800719c <_vfiprintf_r+0x208>
 80071d2:	bf00      	nop
 80071d4:	08007cf0 	.word	0x08007cf0
 80071d8:	08007d10 	.word	0x08007d10
 80071dc:	08007cd0 	.word	0x08007cd0
 80071e0:	08007d30 	.word	0x08007d30
 80071e4:	08007d3a 	.word	0x08007d3a
 80071e8:	00000000 	.word	0x00000000
 80071ec:	08006f6f 	.word	0x08006f6f
 80071f0:	08007d36 	.word	0x08007d36

080071f4 <_printf_common>:
 80071f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	4616      	mov	r6, r2
 80071fa:	4699      	mov	r9, r3
 80071fc:	688a      	ldr	r2, [r1, #8]
 80071fe:	690b      	ldr	r3, [r1, #16]
 8007200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007204:	4293      	cmp	r3, r2
 8007206:	bfb8      	it	lt
 8007208:	4613      	movlt	r3, r2
 800720a:	6033      	str	r3, [r6, #0]
 800720c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007210:	4607      	mov	r7, r0
 8007212:	460c      	mov	r4, r1
 8007214:	b10a      	cbz	r2, 800721a <_printf_common+0x26>
 8007216:	3301      	adds	r3, #1
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	0699      	lsls	r1, r3, #26
 800721e:	bf42      	ittt	mi
 8007220:	6833      	ldrmi	r3, [r6, #0]
 8007222:	3302      	addmi	r3, #2
 8007224:	6033      	strmi	r3, [r6, #0]
 8007226:	6825      	ldr	r5, [r4, #0]
 8007228:	f015 0506 	ands.w	r5, r5, #6
 800722c:	d106      	bne.n	800723c <_printf_common+0x48>
 800722e:	f104 0a19 	add.w	sl, r4, #25
 8007232:	68e3      	ldr	r3, [r4, #12]
 8007234:	6832      	ldr	r2, [r6, #0]
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	42ab      	cmp	r3, r5
 800723a:	dc26      	bgt.n	800728a <_printf_common+0x96>
 800723c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007240:	1e13      	subs	r3, r2, #0
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	bf18      	it	ne
 8007246:	2301      	movne	r3, #1
 8007248:	0692      	lsls	r2, r2, #26
 800724a:	d42b      	bmi.n	80072a4 <_printf_common+0xb0>
 800724c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007250:	4649      	mov	r1, r9
 8007252:	4638      	mov	r0, r7
 8007254:	47c0      	blx	r8
 8007256:	3001      	adds	r0, #1
 8007258:	d01e      	beq.n	8007298 <_printf_common+0xa4>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	68e5      	ldr	r5, [r4, #12]
 800725e:	6832      	ldr	r2, [r6, #0]
 8007260:	f003 0306 	and.w	r3, r3, #6
 8007264:	2b04      	cmp	r3, #4
 8007266:	bf08      	it	eq
 8007268:	1aad      	subeq	r5, r5, r2
 800726a:	68a3      	ldr	r3, [r4, #8]
 800726c:	6922      	ldr	r2, [r4, #16]
 800726e:	bf0c      	ite	eq
 8007270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007274:	2500      	movne	r5, #0
 8007276:	4293      	cmp	r3, r2
 8007278:	bfc4      	itt	gt
 800727a:	1a9b      	subgt	r3, r3, r2
 800727c:	18ed      	addgt	r5, r5, r3
 800727e:	2600      	movs	r6, #0
 8007280:	341a      	adds	r4, #26
 8007282:	42b5      	cmp	r5, r6
 8007284:	d11a      	bne.n	80072bc <_printf_common+0xc8>
 8007286:	2000      	movs	r0, #0
 8007288:	e008      	b.n	800729c <_printf_common+0xa8>
 800728a:	2301      	movs	r3, #1
 800728c:	4652      	mov	r2, sl
 800728e:	4649      	mov	r1, r9
 8007290:	4638      	mov	r0, r7
 8007292:	47c0      	blx	r8
 8007294:	3001      	adds	r0, #1
 8007296:	d103      	bne.n	80072a0 <_printf_common+0xac>
 8007298:	f04f 30ff 	mov.w	r0, #4294967295
 800729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a0:	3501      	adds	r5, #1
 80072a2:	e7c6      	b.n	8007232 <_printf_common+0x3e>
 80072a4:	18e1      	adds	r1, r4, r3
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	2030      	movs	r0, #48	; 0x30
 80072aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ae:	4422      	add	r2, r4
 80072b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072b8:	3302      	adds	r3, #2
 80072ba:	e7c7      	b.n	800724c <_printf_common+0x58>
 80072bc:	2301      	movs	r3, #1
 80072be:	4622      	mov	r2, r4
 80072c0:	4649      	mov	r1, r9
 80072c2:	4638      	mov	r0, r7
 80072c4:	47c0      	blx	r8
 80072c6:	3001      	adds	r0, #1
 80072c8:	d0e6      	beq.n	8007298 <_printf_common+0xa4>
 80072ca:	3601      	adds	r6, #1
 80072cc:	e7d9      	b.n	8007282 <_printf_common+0x8e>
	...

080072d0 <_printf_i>:
 80072d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d4:	7e0f      	ldrb	r7, [r1, #24]
 80072d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072d8:	2f78      	cmp	r7, #120	; 0x78
 80072da:	4691      	mov	r9, r2
 80072dc:	4680      	mov	r8, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	469a      	mov	sl, r3
 80072e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072e6:	d807      	bhi.n	80072f8 <_printf_i+0x28>
 80072e8:	2f62      	cmp	r7, #98	; 0x62
 80072ea:	d80a      	bhi.n	8007302 <_printf_i+0x32>
 80072ec:	2f00      	cmp	r7, #0
 80072ee:	f000 80d8 	beq.w	80074a2 <_printf_i+0x1d2>
 80072f2:	2f58      	cmp	r7, #88	; 0x58
 80072f4:	f000 80a3 	beq.w	800743e <_printf_i+0x16e>
 80072f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007300:	e03a      	b.n	8007378 <_printf_i+0xa8>
 8007302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007306:	2b15      	cmp	r3, #21
 8007308:	d8f6      	bhi.n	80072f8 <_printf_i+0x28>
 800730a:	a101      	add	r1, pc, #4	; (adr r1, 8007310 <_printf_i+0x40>)
 800730c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007310:	08007369 	.word	0x08007369
 8007314:	0800737d 	.word	0x0800737d
 8007318:	080072f9 	.word	0x080072f9
 800731c:	080072f9 	.word	0x080072f9
 8007320:	080072f9 	.word	0x080072f9
 8007324:	080072f9 	.word	0x080072f9
 8007328:	0800737d 	.word	0x0800737d
 800732c:	080072f9 	.word	0x080072f9
 8007330:	080072f9 	.word	0x080072f9
 8007334:	080072f9 	.word	0x080072f9
 8007338:	080072f9 	.word	0x080072f9
 800733c:	08007489 	.word	0x08007489
 8007340:	080073ad 	.word	0x080073ad
 8007344:	0800746b 	.word	0x0800746b
 8007348:	080072f9 	.word	0x080072f9
 800734c:	080072f9 	.word	0x080072f9
 8007350:	080074ab 	.word	0x080074ab
 8007354:	080072f9 	.word	0x080072f9
 8007358:	080073ad 	.word	0x080073ad
 800735c:	080072f9 	.word	0x080072f9
 8007360:	080072f9 	.word	0x080072f9
 8007364:	08007473 	.word	0x08007473
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	1d1a      	adds	r2, r3, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	602a      	str	r2, [r5, #0]
 8007370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007378:	2301      	movs	r3, #1
 800737a:	e0a3      	b.n	80074c4 <_printf_i+0x1f4>
 800737c:	6820      	ldr	r0, [r4, #0]
 800737e:	6829      	ldr	r1, [r5, #0]
 8007380:	0606      	lsls	r6, r0, #24
 8007382:	f101 0304 	add.w	r3, r1, #4
 8007386:	d50a      	bpl.n	800739e <_printf_i+0xce>
 8007388:	680e      	ldr	r6, [r1, #0]
 800738a:	602b      	str	r3, [r5, #0]
 800738c:	2e00      	cmp	r6, #0
 800738e:	da03      	bge.n	8007398 <_printf_i+0xc8>
 8007390:	232d      	movs	r3, #45	; 0x2d
 8007392:	4276      	negs	r6, r6
 8007394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007398:	485e      	ldr	r0, [pc, #376]	; (8007514 <_printf_i+0x244>)
 800739a:	230a      	movs	r3, #10
 800739c:	e019      	b.n	80073d2 <_printf_i+0x102>
 800739e:	680e      	ldr	r6, [r1, #0]
 80073a0:	602b      	str	r3, [r5, #0]
 80073a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073a6:	bf18      	it	ne
 80073a8:	b236      	sxthne	r6, r6
 80073aa:	e7ef      	b.n	800738c <_printf_i+0xbc>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	6820      	ldr	r0, [r4, #0]
 80073b0:	1d19      	adds	r1, r3, #4
 80073b2:	6029      	str	r1, [r5, #0]
 80073b4:	0601      	lsls	r1, r0, #24
 80073b6:	d501      	bpl.n	80073bc <_printf_i+0xec>
 80073b8:	681e      	ldr	r6, [r3, #0]
 80073ba:	e002      	b.n	80073c2 <_printf_i+0xf2>
 80073bc:	0646      	lsls	r6, r0, #25
 80073be:	d5fb      	bpl.n	80073b8 <_printf_i+0xe8>
 80073c0:	881e      	ldrh	r6, [r3, #0]
 80073c2:	4854      	ldr	r0, [pc, #336]	; (8007514 <_printf_i+0x244>)
 80073c4:	2f6f      	cmp	r7, #111	; 0x6f
 80073c6:	bf0c      	ite	eq
 80073c8:	2308      	moveq	r3, #8
 80073ca:	230a      	movne	r3, #10
 80073cc:	2100      	movs	r1, #0
 80073ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073d2:	6865      	ldr	r5, [r4, #4]
 80073d4:	60a5      	str	r5, [r4, #8]
 80073d6:	2d00      	cmp	r5, #0
 80073d8:	bfa2      	ittt	ge
 80073da:	6821      	ldrge	r1, [r4, #0]
 80073dc:	f021 0104 	bicge.w	r1, r1, #4
 80073e0:	6021      	strge	r1, [r4, #0]
 80073e2:	b90e      	cbnz	r6, 80073e8 <_printf_i+0x118>
 80073e4:	2d00      	cmp	r5, #0
 80073e6:	d04d      	beq.n	8007484 <_printf_i+0x1b4>
 80073e8:	4615      	mov	r5, r2
 80073ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80073ee:	fb03 6711 	mls	r7, r3, r1, r6
 80073f2:	5dc7      	ldrb	r7, [r0, r7]
 80073f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073f8:	4637      	mov	r7, r6
 80073fa:	42bb      	cmp	r3, r7
 80073fc:	460e      	mov	r6, r1
 80073fe:	d9f4      	bls.n	80073ea <_printf_i+0x11a>
 8007400:	2b08      	cmp	r3, #8
 8007402:	d10b      	bne.n	800741c <_printf_i+0x14c>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07de      	lsls	r6, r3, #31
 8007408:	d508      	bpl.n	800741c <_printf_i+0x14c>
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	6861      	ldr	r1, [r4, #4]
 800740e:	4299      	cmp	r1, r3
 8007410:	bfde      	ittt	le
 8007412:	2330      	movle	r3, #48	; 0x30
 8007414:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007418:	f105 35ff 	addle.w	r5, r5, #4294967295
 800741c:	1b52      	subs	r2, r2, r5
 800741e:	6122      	str	r2, [r4, #16]
 8007420:	f8cd a000 	str.w	sl, [sp]
 8007424:	464b      	mov	r3, r9
 8007426:	aa03      	add	r2, sp, #12
 8007428:	4621      	mov	r1, r4
 800742a:	4640      	mov	r0, r8
 800742c:	f7ff fee2 	bl	80071f4 <_printf_common>
 8007430:	3001      	adds	r0, #1
 8007432:	d14c      	bne.n	80074ce <_printf_i+0x1fe>
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	b004      	add	sp, #16
 800743a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743e:	4835      	ldr	r0, [pc, #212]	; (8007514 <_printf_i+0x244>)
 8007440:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007444:	6829      	ldr	r1, [r5, #0]
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	f851 6b04 	ldr.w	r6, [r1], #4
 800744c:	6029      	str	r1, [r5, #0]
 800744e:	061d      	lsls	r5, r3, #24
 8007450:	d514      	bpl.n	800747c <_printf_i+0x1ac>
 8007452:	07df      	lsls	r7, r3, #31
 8007454:	bf44      	itt	mi
 8007456:	f043 0320 	orrmi.w	r3, r3, #32
 800745a:	6023      	strmi	r3, [r4, #0]
 800745c:	b91e      	cbnz	r6, 8007466 <_printf_i+0x196>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	f023 0320 	bic.w	r3, r3, #32
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	2310      	movs	r3, #16
 8007468:	e7b0      	b.n	80073cc <_printf_i+0xfc>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	f043 0320 	orr.w	r3, r3, #32
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	2378      	movs	r3, #120	; 0x78
 8007474:	4828      	ldr	r0, [pc, #160]	; (8007518 <_printf_i+0x248>)
 8007476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800747a:	e7e3      	b.n	8007444 <_printf_i+0x174>
 800747c:	0659      	lsls	r1, r3, #25
 800747e:	bf48      	it	mi
 8007480:	b2b6      	uxthmi	r6, r6
 8007482:	e7e6      	b.n	8007452 <_printf_i+0x182>
 8007484:	4615      	mov	r5, r2
 8007486:	e7bb      	b.n	8007400 <_printf_i+0x130>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	6826      	ldr	r6, [r4, #0]
 800748c:	6961      	ldr	r1, [r4, #20]
 800748e:	1d18      	adds	r0, r3, #4
 8007490:	6028      	str	r0, [r5, #0]
 8007492:	0635      	lsls	r5, r6, #24
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	d501      	bpl.n	800749c <_printf_i+0x1cc>
 8007498:	6019      	str	r1, [r3, #0]
 800749a:	e002      	b.n	80074a2 <_printf_i+0x1d2>
 800749c:	0670      	lsls	r0, r6, #25
 800749e:	d5fb      	bpl.n	8007498 <_printf_i+0x1c8>
 80074a0:	8019      	strh	r1, [r3, #0]
 80074a2:	2300      	movs	r3, #0
 80074a4:	6123      	str	r3, [r4, #16]
 80074a6:	4615      	mov	r5, r2
 80074a8:	e7ba      	b.n	8007420 <_printf_i+0x150>
 80074aa:	682b      	ldr	r3, [r5, #0]
 80074ac:	1d1a      	adds	r2, r3, #4
 80074ae:	602a      	str	r2, [r5, #0]
 80074b0:	681d      	ldr	r5, [r3, #0]
 80074b2:	6862      	ldr	r2, [r4, #4]
 80074b4:	2100      	movs	r1, #0
 80074b6:	4628      	mov	r0, r5
 80074b8:	f7f8 fe8a 	bl	80001d0 <memchr>
 80074bc:	b108      	cbz	r0, 80074c2 <_printf_i+0x1f2>
 80074be:	1b40      	subs	r0, r0, r5
 80074c0:	6060      	str	r0, [r4, #4]
 80074c2:	6863      	ldr	r3, [r4, #4]
 80074c4:	6123      	str	r3, [r4, #16]
 80074c6:	2300      	movs	r3, #0
 80074c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074cc:	e7a8      	b.n	8007420 <_printf_i+0x150>
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	462a      	mov	r2, r5
 80074d2:	4649      	mov	r1, r9
 80074d4:	4640      	mov	r0, r8
 80074d6:	47d0      	blx	sl
 80074d8:	3001      	adds	r0, #1
 80074da:	d0ab      	beq.n	8007434 <_printf_i+0x164>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	079b      	lsls	r3, r3, #30
 80074e0:	d413      	bmi.n	800750a <_printf_i+0x23a>
 80074e2:	68e0      	ldr	r0, [r4, #12]
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	4298      	cmp	r0, r3
 80074e8:	bfb8      	it	lt
 80074ea:	4618      	movlt	r0, r3
 80074ec:	e7a4      	b.n	8007438 <_printf_i+0x168>
 80074ee:	2301      	movs	r3, #1
 80074f0:	4632      	mov	r2, r6
 80074f2:	4649      	mov	r1, r9
 80074f4:	4640      	mov	r0, r8
 80074f6:	47d0      	blx	sl
 80074f8:	3001      	adds	r0, #1
 80074fa:	d09b      	beq.n	8007434 <_printf_i+0x164>
 80074fc:	3501      	adds	r5, #1
 80074fe:	68e3      	ldr	r3, [r4, #12]
 8007500:	9903      	ldr	r1, [sp, #12]
 8007502:	1a5b      	subs	r3, r3, r1
 8007504:	42ab      	cmp	r3, r5
 8007506:	dcf2      	bgt.n	80074ee <_printf_i+0x21e>
 8007508:	e7eb      	b.n	80074e2 <_printf_i+0x212>
 800750a:	2500      	movs	r5, #0
 800750c:	f104 0619 	add.w	r6, r4, #25
 8007510:	e7f5      	b.n	80074fe <_printf_i+0x22e>
 8007512:	bf00      	nop
 8007514:	08007d41 	.word	0x08007d41
 8007518:	08007d52 	.word	0x08007d52

0800751c <__sread>:
 800751c:	b510      	push	{r4, lr}
 800751e:	460c      	mov	r4, r1
 8007520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007524:	f000 f894 	bl	8007650 <_read_r>
 8007528:	2800      	cmp	r0, #0
 800752a:	bfab      	itete	ge
 800752c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800752e:	89a3      	ldrhlt	r3, [r4, #12]
 8007530:	181b      	addge	r3, r3, r0
 8007532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007536:	bfac      	ite	ge
 8007538:	6563      	strge	r3, [r4, #84]	; 0x54
 800753a:	81a3      	strhlt	r3, [r4, #12]
 800753c:	bd10      	pop	{r4, pc}

0800753e <__swrite>:
 800753e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007542:	461f      	mov	r7, r3
 8007544:	898b      	ldrh	r3, [r1, #12]
 8007546:	05db      	lsls	r3, r3, #23
 8007548:	4605      	mov	r5, r0
 800754a:	460c      	mov	r4, r1
 800754c:	4616      	mov	r6, r2
 800754e:	d505      	bpl.n	800755c <__swrite+0x1e>
 8007550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007554:	2302      	movs	r3, #2
 8007556:	2200      	movs	r2, #0
 8007558:	f000 f868 	bl	800762c <_lseek_r>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	4632      	mov	r2, r6
 800756a:	463b      	mov	r3, r7
 800756c:	4628      	mov	r0, r5
 800756e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007572:	f000 b817 	b.w	80075a4 <_write_r>

08007576 <__sseek>:
 8007576:	b510      	push	{r4, lr}
 8007578:	460c      	mov	r4, r1
 800757a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757e:	f000 f855 	bl	800762c <_lseek_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	89a3      	ldrh	r3, [r4, #12]
 8007586:	bf15      	itete	ne
 8007588:	6560      	strne	r0, [r4, #84]	; 0x54
 800758a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800758e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007592:	81a3      	strheq	r3, [r4, #12]
 8007594:	bf18      	it	ne
 8007596:	81a3      	strhne	r3, [r4, #12]
 8007598:	bd10      	pop	{r4, pc}

0800759a <__sclose>:
 800759a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759e:	f000 b813 	b.w	80075c8 <_close_r>
	...

080075a4 <_write_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4d07      	ldr	r5, [pc, #28]	; (80075c4 <_write_r+0x20>)
 80075a8:	4604      	mov	r4, r0
 80075aa:	4608      	mov	r0, r1
 80075ac:	4611      	mov	r1, r2
 80075ae:	2200      	movs	r2, #0
 80075b0:	602a      	str	r2, [r5, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f7f9 fa5f 	bl	8000a76 <_write>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_write_r+0x1e>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_write_r+0x1e>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	20000658 	.word	0x20000658

080075c8 <_close_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	; (80075e4 <_close_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7f9 fa6b 	bl	8000aae <_close>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_close_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_close_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	20000658 	.word	0x20000658

080075e8 <_fstat_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d07      	ldr	r5, [pc, #28]	; (8007608 <_fstat_r+0x20>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	4611      	mov	r1, r2
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	f7f9 fa66 	bl	8000ac6 <_fstat>
 80075fa:	1c43      	adds	r3, r0, #1
 80075fc:	d102      	bne.n	8007604 <_fstat_r+0x1c>
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	b103      	cbz	r3, 8007604 <_fstat_r+0x1c>
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	bd38      	pop	{r3, r4, r5, pc}
 8007606:	bf00      	nop
 8007608:	20000658 	.word	0x20000658

0800760c <_isatty_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d06      	ldr	r5, [pc, #24]	; (8007628 <_isatty_r+0x1c>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	f7f9 fa65 	bl	8000ae6 <_isatty>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_isatty_r+0x1a>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_isatty_r+0x1a>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	20000658 	.word	0x20000658

0800762c <_lseek_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d07      	ldr	r5, [pc, #28]	; (800764c <_lseek_r+0x20>)
 8007630:	4604      	mov	r4, r0
 8007632:	4608      	mov	r0, r1
 8007634:	4611      	mov	r1, r2
 8007636:	2200      	movs	r2, #0
 8007638:	602a      	str	r2, [r5, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	f7f9 fa5e 	bl	8000afc <_lseek>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_lseek_r+0x1e>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_lseek_r+0x1e>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	20000658 	.word	0x20000658

08007650 <_read_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d07      	ldr	r5, [pc, #28]	; (8007670 <_read_r+0x20>)
 8007654:	4604      	mov	r4, r0
 8007656:	4608      	mov	r0, r1
 8007658:	4611      	mov	r1, r2
 800765a:	2200      	movs	r2, #0
 800765c:	602a      	str	r2, [r5, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	f7f9 f9ec 	bl	8000a3c <_read>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_read_r+0x1e>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_read_r+0x1e>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	20000658 	.word	0x20000658

08007674 <_init>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr

08007680 <_fini>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	bf00      	nop
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr
