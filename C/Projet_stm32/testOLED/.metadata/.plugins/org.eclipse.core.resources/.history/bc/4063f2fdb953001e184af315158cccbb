/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "u8g2.h"
#include "u8x8_stm32_HAL.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct {
	uint8_t x;
	uint8_t y;
	unsigned char *motif;
	bool majDemandee;
} Icone_t;

typedef enum {
	NOIR, BLANC
} Couleur_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define NB_OCTETS_PAR_LIGNE 2
#define NB_LIGNE 			5
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
volatile Icone_t icone;
unsigned char image1[NB_OCTETS_PAR_LIGNE * NB_LIGNE] = { 0x81, 0x42, 0x24, 0x18,
		0xFF, 0xAA, 0x55, 0x11 };
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**
 * @brief Period elapsed half complete callback in non-blocking mode
 * @param htim TIM handle
 * @retval None
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 /* Prevent unused argument(s) compilation warning */
 UNUSED(htim);

 /* NOTE : This function should not be modified, when the callback is needed,
           the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
  */
 icone.x++;
 icone.majDemandee = 1;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	u8g2_t u8g2;
	uint8_t *buf; // the pointer to a dynamically allocated page buffer
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
	printf("Boot\r\n");

	// Configuration de l'afficheur OLED
	// cf : https://github.com/olikraus/u8g2/wiki/u8g2setupc#ssd1306-128x64_noname
	// si appel u8g2_Setup_ssd1306_i2c_128x64_noname_1 => 128 octets de framebuffer (il faut passer par les pages (fonctions u8g2_FirstPage et u8g2_NextPage))
	// si appel u8g2_Setup_ssd1306_i2c_128x64_noname_2 => 256 octets de framebuffer (il faut passer par les pages (fonctions u8g2_FirstPage et u8g2_NextPage))
	// si appel u8g2_Setup_ssd1306_i2c_128x64_noname_f => 1024 octets de framebuffer (Full Buffer Mode)
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R2, u8x8_byte_hw_i2c,
			u8x8_stm32_gpio_and_delay_cb); // init u8g2 structure

	printf("taille buffer : %d\r\n", u8g2_GetBufferSize(&u8g2));
	buf = (uint8_t*) malloc(u8g2_GetBufferSize(&u8g2)); // dynamically allocate a buffer of the required size
	u8g2_SetBufferPtr(&u8g2, buf); // set the internal page buffer pointer to the newly allocated page buffer

	u8g2_InitDisplay(&u8g2); // send init sequence to the display, display is in sleep mode after this,
	u8g2_SetPowerSave(&u8g2, 0); // wake up display
	u8g2_ClearBuffer(&u8g2);

	u8g2_SetDrawColor(&u8g2, BLANC);

	u8g2_SetFont(&u8g2, u8g2_font_courB10_tr);
	u8g2_SetFontRefHeightExtendedText(&u8g2);
	u8g2_SetFontPosTop(&u8g2);
	u8g2_SetFontDirection(&u8g2, 0);

	u8g2_DrawStr(&u8g2, 20, 50, "RAN IE3 ESE");

	u8g2_DrawBox(&u8g2, 60, 30, 10, 20);

	u8g2_DrawPixel(&u8g2, 40, 40);

	icone.x = 30;
	icone.y = 10;
	icone.motif = image1;
	//u8g2_DrawXBM(&u8g2, icone.x, icone.y, LARGEUR, HAUTEUR, icone.motif);
	u8g2_DrawBitmap(&u8g2, icone.x, icone.y, NB_OCTETS_PAR_LIGNE, NB_LIGNE,
			icone.motif);

	u8g2_SendBuffer(&u8g2);  // IMPORTANT

	//HAL_TIM_Base_Start(&htim2);
	HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		/*if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET)
		 {
		 __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
		 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		 //
		 }*/
		if (icone.majDemandee == 1) {
			icone.majDemandee = 0;
			u8g2_ClearBuffer(&u8g2);
			u8g2_DrawBitmap(&u8g2, icone.x, icone.y, NB_OCTETS_PAR_LIGNE,
					NB_LIGNE, icone.motif);
			u8g2_SendBuffer(&u8g2);

		}

		//HAL_Delay(100);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
